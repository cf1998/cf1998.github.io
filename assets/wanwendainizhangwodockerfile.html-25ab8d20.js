import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, b as createBaseVNode, d as createTextVNode, e as createVNode, a as createStaticVNode } from "./app-45f9d385.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="什么是dockerfile" tabindex="-1"><a class="header-anchor" href="#什么是dockerfile" aria-hidden="true">#</a> 什么是Dockerfile</h2><p>Dockerfile是用于构建Docker容器镜像的文本文件，它包含了一系列指令和配置，用于描述如何组装一个Docker容器的环境。通过Dockerfile，你可以自动化地构建镜像，确保在不同的环境中都可以复现相同的容器。 Dockerfile中的指令可以指定从哪个基础镜像开始构建、复制文件到镜像中、安装软件包、设置环境变量、暴露端口、运行命令等等。每个指令都会在镜像的构建过程中创建一个新的镜像层，这些层构成了最终镜像的结构。这种分层结构让镜像的构建更加高效，同时也方便了镜像的复用和共享。 以下是一个简单的Dockerfile示例：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 使用官方的 Python 3 基础镜像</span>\n<span class="token instruction"><span class="token keyword">FROM</span> python:3</span>\n\n<span class="token comment"># 将当前目录下的文件复制到镜像中的 /app 目录</span>\n<span class="token instruction"><span class="token keyword">COPY</span> . /app</span>\n\n<span class="token comment"># 设置工作目录</span>\n<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>\n\n<span class="token comment"># 安装依赖包</span>\n<span class="token instruction"><span class="token keyword">RUN</span> pip install -r requirements.txt</span>\n\n<span class="token comment"># 暴露容器监听的端口</span>\n<span class="token instruction"><span class="token keyword">EXPOSE</span> 80</span>\n\n<span class="token comment"># 定义容器启动时运行的命令</span>\n<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;python&quot;</span>, <span class="token string">&quot;app.py&quot;</span>]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上Dockerfile创建了一个基于Python 3的镜像，将当前目录下的文件复制到镜像中的/app目录，安装了requirements.txt中指定的依赖包，暴露了容器的80端口，并定义了容器启动时运行的命令。 使用Dockerfile可以极大地简化镜像构建过程，帮助开发人员和运维团队更加方便地管理和交付应用程序的环境。通过Dockerfile，你可以定义一个应用程序的完整运行环境，而不需要担心在不同的机器或平台上出现环境不一致的问题。</p><h2 id="dockerfile指令详解" tabindex="-1"><a class="header-anchor" href="#dockerfile指令详解" aria-hidden="true">#</a> Dockerfile指令详解</h2><p>dockerfile指令大全</p><table><thead><tr><th>Dockerfile 指令</th><th>说明</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像，用于后续的指令构建。</td></tr><tr><td>MAINTAINER</td><td>指定Dockerfile的作者/维护者。</td></tr><tr><td>LABEL</td><td>添加镜像的元数据，使用键值对的形式。</td></tr><tr><td>RUN</td><td>在构建过程中在镜像中执行命令。</td></tr><tr><td>CMD</td><td>指定容器创建时的默认命令。（可以被覆盖）</td></tr><tr><td>ENTRYPOINT</td><td>设置容器创建时的主要命令。（不可被覆盖）</td></tr><tr><td>EXPOSE</td><td>声明容器运行时监听的特定网络端口。</td></tr><tr><td>ENV</td><td>在容器内部设置环境变量。</td></tr><tr><td>ADD</td><td>将文件、目录或远程URL复制到镜像中。</td></tr><tr><td>COPY</td><td>将文件或目录复制到镜像中。</td></tr><tr><td>VOLUME</td><td>为容器创建挂载点或声明卷。</td></tr><tr><td>WORKDIR</td><td>设置后续指令的工作目录。</td></tr><tr><td>USER</td><td>指定后续指令的用户上下文。</td></tr><tr><td>ARG</td><td>定义在构建过程中传递给构建器的变量，可使用 &quot;docker build&quot; 命令设置。</td></tr><tr><td>ONBUILD</td><td>当该镜像被用作另一个构建过程的基础时，添加触发器。</td></tr><tr><td>STOPSIGNAL</td><td>设置发送给容器以退出的系统调用信号。</td></tr><tr><td>HEALTHCHECK</td><td>定义周期性检查容器健康状态的命令。</td></tr><tr><td>SHELL</td><td>覆盖Docker中默认的shell，用于RUN、CMD和ENTRYPOINT指令。</td></tr></tbody></table><h3 id="from" tabindex="-1"><a class="header-anchor" href="#from" aria-hidden="true">#</a> FROM</h3><p>FROM是Dockerfile中的第一个指令，也是一个必须的指令。它用于指定构建新镜像时所基于的基础镜像。基础镜像可以是官方的Docker镜像，也可以是其他人或组织发布在Docker Hub或其他容器注册表中的镜像。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>格式：\n　　FROM &lt;image&gt;\n　　FROM &lt;image&gt;:&lt;tag&gt;\n示例：\n    <span class="token instruction"><span class="token keyword">FROM</span> nginx:1.25.1-alpine 默认不写使用latest版本的基础镜像</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="maintainer" tabindex="-1"><a class="header-anchor" href="#maintainer" aria-hidden="true">#</a> MAINTAINER</h3><p>用于指定镜像的维护者信息。它的作用和用法与LABEL指令类似，用于为镜像添加作者、维护者、联系方式等元数据。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>格式：\n    <span class="token instruction"><span class="token keyword">MAINTAINER</span> &lt;name&gt;</span>\n示例：\n    <span class="token instruction"><span class="token keyword">MAINTAINER</span> Jack yu</span>\n    <span class="token instruction"><span class="token keyword">MAINTAINER</span> xxx@qq.com</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="label" tabindex="-1"><a class="header-anchor" href="#label" aria-hidden="true">#</a> LABEL</h3><p>用于向镜像添加元数据标签。这些标签可以包含关于镜像的信息，如作者、版本、描述、维护者等。LABEL指令是可选的，但它在构建镜像时为镜像添加了有用的描述性信息，有助于更好地管理和组织镜像库。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>格式：\n   <span class="token instruction"><span class="token keyword">LABEL</span> &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span>\n示例：\n    <span class="token instruction"><span class="token keyword">LABEL</span> <span class="token string">&quot;com.example.vendor&quot;</span>=<span class="token string">&quot;ACME Incorporated&quot;</span></span>\n    <span class="token instruction"><span class="token keyword">LABEL</span> com.example.label-with-value=<span class="token string">&quot;foo&quot;</span></span>\n    <span class="token instruction"><span class="token keyword">LABEL</span> version=<span class="token string">&quot;1.0&quot;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用LABEL指令有更广泛的用途，可以用来添加更多类型的元数据信息，而MAINTAINER指令仅限于指定维护者信息。因此，如果你正在编写新的Dockerfile，建议使用LABEL指令来添加元数据信息，而避免使用过时的MAINTAINER指令。</p><h3 id="run" tabindex="-1"><a class="header-anchor" href="#run" aria-hidden="true">#</a> RUN</h3><p>RUN是Dockerfile中的一个重要指令，用于在镜像中执行命令，以便在构建过程中安装软件包、配置环境、生成文件等。RUN指令执行的命令会在新的镜像层中运行，并且在后续构建中，只有在该层之前的内容发生变化时才会重新运行，利用了Docker的缓存机制，提高了构建速度。 RUN指令可以接受多种格式的命令执行方式： Shell 格式：默认情况下，RUN指令使用Shell来执行命令。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y python3</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Exec 格式：使用数组格式，可以避免在Shell中发生意外的解释问题。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> [<span class="token string">&quot;apt-get&quot;</span>, <span class="token string">&quot;update&quot;</span>]</span>\n<span class="token instruction"><span class="token keyword">RUN</span> [<span class="token string">&quot;apt-get&quot;</span>, <span class="token string">&quot;install&quot;</span>, <span class="token string">&quot;-y&quot;</span>, <span class="token string">&quot;python3&quot;</span>]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>RUN指令在Dockerfile中可以出现多次，并且每个RUN指令都会创建一个新的镜像层。为了减少镜像的层数，可以将多个命令合并为一行，例如使用&amp;&amp;连接多个命令，这样在构建镜像时只会生成一个新的层。</p><h3 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd" aria-hidden="true">#</a> CMD</h3><p>CMD是Dockerfile中的一个重要指令，用于定义容器启动时默认要执行的命令。一个Dockerfile中只能包含一个CMD指令，如果有多个，则只有最后一个CMD指令会生效。 CMD指令有两种格式： Shell 格式：使用Shell格式时，命令会在Shell中执行。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">CMD</span> python app.py</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Exec 格式：使用数组格式时，命令不会在Shell中执行，而是直接在容器中执行。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;python&quot;</span>, <span class="token string">&quot;app.py&quot;</span>]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用CMD指令可以为镜像定义一个默认的启动命令，当使用docker run命令启动容器时，如果没有指定其他命令，就会执行CMD中定义的命令。这使得在创建容器时无需手动指定要运行的命令，从而使容器的使用更加简便。 如果在docker run命令中指定了其他命令，则会覆盖CMD指令中的默认命令。例如，如果在启动容器时执行以下命令，就会覆盖CMD中定义的默认启动命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run my_image python script.py\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上面的例子中，容器会运行python script.py命令，而不是默认的CMD指令中定义的命令。</p><h3 id="entrypoint" tabindex="-1"><a class="header-anchor" href="#entrypoint" aria-hidden="true">#</a> ENTRYPOINT</h3><p>ENTRYPOINT是Dockerfile中的一个重要指令，用于配置容器启动时的默认执行命令。它类似于CMD指令，但有一些关键的区别。 ENTRYPOINT指令的格式与CMD指令类似，可以使用Shell格式或数组格式，但在使用时，需要注意以下几点：</p><ol><li>ENTRYPOINT指令的命令会在容器启动时始终执行，无论在docker run命令中是否指定了其他命令。它不会被覆盖，而是作为容器的主要执行命令。</li><li>如果在docker run命令中指定了其他命令，这些命令将作为ENTRYPOINT指令的参数进行传递。也就是说，ENTRYPOINT指令中的命令将成为执行时的前缀。</li></ol><p>下面是一个使用ENTRYPOINT指令的简单示例：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>\n \n<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;echo&quot;</span>, <span class="token string">&quot;Hello&quot;</span>]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们构建该镜像并运行容器，不提供其他参数，那么容器启动后将输出 &quot;Hello&quot;：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> build <span class="token parameter variable">-t</span> my_image <span class="token builtin class-name">.</span>\n$ <span class="token function">docker</span> run my_image\nHello\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们在运行容器时提供了其他参数，那么这些参数将作为ENTRYPOINT指令中命令的参数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run my_image <span class="token string">&quot;World&quot;</span>\nHello World\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际应用中，可以使用ENTRYPOINT指令来定义一个可执行的程序或脚本，然后在容器启动时运行这个程序，并将Docker容器作为可执行应用来使用。这样可以确保容器在运行时的行为是可预期的，而且可以将容器配置和执行逻辑完全封装在镜像内部，使得容器的使用更加方便和易于管理。</p><h2 id="expose" tabindex="-1"><a class="header-anchor" href="#expose" aria-hidden="true">#</a> EXPOSE</h2><p>EXPOSE用于声明容器在运行时监听的网络端口。它并不会实际上打开或映射端口，而是作为一个文档功能，用于告知用户该镜像内的服务或应用程序将使用指定的端口。 以下是一个简单的示例：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>\n \n<span class="token comment"># 声明容器将监听80端口</span>\n<span class="token instruction"><span class="token keyword">EXPOSE</span> 80</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们声明了容器将监听80端口。但是需要注意的是，EXPOSE并不会实际上打开该端口，也不会进行端口映射。在使用docker run命令启动容器时，如果需要通过主机访问容器的80端口，还需要使用-p选项来进行端口映射，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 my_image\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述命令将容器的80端口映射到主机的8080端口，这样就可以通过访问主机的8080端口来访问容器的服务。</p><h3 id="env" tabindex="-1"><a class="header-anchor" href="#env" aria-hidden="true">#</a> ENV</h3><p>ENV用于设置环境变量。它允许在镜像构建过程中设置环境变量，这些环境变量将在容器运行时可用。 ENV指令的格式是ENV key=value，其中key是环境变量的名称，value是环境变量的值。你可以使用多个ENV指令来设置多个环境变量。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>\n \n<span class="token comment"># 设置环境变量</span>\n<span class="token instruction"><span class="token keyword">ENV</span> MY_NAME John Doe</span>\n<span class="token instruction"><span class="token keyword">ENV</span> APP_HOME /app</span>\n \n<span class="token comment"># 创建目录并设置工作目录</span>\n<span class="token instruction"><span class="token keyword">RUN</span> mkdir <span class="token variable">$APP_HOME</span></span>\n<span class="token instruction"><span class="token keyword">WORKDIR</span> <span class="token variable">$APP_HOME</span></span>\n \n<span class="token comment"># 复制应用程序到镜像中</span>\n<span class="token instruction"><span class="token keyword">COPY</span> . .</span>\n \n<span class="token comment"># 在运行时输出环境变量</span>\n<span class="token instruction"><span class="token keyword">CMD</span> echo <span class="token string">&quot;Hello, $MY_NAME&quot;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用了两个ENV指令来设置两个环境变量：MY_NAME和APP_HOME。在镜像构建过程中，这些环境变量会被设置为指定的值。然后，在容器启动时，CMD指令中的命令将使用$MY_NAME环境变量的值输出问候语。 在运行容器时，你可以通过docker run命令的-e选项来覆盖环境变量的值。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-e</span> <span class="token assign-left variable">MY_NAME</span><span class="token operator">=</span><span class="token string">&quot;Alice&quot;</span> my_image\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述命令将覆盖默认的MY_NAME环境变量值，容器将输出 &quot;Hello, Alice&quot;。</p><h3 id="add" tabindex="-1"><a class="header-anchor" href="#add" aria-hidden="true">#</a> ADD</h3><p>ADD用于将文件、目录或远程URL复制到镜像中。它类似于COPY指令，但在功能上更强大。 ADD指令的格式是ADD source destination，其中source是要复制的源文件、目录或URL，destination是复制后的目标路径。destination可以是绝对路径或相对于工作目录的路径。 除了复制文件和目录，ADD指令还支持自动解压缩。如果source是一个压缩文件（例如.tar、.tar.gz、.tgz、.zip等），那么ADD指令会自动解压缩该文件到destination指定的目录。 以下是一些ADD指令的示例： 复制本地文件到镜像中：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ADD</span> app.py /app/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制本地目录到镜像中：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ADD</span> src/ /app/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从远程URL下载文件并复制到镜像中：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ADD</span> https://example.com/file.tar.gz /tmp/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解压缩压缩文件并复制到镜像中：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ADD</span> app.tar.gz /app/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="copy" tabindex="-1"><a class="header-anchor" href="#copy" aria-hidden="true">#</a> COPY</h3><p>COPY用于将本地文件或目录复制到镜像中。它不支持自动解压缩功能，与ADD指令相比，功能更简单明确。 COPY指令的格式是COPY source destination，其中source是要复制的源文件或目录，destination是复制后的目标路径。destination可以是绝对路径或相对于工作目录的路径。 以下是一些COPY指令的示例： 复制本地文件到镜像中：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">COPY</span> app.py /app/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制本地目录到镜像中：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">COPY</span> src/ /app/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>COPY指令会将本地文件或目录复制到镜像中的指定位置。在构建镜像时，Docker将会在镜像的文件系统层中添加复制的文件或目录。这使得镜像的构建过程更加明确，不会产生自动解压缩的不确定行为。 相对于ADD指令，COPY指令更为推荐，特别是在只需要简单复制本地文件或目录的情况下。COPY指令功能简单，不容易引起不必要的意外行为。对于大多数复制文件的场景，建议使用COPY指令。</p><h3 id="volume" tabindex="-1"><a class="header-anchor" href="#volume" aria-hidden="true">#</a> VOLUME</h3><p>VOLUME于声明容器中的挂载点（数据卷）。数据卷是一个特殊的目录，它可以绕过联合文件系统（UnionFS），并在容器间共享数据。 VOLUME指令的格式是VOLUME [&quot;/path/to/directory&quot;]，其中/path/to/directory是挂载点的路径。可以在一个Dockerfile中使用多个VOLUME指令来声明多个挂载点。 以下是一个简单的示例：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>\n \n<span class="token comment"># 声明两个挂载点</span>\n<span class="token instruction"><span class="token keyword">VOLUME</span> [<span class="token string">&quot;/app/data&quot;</span>, <span class="token string">&quot;/app/logs&quot;</span>]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们声明了两个挂载点/app/data和/app/logs，这样在运行容器时，可以将这两个挂载点映射到主机的文件系统中，以实现数据持久化和共享。 在运行容器时，可以使用-v选项或--mount选项来将主机的目录或数据卷映射到容器的挂载点。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-v</span> /host/data:/app/data <span class="token parameter variable">-v</span> /host/logs:/app/logs my_image\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述命令将主机的/host/data和/host/logs目录分别映射到容器中的/app/data和/app/logs挂载点，实现了主机和容器之间的数据共享。</p><h3 id="workdir" tabindex="-1"><a class="header-anchor" href="#workdir" aria-hidden="true">#</a> WORKDIR</h3><p>WORKDIR用于设置工作目录，也称为当前工作目录。在容器启动时，进程的当前工作目录将被设置为WORKDIR指令所指定的目录。 我们使用WORKDIR指令将工作目录设置为/app，</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>\n \n<span class="token comment"># 设置工作目录</span>\n<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>\n \n<span class="token comment"># 容器启动时运行的命令</span>\n<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;python&quot;</span>, <span class="token string">&quot;app.py&quot;</span>]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当容器启动时，进程的当前工作目录将自动设置为/app，这样在执行CMD指令时，不需要使用绝对路径来运行python app.py。</p><h3 id="user" tabindex="-1"><a class="header-anchor" href="#user" aria-hidden="true">#</a> USER</h3><p>USER用于指定在容器中运行镜像时要使用的非特权用户。默认情况下，Docker容器在启动时以root用户身份运行，这意味着容器内的进程具有最高权限。然而，为了加强安全性，避免潜在的安全风险，最好以非特权用户的身份运行容器中的应用程序。 以下是一个简单的示例：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>\n \n<span class="token comment"># 创建一个新用户并切换到该用户</span>\n<span class="token instruction"><span class="token keyword">RUN</span> useradd -ms /bin/bash myuser</span>\n<span class="token instruction"><span class="token keyword">USER</span> myuser</span>\n \n<span class="token comment"># 设置工作目录</span>\n<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>\n \n<span class="token comment"># 复制应用程序到工作目录</span>\n<span class="token instruction"><span class="token keyword">COPY</span> . .</span>\n \n<span class="token comment"># 设置环境变量</span>\n<span class="token instruction"><span class="token keyword">ENV</span> APP_ENV production</span>\n \n<span class="token comment"># 容器启动时运行的命令</span>\n<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;python&quot;</span>, <span class="token string">&quot;app.py&quot;</span>]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用useradd命令创建了一个名为myuser的新用户，并使用-ms /bin/bash选项指定了创建用户时使用的shell。然后，通过USER指令切换到了myuser用户。这样，在容器运行时，进程将以myuser用户的身份运行，而不是以root用户身份。</p><h3 id="arg" tabindex="-1"><a class="header-anchor" href="#arg" aria-hidden="true">#</a> ARG</h3><p>ARG是用于定义构建参数（build-time arguments）。构建参数允许在构建镜像时传递变量值，这些变量可以在Dockerfile中使用，并且在构建过程中可以通过--build-arg选项进行覆盖。 以下是一个简单的示例：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>\n \n<span class="token comment"># 定义构建参数</span>\n<span class="token instruction"><span class="token keyword">ARG</span> MY_ENV=production</span>\n \n<span class="token comment"># 使用构建参数设置环境变量</span>\n<span class="token instruction"><span class="token keyword">ENV</span> ENVIRONMENT=<span class="token variable">$MY_ENV</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们通过ARG指令定义了一个名为MY_ENV的构建参数，并设置了其默认值为production。然后，在FROM指令之后，我们使用构建参数设置了一个名为ENVIRONMENT的环境变量。 在构建镜像时，可以通过--build-arg选项来指定构建参数的值，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> build --build-arg <span class="token assign-left variable">MY_ENV</span><span class="token operator">=</span>development <span class="token parameter variable">-t</span> my_image <span class="token builtin class-name">.</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述命令中，我们通过--build-arg选项将构建参数MY_ENV的值覆盖为development，构建参数的使用使得在构建镜像时可以根据需要进行参数化配置，使镜像更加灵活和可配置。</p><h3 id="onbuild" tabindex="-1"><a class="header-anchor" href="#onbuild" aria-hidden="true">#</a> ONBUILD</h3><p>ONBUILD用于定义一个触发器，在当前镜像作为基础镜像被其他镜像构建时执行一系列的操作。换句话说，ONBUILD允许你在当前镜像构建时定义一些操作，这些操作会在其他镜像以当前镜像为基础构建时执行。 例如，你可以在一个基础镜像中使用ONBUILD指令来定义安装依赖包的操作，然后其他镜像可以继承这个基础镜像，并在构建时自动安装所需的依赖。 基础镜像 base/Dockerfile:</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>\n \n<span class="token comment"># 安装一些基本依赖包</span>\n<span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y build-essential</span>\n \n<span class="token comment"># 在其他镜像构建时执行的操作</span>\n<span class="token instruction"><span class="token keyword">ONBUILD</span> <span class="token keyword">RUN</span> echo <span class="token string">&quot;Hello from the ONBUILD trigger!&quot;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他镜像 myapp/Dockerfile:</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> base</span>\n \n<span class="token comment"># 复制应用程序到镜像中</span>\n<span class="token instruction"><span class="token keyword">COPY</span> . /app</span>\n \n<span class="token comment"># 容器启动时运行的命令</span>\n<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;python&quot;</span>, <span class="token string">&quot;app.py&quot;</span>]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们定义了一个基础镜像base，它包含一个ONBUILD触发器，在其他镜像构建时会输出 &quot;Hello from the ONBUILD trigger!&quot;。然后，在另一个镜像myapp中，我们继承了base镜像，并在容器中运行应用程序。当构建myapp镜像时，ONBUILD触发器会自动执行，并输出消息。</p><h3 id="stopsignal" tabindex="-1"><a class="header-anchor" href="#stopsignal" aria-hidden="true">#</a> STOPSIGNAL</h3><p>STOPSIGNAL用于设置在停止容器时要使用的信号。当使用docker stop命令停止容器时，Docker会向容器发送一个指定的信号，这个信号将触发容器的停止操作。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>\n \n<span class="token comment"># 设置停止容器时使用的信号</span>\n<span class="token instruction"><span class="token keyword">STOPSIGNAL</span> SIGINT</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用STOPSIGNAL指令设置容器停止时使用的信号为SIGINT，即信号编号为2。这意味着当我们使用docker stop命令停止容器时，Docker会发送SIGINT信号给容器，触发容器的停止操作。</p><h3 id="healthcheck" tabindex="-1"><a class="header-anchor" href="#healthcheck" aria-hidden="true">#</a> HEALTHCHECK</h3><p>HEALTHCHECK用于定义容器的健康检查机制。健康检查是一种用于确定容器是否处于正常运行状态的机制，通过定期检查容器内部的服务或应用程序，可以确保容器持续提供可用的服务。</p><p>HEALTHCHECK指令有以下几个选项：</p><ul><li><code>--interval=&lt;duration&gt;：设置健康检查的间隔时间，默认为30秒。</code></li><li><code>--timeout=&lt;duration&gt;：设置健康检查命令的超时时间，默认为30秒。</code></li><li><code>--start-period=&lt;duration&gt;：设置容器启动后的等待时间，等待一定时间后开始进行健康检查，默认为0秒。</code></li><li><code>--retries=&lt;number&gt;：设置健康检查失败后重试的次数，默认为3次。</code></li></ul><p>以下是一个简单的示例：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>\n \n<span class="token comment"># 健康检查命令</span>\n<span class="token instruction"><span class="token keyword">HEALTHCHECK</span> <span class="token options"><span class="token property">--interval</span><span class="token punctuation">=</span><span class="token string">5s</span> <span class="token property">--timeout</span><span class="token punctuation">=</span><span class="token string">3s</span></span> <span class="token keyword">CMD</span> curl -f http://localhost/ || exit 1</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 104);
const _hoisted_105 = {
  href: "http://localhost/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_106 = /* @__PURE__ */ createStaticVNode('<h3 id="shell" tabindex="-1"><a class="header-anchor" href="#shell" aria-hidden="true">#</a> SHELL</h3><p>SHELL是Dockerfile中的一个特殊指令，用于设置在构建镜像时使用的Shell。它允许你指定在Dockerfile中执行的命令所使用的Shell解释器。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 设置使用bash作为Shell解释器</span>\n<span class="token instruction"><span class="token keyword">SHELL</span> [<span class="token string">&quot;/bin/bash&quot;</span>, <span class="token string">&quot;-c&quot;</span>]</span>\n \n<span class="token comment"># 在构建镜像时执行命令</span>\n<span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">&quot;Hello, Docker!&quot;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用SHELL指令将Shell解释器设置为bash。然后，在RUN指令中，我们执行了一个简单的命令来输出 &quot;Hello, Docker!&quot;。</p><h2 id="使用dockerfile定制镜像" tabindex="-1"><a class="header-anchor" href="#使用dockerfile定制镜像" aria-hidden="true">#</a> 使用Dockerfile定制镜像</h2><p>以下是一个简单的Dockerfile示例：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 使用官方的Ubuntu 20.04镜像作为基础镜像</span>\n<span class="token instruction"><span class="token keyword">FROM</span> ubuntu:20.04</span>\n \n<span class="token comment"># 设置工作目录</span>\n<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>\n \n<span class="token comment"># 复制应用程序到镜像中</span>\n<span class="token instruction"><span class="token keyword">COPY</span> . .</span>\n \n<span class="token comment"># 安装应用程序所需的依赖</span>\n<span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y python3</span>\n \n<span class="token comment"># 设置环境变量</span>\n<span class="token instruction"><span class="token keyword">ENV</span> APP_ENV production</span>\n \n<span class="token comment"># 容器启动时运行的命令</span>\n<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;python3&quot;</span>, <span class="token string">&quot;app.py&quot;</span>]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建镜像：docker build命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> my_image <span class="token builtin class-name">.</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>docker build命令会根据Dockerfile的内容，逐条执行其中的指令，并创建一个新的镜像。构建过程会根据每条指令的内容，生成新的镜像层。每条指令都会在上一层的基础上进行修改，最终构建出一个完整的镜像。 基于参数构建镜像:</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>\n<span class="token comment"># 使用官方的Ubuntu 20.04镜像作为基础镜像</span>\n<span class="token instruction"><span class="token keyword">FROM</span> ubuntu:20.04</span>\n \n<span class="token comment"># 定义构建参数</span>\n<span class="token instruction"><span class="token keyword">ARG</span> APP_VERSION=1.0</span>\n \n<span class="token comment"># 设置工作目录</span>\n<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>\n \n<span class="token comment"># 复制应用程序到镜像中</span>\n<span class="token instruction"><span class="token keyword">COPY</span> app-v<span class="token variable">$APP_VERSION</span> .</span>\n \n<span class="token comment"># 容器启动时运行的命令</span>\n<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;./app&quot;</span>]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建镜像时，可以通过--build-arg选项来指定构建参数的值：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build --build-arg <span class="token assign-left variable">APP_VERSION</span><span class="token operator">=</span><span class="token number">2.0</span> <span class="token parameter variable">-t</span> my_app <span class="token builtin class-name">.</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述命令将构建一个标签为my_app的镜像，其中APP_VERSION构建参数的值为2.0，因此COPY指令将复制app-v2.0目录到镜像中。</p><h2 id="dockerfile最佳实践" tabindex="-1"><a class="header-anchor" href="#dockerfile最佳实践" aria-hidden="true">#</a> Dockerfile最佳实践</h2><h3 id="最小化镜像大小" tabindex="-1"><a class="header-anchor" href="#最小化镜像大小" aria-hidden="true">#</a> 最小化镜像大小</h3><p>最小化Docker镜像的大小是一个重要的优化策略，可以减少网络传输和存储开销，加快镜像的下载和部署速度。以下是一些最小化镜像大小的技巧：</p><ul><li>使用轻量的基础镜像：选择合适的基础镜像，可以避免不必要的依赖和组件，例如Alpine Linux镜像比Ubuntu镜像更轻量。</li><li>单独安装软件包：将软件包的安装命令合并到一条RUN指令中，并在安装完成后清理缓存和临时文件，以减少镜像大小。</li><li>删除不必要的文件：在复制文件或目录到镜像时，只复制必要的文件，并在复制后删除不需要的文件和目录。</li><li>使用特定的构建工具：对于特定的编程语言和应用程序，使用专门优化过的构建工具可以减少构建中的不必要依赖。</li></ul><h3 id="使用多阶段构建" tabindex="-1"><a class="header-anchor" href="#使用多阶段构建" aria-hidden="true">#</a> 使用多阶段构建</h3><p>多阶段构建是一种有效的优化技术，可以在一个Dockerfile中使用多个FROM指令，每个FROM指令都代表一个构建阶段。每个构建阶段都可以从之前的阶段复制所需的文件，并执行特定的构建操作。 使用多阶段构建可以使得最终生成的镜像只包含运行应用程序所必需的文件和依赖，而不包含构建过程中产生的不必要文件和依赖。 以下是一个多阶段构建的示例：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 构建阶段1</span>\n<span class="token instruction"><span class="token keyword">FROM</span> golang:1.17 <span class="token keyword">AS</span> builder</span>\n \n<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>\n<span class="token instruction"><span class="token keyword">COPY</span> . .</span>\n \n<span class="token comment"># 编译应用程序</span>\n<span class="token instruction"><span class="token keyword">RUN</span> go build -o myapp</span>\n \n<span class="token comment"># 构建阶段2</span>\n<span class="token instruction"><span class="token keyword">FROM</span> alpine:latest</span>\n \n<span class="token comment"># 复制编译后的应用程序</span>\n<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> /app/myapp /usr/local/bin/</span>\n \n<span class="token comment"># 设置工作目录</span>\n<span class="token instruction"><span class="token keyword">WORKDIR</span> /usr/local/bin</span>\n \n<span class="token comment"># 容器启动时运行的命令</span>\n<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;myapp&quot;</span>]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用两个构建阶段。第一个构建阶段使用Golang基础镜像来编译应用程序，第二个构建阶段使用Alpine Linux基础镜像，仅复制编译后的应用程序，并设置容器启动时的命令。</p><h3 id="有效使用缓存" tabindex="-1"><a class="header-anchor" href="#有效使用缓存" aria-hidden="true">#</a> 有效使用缓存</h3><p>Docker在构建镜像时会缓存每个指令的结果，以便在下次构建相同的指令时直接使用缓存，加快构建速度。 在编写Dockerfile时，可以根据指令的特性来安排指令的顺序，以使得常变化的指令在后面，不变的指令在前面，这样可以最大程度地利用Docker的缓存机制。 例如，将不经常修改的基础依赖安装放在前面的指令，并将频繁修改的应用程序代码放在后面的指令。</p><h3 id="多层镜像构建优化" tabindex="-1"><a class="header-anchor" href="#多层镜像构建优化" aria-hidden="true">#</a> 多层镜像构建优化</h3><p>多层镜像构建是指在一个Dockerfile中使用多个RUN指令来构建镜像。每个RUN指令会产生一个新的镜像层，而每个镜像层都会占用额外的存储空间。 为了优化多层镜像构建，可以使用&amp;&amp;操作符将多个命令合并成一个RUN指令，避免产生额外的镜像层。同时，在一个RUN指令中执行多个命令可以减少Docker镜像的大小。 例如，将多个apt-get安装命令合并成一个RUN指令：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y <span class="token operator">\\</span>\n    package1 <span class="token operator">\\</span>\n    package2 <span class="token operator">\\</span>\n    package3</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样可以将多个安装命令合并为一个镜像层，减少镜像大小。</p>', 28);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createTextVNode("在上面的例子中，我们使用HEALTHCHECK指令定义了一个健康检查机制。它会每隔5秒运行一次curl命令来检查"),
      createBaseVNode("a", _hoisted_105, [
        createTextVNode("http://localhost/"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("是否返回正常响应（状态码为200）。如果检查失败（返回状态码不为200），则容器会被标记为不健康状态。 健康检查是在容器内部进行的，通过执行容器中的检查命令来确定容器的健康状况。当容器的健康状态发生变化时，Docker会相应地更新容器的健康状态，并且在使用Docker API时，可以通过查询容器的健康状态来了解容器的健康状况。 使用HEALTHCHECK指令可以提高容器的可靠性和健壮性，特别是在使用编排工具如Docker Compose或Kubernetes时，可以根据容器的健康状态来进行自动的健康调整和容器替换操作。")
    ]),
    _hoisted_106
  ]);
}
const wanwendainizhangwodockerfile_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "wanwendainizhangwodockerfile.html.vue"]]);
export {
  wanwendainizhangwodockerfile_html as default
};
