(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{458:function(s,n,a){"use strict";a.r(n);var t=a(16),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"supervisor概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#supervisor概述"}},[s._v("#")]),s._v(" Supervisor概述")]),s._v(" "),a("p",[s._v("supervisor是一个 Client/Server模式的系统，允许用户在类unix操作系统上监视和控制多个进程，或者可以说是多个程序。supervisor与launchd，daemontools，runit等程序有着相同的功能，与其中某些程序不同的是，它并不作为“id 为 1的进程”而替代init。相反，它用于控制应用程序，像启动其它程序一样，通俗理解就是，把Supervisor服务管理的进程程序，它们作为supervisor的子进程来运行，而supervisor是父进程。supervisor来监控管理子进程的启动关闭和异常退出后的自动启动。\n")]),s._v(" "),a("h2",{attrs:{id:"supervisor组成部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#supervisor组成部分"}},[s._v("#")]),s._v(" "),a("strong",[s._v("Supervisor组成部分")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("supervisord")]),s._v(': 服务守护进程\nsupervisor服务器的进程名是supervisord。它主要负责在自己的调用中启动子程序，响应客户端的命令，重新启动崩溃或退出的进程，记录其子进程stdout和stderr的输出，以及生成和处理对应于子进程生命周期中的"event"服务器进程使用的配置文件，通常路径存放在/etc/supervisord.conf中。此配置文件是INI格式的配置文件。')]),s._v(" "),a("li",[a("strong",[s._v("supervisorctl")]),s._v("：命令行客户端\nsupervisor命令行的客户端名称是supervisorctl。它为supervisord提供了一个类似于shell的交互界面。使用supervisorctl，用户可以查看不同的supervisord进程列表，获取控制子进程的状态，如停止和启动子进程")]),s._v(" "),a("li",[a("strong",[s._v("Web Server")]),s._v("：提供与supervisorctl功能相当的WEB操作界面\n一个可以通过Web界面来查看和控制进程的状态，默认监听在9091上。")]),s._v(" "),a("li",[a("strong",[s._v("XML-RPC Interface")]),s._v("：XML-RPC接口\nsupervisor用于控制的XML-RPC接口")])]),s._v(" "),a("h2",{attrs:{id:"supervisor安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#supervisor安装"}},[s._v("#")]),s._v(" Supervisor安装")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /etc/redhat-release \nCentOS Linux release "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.5")]),s._v(".1804 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Core"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rpm")]),s._v(" -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过yum方式安装supervisor")]),s._v("\n$ yum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -y supervisor\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开机自启动")]),s._v("\n$ systemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" supervisord\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动")]),s._v("\n$ systemctl start supervisord\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"supervisor配置文件说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#supervisor配置文件说明"}},[s._v("#")]),s._v(" Supervisor配置文件说明")]),s._v(" "),a("div",{staticClass:"language-ini line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ini"}},[a("code",[a("span",{pre:!0,attrs:{class:"token header"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token section-name selector"}},[s._v("unix_http_server")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")])]),s._v("          \n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("/tmp/supervisor.sock   ; socket文件的路径，supervisorctl用XML_RPC和supervisord通信就是通过它进行")]),s._v("\n                              的。如果不设置的话，supervisorctl也就不能用了\n                              不设置的话，默认为none。 非必须设置      \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";chmod=0700                 ; 这个简单，就是修改上面的那个socket文件的权限为0700")]),s._v("\n                              不设置的话，默认为0700。 非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";chown=nobody:nogroup       ; 这个一样，修改上面的那个socket文件的属组为user.group")]),s._v("\n                              不设置的话，默认为启动supervisord进程的用户及属组。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";username=user              ; 使用supervisorctl连接的时候，认证的用户")]),s._v("\n                               不设置的话，默认为不需要用户。 非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";password=123               ; 和上面的用户名对应的密码，可以直接使用明码，也可以使用SHA加密")]),s._v("\n                              如：{SHA}82ab876d1387bfafe46cc1c8a2ef074eae50cb1d\n                              默认不设置。。。非必须设置\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";[inet_http_server]         ; 侦听在TCP上的socket，Web Server和远程的supervisorctl都要用到他")]),s._v("\n                              不设置的话，默认为不开启。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";port=127.0.0.1:9001        ; 这个是侦听的IP和端口，侦听所有IP用 :9001或*:9001。")]),s._v("\n                              这个必须设置，只要上面的[inet_http_server]开启了，就必须设置它\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";username=user              ; 这个和上面的uinx_http_server一个样。非必须设置")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";password=123               ; 这个也一个样。非必须设置")]),s._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token header"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token section-name selector"}},[s._v("supervisord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")])]),s._v("                ;这个主要是定义supervisord这个服务端进程的一些参数的\n                              这个必须设置，不设置，supervisor就不用干活了\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("logfile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("/tmp/supervisord.log ; 这个是supervisord这个主进程的日志路径，注意和子进程的日志不搭嘎。")]),s._v("\n                               默认路径$CWD/supervisord.log，$CWD是当前目录。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("logfile_maxbytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("50MB        ; 这个是上面那个日志文件的最大的大小，当超过50M的时候，会生成一个新的日")]),s._v("\n                               志文件。当设置为0时，表示不限制文件大小\n                               默认值是50M，非必须设置。            \n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("logfile_backups")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("10           ; 日志文件保持的数量，上面的日志文件大于50M时，就会生成一个新文件。文件")]),s._v("\n                               数量大于10时，最初的老文件被新文件覆盖，文件数量将保持为10\n                               当设置为0时，表示不限制文件的数量。\n                               默认情况下为10。。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("loglevel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("info                ; 日志级别，有critical, error, warn, info, debug, trace, or blather等")]),s._v("\n                               默认为info。。。非必须设置项\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("pidfile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("/tmp/supervisord.pid ; supervisord的pid文件路径。")]),s._v("\n                               默认为$CWD/supervisord.pid。。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("nodaemon")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("false               ; 如果是true，supervisord进程将在前台运行")]),s._v("\n                               默认为false，也就是后台以守护进程运行。。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("minfds")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("1024                  ; 这个是最少系统空闲的文件描述符，低于这个值supervisor将不会启动。")]),s._v("\n                               系统的文件描述符在这里设置cat /proc/sys/fs/file-max\n                               默认情况下为1024。。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("minprocs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("200                 ; 最小可用的进程描述符，低于这个值supervisor也将不会正常启动。")]),s._v("\n                              ulimit  -u这个命令，可以查看linux下面用户的最大进程数\n                              默认为200。。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";umask=022                   ; 进程创建文件的掩码")]),s._v("\n                               默认为022。。非必须设置项\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";user=chrism                 ; 这个参数可以设置一个非root用户，当我们以root用户启动supervisord之后。")]),s._v("\n                               我这里面设置的这个用户，也可以对supervisord进行管理\n                               默认情况是不设置。。。非必须设置项\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";identifier=supervisor       ; 这个参数是supervisord的标识符，主要是给XML_RPC用的。当你有多个")]),s._v("\n                               supervisor的时候，而且想调用XML_RPC统一管理，就需要为每个\n                               supervisor设置不同的标识符了\n                               默认是supervisord。。。非必需设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";directory=/tmp              ; 这个参数是当supervisord作为守护进程运行的时候，设置这个参数的话，启动")]),s._v("\n                               supervisord进程之前，会先切换到这个目录\n                               默认不设置。。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";nocleanup=true              ; 这个参数当为false的时候，会在supervisord进程启动的时候，把以前子进程")]),s._v("\n                               产生的日志文件(路径为AUTO的情况下)清除掉。有时候咱们想要看历史日志，当\n                               然不想日志被清除了。所以可以设置为true\n                               默认是false，有调试需求的同学可以设置为true。。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";childlogdir=/tmp            ; 当子进程日志路径为AUTO的时候，子进程日志文件的存放路径。")]),s._v('\n                               默认路径是这个东西，执行下面的这个命令看看就OK了，处理的东西就默认路径\n                               python -c "import tempfile;print tempfile.gettempdir()"\n                               非必须设置\n'),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(';environment=KEY="value"     ; 这个是用来设置环境变量的，supervisord在linux中启动默认继承了linux的')]),s._v("\n                               环境变量，在这里可以设置supervisord进程特有的其他环境变量。\n                               supervisord启动子进程时，子进程会拷贝父进程的内存空间内容。 所以设置的\n                               这些环境变量也会被子进程继承。\n                               "),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("小例子：environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v('name="haha",age="hehe"')]),s._v("\n                               默认为不设置。。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";strip_ansi=false            ; 这个选项如果设置为true，会清除子进程日志中的所有ANSI 序列。什么是ANSI")]),s._v("\n                               序列呢？就是我们的\\n,\\t这些东西。\n                               默认为false。。。非必须设置\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; the below section must remain in the config file for RPC")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; (supervisorctl/web interface) to work, additional interfaces may be")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; added by defining them in separate rpcinterface: sections")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token header"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token section-name selector"}},[s._v("rpcinterface:supervisor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")])]),s._v("    ;这个选项是给XML_RPC用的，当然你如果想使用supervisord或者web server 这\n                              个选项必须要开启的\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("supervisor.rpcinterface_factory")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("supervisor.rpcinterface:make_main_rpcinterface")]),s._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token header"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token section-name selector"}},[s._v("supervisorctl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")])]),s._v("              ;这个主要是针对supervisorctl的一些配置\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("serverurl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("unix:///tmp/supervisor.sock ; 这个是supervisorctl本地连接supervisord的时候，本地UNIX socket")]),s._v("\n                                        路径，注意这个是和前面的[unix_http_server]对应的\n                                        默认值就是unix:///tmp/supervisor.sock。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";serverurl=http://127.0.0.1:9001 ; 这个是supervisorctl远程连接supervisord的时候，用到的TCP socket路径")]),s._v("\n                                   注意这个和前面的[inet_http_server]对应\n                                   默认就是http://127.0.0.1:9001。。。非必须项\n                                 \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";username=chris              ; 用户名")]),s._v("\n                               默认空。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";password=123                ; 密码")]),s._v("\n                              默认空。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";prompt=mysupervisor         ; 输入用户名密码时候的提示符")]),s._v("\n                               默认supervisor。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";history_file=~/.sc_history  ; 这个参数和shell中的history类似，我们可以用上下键来查找前面执行过的命令")]),s._v("\n                               默认是no file的。。所以我们想要有这种功能，必须指定一个文件。。。非\n                               必须设置\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; The below sample program section shows all possible program subsection values,")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; create one or more 'real' program: sections to be able to control them under")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; supervisor.")]),s._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(';[program:theprogramname]      ;这个就是咱们要管理的子进程了，":"后面的是名字，最好别乱写和实际进程')]),s._v("\n                                有点关联最好。这样的program我们可以设置一个或多个，一个program就是\n                                要被管理的一个进程\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";command=/bin/cat              ; 这个就是我们的要启动进程的命令路径了，可以带参数")]),s._v("\n                                例子：/home/test.py -a 'hehe'\n                                有一点需要注意的是，我们的command只能是那种在终端运行的进程，不能是\n                                "),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("守护进程。这个想想也知道了，比如说command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("service httpd start。")]),s._v("\n                                httpd这个进程被linux的service管理了，我们的supervisor再去启动这个命令\n                                这已经不是严格意义的子进程了。\n                                这个是个必须设置的项\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";process_name=%(program_name)s ; 这个是进程名，如果我们下面的numprocs参数为1的话，就不用管这个参数")]),s._v("\n                                 了，它默认值%(program_name)s也就是上面的那个program冒号后面的名字，\n                                 但是如果numprocs为多个的话，那就不能这么干了。想想也知道，不可能每个\n                                 进程都用同一个进程名吧。\n  \n                                  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";numprocs=1                    ; 启动进程的数目。当不为1时，就是进程池的概念，注意process_name的设置")]),s._v("\n                                 默认为1    。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";directory=/tmp                ; 进程运行前，会前切换到这个目录")]),s._v("\n                                 默认不设置。。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";umask=022                     ; 进程掩码，默认none，非必须")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";priority=999                  ; 子进程启动关闭优先级，优先级低的，最先启动，关闭的时候最后关闭")]),s._v("\n                                 默认值为999 。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";autostart=true                ; 如果是true的话，子进程将在supervisord启动后被自动启动")]),s._v("\n                                 默认就是true   。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";autorestart=unexpected        ; 这个是设置子进程挂掉后自动重启的情况，有三个选项，false,unexpected")]),s._v("\n                                 和true。如果为false的时候，无论什么情况下，都不会被重新启动，\n                                 如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的退\n                                 出码的时候，才会被自动重启。当为true的时候，只要子进程挂掉，将会被无\n                                 条件的重启\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";startsecs=1                   ; 这个选项是子进程启动多少秒之后，此时状态如果是running，则我们认为启")]),s._v("\n                                 动成功了\n                                 默认值为1 。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";startretries=3                ; 当进程启动失败后，最大尝试启动的次数。。当超过3次后，supervisor将把")]),s._v("\n                                 此进程的状态置为FAIL\n                                 默认值为3 。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";exitcodes=0,2                 ; 注意和上面的的autorestart=unexpected对应。。exitcodes里面的定义的")]),s._v("\n                                 退出码是expected的。\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stopsignal=QUIT               ; 进程停止信号，可以为TERM, HUP, INT, QUIT, KILL, USR1, or USR2等信号")]),s._v("\n                                  默认为TERM 。。当用设定的信号去干掉进程，退出码会被认为是expected\n                                  非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stopwaitsecs=10               ; 这个是当我们向子进程发送stopsignal信号后，到系统返回信息")]),s._v("\n                                 给supervisord，所等待的最大时间。 超过这个时间，supervisord会向该\n                                 子进程发送一个强制kill的信号。\n                                 默认为10秒。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stopasgroup=false             ; 这个东西主要用于，supervisord管理的子进程，这个子进程本身还有")]),s._v("\n                                 子进程。那么我们如果仅仅干掉supervisord的子进程的话，子进程的子进程\n                                 有可能会变成孤儿进程。所以咱们可以设置可个选项，把整个该子进程的\n                                 整个进程组都干掉。 设置为true的话，一般killasgroup也会被设置为true。\n                                 需要注意的是，该选项发送的是stop信号\n                                 默认为false。。非必须设置。。\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";killasgroup=false             ; 这个和上面的stopasgroup类似，不过发送的是kill信号")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";user=chrism                   ; 如果supervisord是root启动，我们在这里设置这个非root用户，可以用来")]),s._v("\n                                 管理该program\n                                 默认不设置。。。非必须设置项\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";redirect_stderr=true          ; 如果为true，则stderr的日志会被写入stdout日志文件中")]),s._v("\n                                 默认为false，非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stdout_logfile=/a/path        ; 子进程的stdout的日志路径，可以指定路径，AUTO，none等三个选项。")]),s._v("\n                                 设置为none的话，将没有日志产生。设置为AUTO的话，将随机找一个地方\n                                 生成日志文件，而且当supervisord重新启动的时候，以前的日志文件会被\n                                 "),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("清空。当 redirect_stderr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("true的时候，sterr也会写进这个日志文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stdout_logfile_maxbytes=1MB   ; 日志文件最大大小，和[supervisord]中定义的一样。默认为50")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stdout_logfile_backups=10     ; 和[supervisord]定义的一样。默认10")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stdout_capture_maxbytes=1MB   ; 这个东西是设定capture管道的大小，当值不为0的时候，子进程可以从stdout")]),s._v("\n                                 发送信息，而supervisor可以根据信息，发送相应的event。\n                                 默认为0，为0的时候表达关闭管道。。。非必须项\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stdout_events_enabled=false   ; 当设置为ture的时候，当子进程由stdout向文件描述符中写日志的时候，将")]),s._v("\n                                 触发supervisord发送PROCESS_LOG_STDOUT类型的event\n                                 默认为false。。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stderr_logfile=/a/path        ; 这个东西是设置stderr写的日志路径，当redirect_stderr=true。这个就不用")]),s._v("\n                                 设置了，设置了也是白搭。因为它会被写入stdout_logfile的同一个文件中\n                                 默认为AUTO，也就是随便找个地存，supervisord重启被清空。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stderr_logfile_maxbytes=1MB   ; 这个出现好几次了，就不重复了")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stderr_logfile_backups=10     ; 这个也是")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stderr_capture_maxbytes=1MB   ; 这个一样，和stdout_capture一样。 默认为0，关闭状态")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stderr_events_enabled=false   ; 这个也是一样，默认为false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(';environment=A="1",B="2"       ; 这个是该子进程的环境变量，和别的子进程是不共享的')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";serverurl=AUTO                ;")]),s._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; The below sample eventlistener section shows all possible")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; eventlistener subsection values, create one or more 'real'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; eventlistener: sections to be able to handle event notifications")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; sent by supervisor.")]),s._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";[eventlistener:theeventlistenername] ;这个东西其实和program的地位是一样的，也是suopervisor启动的子进")]),s._v("\n                                       程，不过它干的活是订阅supervisord发送的event。他的名字就叫\n                                       listener了。我们可以在listener里面做一系列处理，比如报警等等\n                                       楼主这两天干的活，就是弄的这玩意\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";command=/bin/eventlistener    ; 这个和上面的program一样，表示listener的可执行文件的路径")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";process_name=%(program_name)s ; 这个也一样，进程名，当下面的numprocs为多个的时候，才需要。否则默认就")]),s._v("\n                                 OK了\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";numprocs=1                    ; 相同的listener启动的个数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";events=EVENT                  ; event事件的类型，也就是说，只有写在这个地方的事件类型。才会被发送")]),s._v("\n                        \n                                   \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";buffer_size=10                ; 这个是event队列缓存大小，单位不太清楚，楼主猜测应该是个吧。当buffer")]),s._v("\n                                 超过10的时候，最旧的event将会被清除，并把新的event放进去。\n                                 默认值为10。。非必须选项\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";directory=/tmp                ; 进程执行前，会切换到这个目录下执行")]),s._v("\n                                 默认为不切换。。。非必须\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";umask=022                     ; 淹没，默认为none，不说了")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";priority=-1                   ; 启动优先级，默认-1，也不扯了")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";autostart=true                ; 是否随supervisord启动一起启动，默认true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";autorestart=unexpected        ; 是否自动重启，和program一个样，分true,false,unexpected等，注意")]),s._v("\n                                  unexpected和exitcodes的关系\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";startsecs=1                   ; 也是一样，进程启动后跑了几秒钟，才被认定为成功启动，默认1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";startretries=3                ; 失败最大尝试次数，默认3")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";exitcodes=0,2                 ; 期望或者说预料中的进程退出码，")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stopsignal=QUIT               ; 干掉进程的信号，默认为TERM，比如设置为QUIT，那么如果QUIT来干这个进程")]),s._v("\n                                 那么会被认为是正常维护，退出码也被认为是expected中的\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stopasgroup=false             ; send stop signal to the UNIX process group (default false)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";killasgroup=false             ; SIGKILL the UNIX process group (def false)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";user=chrism                   ;设置普通用户，可以用来管理该listener进程。")]),s._v("\n                                默认为空。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";redirect_stderr=true          ; 为true的话，stderr的log会并入stdout的log里面")]),s._v("\n                                默认为false。。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stdout_logfile=/a/path        ; 这个不说了，好几遍了")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stdout_logfile_maxbytes=1MB   ; 这个也是")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stdout_logfile_backups=10     ; 这个也是")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stdout_events_enabled=false   ; 这个其实是错的，listener是不能发送event")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stderr_logfile=/a/path        ; 这个也是")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stderr_logfile_maxbytes=1MB   ; 这个也是")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stderr_logfile_backups        ; 这个不说了")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";stderr_events_enabled=false   ; 这个也是错的，listener不能发送event")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(';environment=A="1",B="2"       ; 这个是该子进程的环境变量')]),s._v("\n                                 默认为空。。。非必须设置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";serverurl=AUTO                ; override serverurl computation (childutils)")]),s._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; The below sample group section shows all possible group values,")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; create one or more 'real' group: sections to create \"heterogeneous\"")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; process groups.")]),s._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";[group:thegroupname]    ;这个东西就是给programs分组，划分到组里面的program。我们就不用一个一个去操作了")]),s._v("\n                         我们可以对组名进行统一的操作。 注意：program被划分到组里面之后，就相当于原来\n                         的配置从supervisor的配置文件里消失了。。。supervisor只会对组进行管理，而不再\n                         会对组里面的单个program进行管理了\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";programs=progname1,progname2  ; 组成员，用逗号分开")]),s._v("\n                                 这个是个必须的设置项\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";priority=999                  ; 优先级，相对于组和组之间说的")]),s._v("\n                                 默认999。。非必须选项\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('; The [include] section can just contain the "files" setting.  This')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; setting can list multiple files (separated by whitespace or")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; newlines).  It can also contain wildcards.  The filenames are")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; interpreted as relative to this file.  Included files *cannot*")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; include files themselves.")]),s._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";[include]                         ;这个东西挺有用的，当我们要管理的进程很多的时候，写在一个文件里面")]),s._v("\n                                    就有点大了。我们可以把配置信息写到多个文件中，然后include过来\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";files = relative/directory/*.ini")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br"),a("span",{staticClass:"line-number"},[s._v("122")]),a("br"),a("span",{staticClass:"line-number"},[s._v("123")]),a("br"),a("span",{staticClass:"line-number"},[s._v("124")]),a("br"),a("span",{staticClass:"line-number"},[s._v("125")]),a("br"),a("span",{staticClass:"line-number"},[s._v("126")]),a("br"),a("span",{staticClass:"line-number"},[s._v("127")]),a("br"),a("span",{staticClass:"line-number"},[s._v("128")]),a("br"),a("span",{staticClass:"line-number"},[s._v("129")]),a("br"),a("span",{staticClass:"line-number"},[s._v("130")]),a("br"),a("span",{staticClass:"line-number"},[s._v("131")]),a("br"),a("span",{staticClass:"line-number"},[s._v("132")]),a("br"),a("span",{staticClass:"line-number"},[s._v("133")]),a("br"),a("span",{staticClass:"line-number"},[s._v("134")]),a("br"),a("span",{staticClass:"line-number"},[s._v("135")]),a("br"),a("span",{staticClass:"line-number"},[s._v("136")]),a("br"),a("span",{staticClass:"line-number"},[s._v("137")]),a("br"),a("span",{staticClass:"line-number"},[s._v("138")]),a("br"),a("span",{staticClass:"line-number"},[s._v("139")]),a("br"),a("span",{staticClass:"line-number"},[s._v("140")]),a("br"),a("span",{staticClass:"line-number"},[s._v("141")]),a("br"),a("span",{staticClass:"line-number"},[s._v("142")]),a("br"),a("span",{staticClass:"line-number"},[s._v("143")]),a("br"),a("span",{staticClass:"line-number"},[s._v("144")]),a("br"),a("span",{staticClass:"line-number"},[s._v("145")]),a("br"),a("span",{staticClass:"line-number"},[s._v("146")]),a("br"),a("span",{staticClass:"line-number"},[s._v("147")]),a("br"),a("span",{staticClass:"line-number"},[s._v("148")]),a("br"),a("span",{staticClass:"line-number"},[s._v("149")]),a("br"),a("span",{staticClass:"line-number"},[s._v("150")]),a("br"),a("span",{staticClass:"line-number"},[s._v("151")]),a("br"),a("span",{staticClass:"line-number"},[s._v("152")]),a("br"),a("span",{staticClass:"line-number"},[s._v("153")]),a("br"),a("span",{staticClass:"line-number"},[s._v("154")]),a("br"),a("span",{staticClass:"line-number"},[s._v("155")]),a("br"),a("span",{staticClass:"line-number"},[s._v("156")]),a("br"),a("span",{staticClass:"line-number"},[s._v("157")]),a("br"),a("span",{staticClass:"line-number"},[s._v("158")]),a("br"),a("span",{staticClass:"line-number"},[s._v("159")]),a("br"),a("span",{staticClass:"line-number"},[s._v("160")]),a("br"),a("span",{staticClass:"line-number"},[s._v("161")]),a("br"),a("span",{staticClass:"line-number"},[s._v("162")]),a("br"),a("span",{staticClass:"line-number"},[s._v("163")]),a("br"),a("span",{staticClass:"line-number"},[s._v("164")]),a("br"),a("span",{staticClass:"line-number"},[s._v("165")]),a("br"),a("span",{staticClass:"line-number"},[s._v("166")]),a("br"),a("span",{staticClass:"line-number"},[s._v("167")]),a("br"),a("span",{staticClass:"line-number"},[s._v("168")]),a("br"),a("span",{staticClass:"line-number"},[s._v("169")]),a("br"),a("span",{staticClass:"line-number"},[s._v("170")]),a("br"),a("span",{staticClass:"line-number"},[s._v("171")]),a("br"),a("span",{staticClass:"line-number"},[s._v("172")]),a("br"),a("span",{staticClass:"line-number"},[s._v("173")]),a("br"),a("span",{staticClass:"line-number"},[s._v("174")]),a("br"),a("span",{staticClass:"line-number"},[s._v("175")]),a("br"),a("span",{staticClass:"line-number"},[s._v("176")]),a("br"),a("span",{staticClass:"line-number"},[s._v("177")]),a("br"),a("span",{staticClass:"line-number"},[s._v("178")]),a("br"),a("span",{staticClass:"line-number"},[s._v("179")]),a("br"),a("span",{staticClass:"line-number"},[s._v("180")]),a("br"),a("span",{staticClass:"line-number"},[s._v("181")]),a("br"),a("span",{staticClass:"line-number"},[s._v("182")]),a("br"),a("span",{staticClass:"line-number"},[s._v("183")]),a("br"),a("span",{staticClass:"line-number"},[s._v("184")]),a("br"),a("span",{staticClass:"line-number"},[s._v("185")]),a("br"),a("span",{staticClass:"line-number"},[s._v("186")]),a("br"),a("span",{staticClass:"line-number"},[s._v("187")]),a("br"),a("span",{staticClass:"line-number"},[s._v("188")]),a("br"),a("span",{staticClass:"line-number"},[s._v("189")]),a("br"),a("span",{staticClass:"line-number"},[s._v("190")]),a("br"),a("span",{staticClass:"line-number"},[s._v("191")]),a("br"),a("span",{staticClass:"line-number"},[s._v("192")]),a("br"),a("span",{staticClass:"line-number"},[s._v("193")]),a("br"),a("span",{staticClass:"line-number"},[s._v("194")]),a("br"),a("span",{staticClass:"line-number"},[s._v("195")]),a("br"),a("span",{staticClass:"line-number"},[s._v("196")]),a("br"),a("span",{staticClass:"line-number"},[s._v("197")]),a("br"),a("span",{staticClass:"line-number"},[s._v("198")]),a("br"),a("span",{staticClass:"line-number"},[s._v("199")]),a("br"),a("span",{staticClass:"line-number"},[s._v("200")]),a("br"),a("span",{staticClass:"line-number"},[s._v("201")]),a("br"),a("span",{staticClass:"line-number"},[s._v("202")]),a("br"),a("span",{staticClass:"line-number"},[s._v("203")]),a("br"),a("span",{staticClass:"line-number"},[s._v("204")]),a("br"),a("span",{staticClass:"line-number"},[s._v("205")]),a("br"),a("span",{staticClass:"line-number"},[s._v("206")]),a("br"),a("span",{staticClass:"line-number"},[s._v("207")]),a("br"),a("span",{staticClass:"line-number"},[s._v("208")]),a("br"),a("span",{staticClass:"line-number"},[s._v("209")]),a("br"),a("span",{staticClass:"line-number"},[s._v("210")]),a("br"),a("span",{staticClass:"line-number"},[s._v("211")]),a("br"),a("span",{staticClass:"line-number"},[s._v("212")]),a("br"),a("span",{staticClass:"line-number"},[s._v("213")]),a("br"),a("span",{staticClass:"line-number"},[s._v("214")]),a("br"),a("span",{staticClass:"line-number"},[s._v("215")]),a("br"),a("span",{staticClass:"line-number"},[s._v("216")]),a("br"),a("span",{staticClass:"line-number"},[s._v("217")]),a("br"),a("span",{staticClass:"line-number"},[s._v("218")]),a("br"),a("span",{staticClass:"line-number"},[s._v("219")]),a("br"),a("span",{staticClass:"line-number"},[s._v("220")]),a("br"),a("span",{staticClass:"line-number"},[s._v("221")]),a("br"),a("span",{staticClass:"line-number"},[s._v("222")]),a("br"),a("span",{staticClass:"line-number"},[s._v("223")]),a("br"),a("span",{staticClass:"line-number"},[s._v("224")]),a("br"),a("span",{staticClass:"line-number"},[s._v("225")]),a("br"),a("span",{staticClass:"line-number"},[s._v("226")]),a("br"),a("span",{staticClass:"line-number"},[s._v("227")]),a("br"),a("span",{staticClass:"line-number"},[s._v("228")]),a("br"),a("span",{staticClass:"line-number"},[s._v("229")]),a("br"),a("span",{staticClass:"line-number"},[s._v("230")]),a("br"),a("span",{staticClass:"line-number"},[s._v("231")]),a("br"),a("span",{staticClass:"line-number"},[s._v("232")]),a("br"),a("span",{staticClass:"line-number"},[s._v("233")]),a("br"),a("span",{staticClass:"line-number"},[s._v("234")]),a("br"),a("span",{staticClass:"line-number"},[s._v("235")]),a("br"),a("span",{staticClass:"line-number"},[s._v("236")]),a("br"),a("span",{staticClass:"line-number"},[s._v("237")]),a("br"),a("span",{staticClass:"line-number"},[s._v("238")]),a("br"),a("span",{staticClass:"line-number"},[s._v("239")]),a("br"),a("span",{staticClass:"line-number"},[s._v("240")]),a("br"),a("span",{staticClass:"line-number"},[s._v("241")]),a("br"),a("span",{staticClass:"line-number"},[s._v("242")]),a("br"),a("span",{staticClass:"line-number"},[s._v("243")]),a("br"),a("span",{staticClass:"line-number"},[s._v("244")]),a("br"),a("span",{staticClass:"line-number"},[s._v("245")]),a("br"),a("span",{staticClass:"line-number"},[s._v("246")]),a("br"),a("span",{staticClass:"line-number"},[s._v("247")]),a("br"),a("span",{staticClass:"line-number"},[s._v("248")]),a("br"),a("span",{staticClass:"line-number"},[s._v("249")]),a("br"),a("span",{staticClass:"line-number"},[s._v("250")]),a("br"),a("span",{staticClass:"line-number"},[s._v("251")]),a("br"),a("span",{staticClass:"line-number"},[s._v("252")]),a("br"),a("span",{staticClass:"line-number"},[s._v("253")]),a("br"),a("span",{staticClass:"line-number"},[s._v("254")]),a("br")])]),a("h2",{attrs:{id:"supervisor示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#supervisor示例"}},[s._v("#")]),s._v(" supervisor示例")]),s._v(" "),a("p",[s._v("示例：基于supervisor管理elasticsearch")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /etc/supervisord.d/service.ini ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("program:elasticsearch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("command")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/application/elasticsearch/bin/elasticsearch\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("程序启动命令\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("user")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("elastic\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" 用哪个用户启动进程，默认是root\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("loglevel")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("info  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("日志的级别\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("redirect_stderr")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" 把stderr重定向到stdout，默认false\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("stdout_logfile_maxbytes")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("50MB  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" stdout 日志文件大小，默认50MB\nstdout_logfile_backups "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("   \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" stdout 日志文件备份数，默认是10\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("stdout_logfile")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/var/log/supervisord/service.log\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("stderr_logfile")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/var/log/supervisord/service.log\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("startsecs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("      \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("startretries")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" 启动失败自动重试次数，默认是3\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("redirect_stderr")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true \n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("stopasgroup")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("false     \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("killasgroup")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("false     \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("默认为false，向进程组发送kill信号，包括子进程\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 加载配置")]),s._v("\n$ supervisorctl reread  \n$ supervisorctl update\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动elasticsearch")]),s._v("\n$ supervisorctl start elasticsearch\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看启动状态")]),s._v("\n$ supervisorctl status elasticsearch\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("p",[a("strong",[s._v("常见的命令如下：")])]),s._v(" "),a("ul",[a("li",[s._v("supervisord    初始启动Supervisord，启动、管理配置中设置的进程")]),s._v(" "),a("li",[s._v("supervisorctl stop programxxx    停止某一个进程(programxxx)，programxxx为")]),s._v(" "),a("li",[s._v("[program:chatdemon]里配置的值，这个示例就是chatdemon")]),s._v(" "),a("li",[s._v("supervisorctl start programxxx    启动某个进程")]),s._v(" "),a("li",[s._v("supervisorctl restart programxxx   重启某个进程")]),s._v(" "),a("li",[s._v("supervisorctl stop groupworker    重启所有属于名为groupworker这个分组的进程(start,restart同理)")]),s._v(" "),a("li",[s._v("supervisorctl stop all   停止全部进程，注：start、restart、stop都不会载入最新的配置文件")]),s._v(" "),a("li",[s._v("supervisorctl reload   载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程")]),s._v(" "),a("li",[s._v("supervisorctl update   根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。注意：显示用stop停止掉的进程，用reload或者update都不会自动重启  supervisorctl tail")]),s._v(" "),a("li",[s._v("programname    //查看programname的日志")]),s._v(" "),a("li",[s._v("supervisorctl tail redis    //查看日志")])]),s._v(" "),a("h2",{attrs:{id:"supervisor监控管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#supervisor监控管理"}},[s._v("#")]),s._v(" supervisor监控管理")]),s._v(" "),a("p",[s._v("为了更方便的远程管理 Supervisor ，可以开启其自带的 web 控制台。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 修改配置文件去掉注释启用")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" at /etc/supervisord.conf\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("inet_http_server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" inet "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("TCP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" server disabled by default\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:9001        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ip_address:port specifier, *:port "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" all iface"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("username")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("user              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("default is no username "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("open server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("password")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("default is no password "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("open server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重启supervisord服务")]),s._v("\n$ systemctl restart supervisord\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("通过浏览器直接访问即可")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://kubesre.com/img/supervisor.jpg",alt:"img"}})])])}),[],!1,null,null,null);n.default=e.exports}}]);