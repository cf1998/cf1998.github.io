import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, b as createBaseVNode, d as createTextVNode, e as createVNode, a as createStaticVNode } from "./app-45f9d385.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="简介与总结" tabindex="-1"><a class="header-anchor" href="#简介与总结" aria-hidden="true">#</a> 简介与总结</h2><p>前两篇关于HPA的文章，我们了解到HPA的实现原理，通过对服务CPU的metrics的监控实现了Deployment的弹性伸缩，我们本篇文章来实现基于事件驱动的HPA，基于事件可以让HPA更“理解”业务，实现更加基于业务的弹性伸缩。接下来就让我们一探究竟吧~</p><h2 id="keda是什么" tabindex="-1"><a class="header-anchor" href="#keda是什么" aria-hidden="true">#</a> KEDA是什么？</h2><p>KEDA（Kubernetes Event-driven Autoscaling）是云原生计算基金会孵化项目，是一个Kubernetes基于事件驱动的自动缩放器。借助 KEDA，可以根据需要处理的事件数量来驱动 Kubernetes 中任何容器的扩展。 KEDA是一个单一用途的轻量级组件，可以部署到任何 Kubernetes 集群中。KEDA 与标准 Kubernetes 组件（例如Horizontal Pod Autoscaler）一起可以扩展K8S功能。借助 KEDA，您可以明确映射要使用事件驱动规模的应用程序，而其他应用程序继续运行。这让 KEDA 成为一个灵活且安全的选项，可以与任意数量的任何其他 Kubernetes 应用程序或框架一起运行。 下图展示了 KEDA 如何与 Kubernetes Horizontal Pod Autoscaler、外部事件源和 Kubernetes 的etcd结合使用数据存储：</p><p><img src="https://img.kubesre.com/kubesre/20230830/keda-arch.png" alt=""> 概述: KEDA 使用三个组件来完成其任务：</p><ul><li>Scaler：连接到外部服务（例如，MYsql）并获取指标（例如，表的数据量）</li><li>Operator（代理）：负责“激活”一个 Deployment/Stafulset 并创建一个 Horizontal Pod Autoscaler 对象</li><li>Metrics Adapter：将来自外部源的指标呈现给 Horizontal Pod Autoscaler KEDA Operator 由一个控制器组成，该控制器实现“协调循环”，并充当激活和停用部署以从零扩展或从零扩展的代理。这是由安装 KEDA 时运行的 KEDA-operator 容器实现的。ScaledObject它通过创建(HPA)对资源的创建做出“反应”并创建Horizontal Pod Autoscaler。</li></ul><p>看到这里就大致了解到了KEDA的主要工作是通过获取各个服务具体的“指标”暴露给HPA以实现弹性扩展。</p><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2><h3 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h3><p>上面了解到了KEDA的架构，我们接下来通过安装Mysql和KEDA，然后创建一个自定义资源 ScaledObject实现对Mysql&quot;事件&quot;的监控，并将指标暴露给HPA，以实现弹性伸缩，接下来就动手试试吧~</p><h3 id="安装keda" tabindex="-1"><a class="header-anchor" href="#安装keda" aria-hidden="true">#</a> 安装KEDA</h3>', 11);
const _hoisted_12 = {
  href: "https://keda.sh",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_13 = /* @__PURE__ */ createStaticVNode('<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#Including admission webhooks\n#kubectl apply --server-side -f https://github.com/kedacore/keda/releases/download/v2.9.3/keda-2.9.3.yaml\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看keda 状态</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># kubectl get po -n keda\nNAME                                               READY   STATUS    RESTARTS   AGE\nkeda-admission-webhooks-5f7cdd4745-7zhxn           1/1     Running   0          4d9h\nkeda-metrics-apiserver-5c55d5d55f-gwv29            1/1     Running   0          4d9h\nkeda-operator-c8d6bd9bb-ct978                      1/1     Running   0          4d9h\nkeda-operator-metrics-apiserver-769bb99569-knh7g   1/1     Running   0          4d9h\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装mysql" tabindex="-1"><a class="header-anchor" href="#安装mysql" aria-hidden="true">#</a> 安装Mysql</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># helm repo add bitnami https://charts.bitnami.com/bitnami\n#helm pull bitnami/mysql\n#tar -xf mysql-9.3.3.tgz\n\n#vim mysql/value.yaml\nglobal:\n  imageRegistry: &quot;&quot;\n  ## E.g.\n  ## imagePullSecrets:\n  ##   - myRegistryKeySecretName\n  ##\n  imagePullSecrets: []\n  storageClass: &quot;nfs-storage&quot;  ##配置自己的存储配置，其余可暂不配置\n\n# 开始安装mysql\n#helm install mysql ./mysql -n mysql --create-namespace\n\n# kubectl get po -n mysql\nNAME           READY   STATUS    RESTARTS        AGE\nmysql-0        1/1     Running   1 (5h29m ago)   5h31m\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建scaledobject" tabindex="-1"><a class="header-anchor" href="#创建scaledobject" aria-hidden="true">#</a> 创建ScaledObject</h3>', 6);
const _hoisted_19 = {
  href: "https://keda.sh/docs/2.11/scalers/mysql/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_20 = /* @__PURE__ */ createStaticVNode('<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># cat mysql-example.yaml \napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secrets\n  namespace: mysql\ntype: Opaque\ndata:\n  mysql_conn_str: cm9vdDptcXZkRmFtUWlXQHRjcChteXNxbC5teXNxbC5zdmMuY2x1c3Rlci5sb2NhbDozMzA2KS90ZXN0X2Ri # mysql的connectionString格式 user:password@tcp(mysql:3306)/stats_db base64编码值\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-mysql-secret\n  namespace: mysql\nspec:\n  secretTargetRef:\n  - parameter: connectionString\n    name: mysql-secrets\n    key: mysql_conn_str\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: mysql-scaledobject\n  namespace: mysql\nspec:\n  scaleTargetRef:\n    kind: statefulset   #扩容的控制器的类型，默认是deployment\n    name: mysql\n  triggers:\n  - type: mysql\n    metadata:\n      queryValue: &quot;4&quot;   #在 HPA 中用作targetValue或targetAverageValue（取决于触发指标类型）的阈值。（这个值可以是浮点数）\n      query: &quot;SELECT COUNT(*) FROM test;&quot;   #应返回单个数值的 MySQL 查询，此为本次测试的enent\n    authenticationRef:\n      name: keda-trigger-auth-mysql-secret\n\n#创建ScaledObject\n#kubectl apply -f mysql-example.yaml\n\n#查看ScaledObject\n# kubectl get scaledobject -n mysql\nNAME                 SCALETARGETKIND       SCALETARGETNAME   MIN   MAX   TRIGGERS   AUTHENTICATION                   READY   ACTIVE   FALLBACK   AGE\nmysql-scaledobject   apps/v1.statefulset   mysql                         mysql      keda-trigger-auth-mysql-secret   True    True     False      4h54m\n\n#同时也会创建HPA\n# kubectl get hpa -n mysql\nNAME                          REFERENCE           TARGETS     MINPODS   MAXPODS   REPLICAS   AGE\nkeda-hpa-mysql-scaledobject   statefulset/mysql   3/4 (avg)   1         100       1          4h54m\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h3><p>上面的配置中我们以test表中的行数作为&quot;事件&quot;，并且阈值为4</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#select * from test;\n+----+------------+-----------+------------+-------------------+------+----------+\n| id | created_at | update_at | panel_name | link              | icon | tag_name |\n+----+------------+-----------+------------+-------------------+------+----------+\n|  6 | NULL       | NULL      | kubesre    | www.kubesre.com/  | ECS  |          |\n|  7 | NULL       | NULL      | kubesre    | www.kubesre.com/  | ECS  |          |\n|  8 | NULL       | NULL      | kubesre    | www.kubesre.com/  | ECS  |          |\n+----+------------+-----------+------------+-------------------+------+----------+\n\n#添加数据\nmysql&gt; INSERT INTO `test` VALUES (1, NULL, NULL, &#39;kubesre&#39;, &#39;www.kubesre.com/&#39;, &#39;ECS&#39;, &#39;&#39;);\nQuery OK, 1 row affected (0.01 sec)\n\nmysql&gt; INSERT INTO `test` VALUES (2, NULL, NULL, &#39;kubesre&#39;, &#39;www.kubesre.com/&#39;, &#39;ECS&#39;, &#39;&#39;);\nQuery OK, 1 row affected (0.01 sec)\n\nmysql&gt; INSERT INTO `test` VALUES (3, NULL, NULL, &#39;kubesre&#39;, &#39;www.kubesre.com/&#39;, &#39;ECS&#39;, &#39;&#39;);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; INSERT INTO `test` VALUES (4, NULL, NULL, &#39;kubesre&#39;, &#39;www.kubesre.com/&#39;, &#39;ECS&#39;, &#39;&#39;);\nQuery OK, 1 row affected (0.01 sec)\n\nmysql&gt; INSERT INTO `test` VALUES (5, NULL, NULL, &#39;kubesre&#39;, &#39;www.kubesre.com/&#39;, &#39;ECS&#39;, &#39;Pod&#39;);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select * from test;\n+----+------------+-----------+------------+-------------------+------+----------+\n| id | created_at | update_at | panel_name | link              | icon | tag_name |\n+----+------------+-----------+------------+-------------------+------+----------+\n|  1 | NULL       | NULL      | kubesre    | www.kubesre.com/  | ECS  |          |\n|  2 | NULL       | NULL      | kubesre    | www.kubesre.com/  | ECS  |          |\n|  3 | NULL       | NULL      | kubesre    | www.kubesre.com/  | ECS  |          |\n|  4 | NULL       | NULL      | kubesre    | www.kubesre.com/  | ECS  |          |\n|  5 | NULL       | NULL      | kubesre    | www.kubesre.com/  | ECS  | Pod      |\n|  6 | NULL       | NULL      | kubesre    | www.kubesre.com/  | ECS  |          |\n|  7 | NULL       | NULL      | kubesre    | www.kubesre.com/  | ECS  |          |\n|  8 | NULL       | NULL      | kubesre    | www.kubesre.com/  | ECS  |          |\n+----+------------+-----------+------------+-------------------+------+----------+\n\n# kubectl get hpa -n mysql\nNAME                          REFERENCE           TARGETS     MINPODS   MAXPODS   REPLICAS   AGE\nkeda-hpa-mysql-scaledobject   statefulset/mysql   4/4 (avg)   1         100       2          4h56m\n\n# kubectl get po -n mysql\nNAME           READY   STATUS    RESTARTS        AGE\nmysql-0        1/1     Running   1 (5h45m ago)   5h47m\nmysql-1        0/1     Running   0               55s\n由于我集群本身的原因，mysql-1 没有起来，但是我们看到了今天实验目的已经成功\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p>在本文中，我们利用KADA实现了基于事件的弹性伸缩，更加紧密的拥抱业务，基于服务的“事件”实现伸缩，使得伸缩更加合理，高效。 但事实上，针对像Mysql 这类有状态服务伸缩，如何实现伸缩过程中的数据一致性及可用性是需要各个服务需要考虑的问题，但我相信在不久的将来，有状态服务的伸缩也可以像现如今的无状态服务一样顺滑~</p>', 6);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createTextVNode("在K8S集群中部署KEDA，因为我的K8S的版本是1.23，安装KEDA2.9版本（具体版本配套关系详见官网"),
      createBaseVNode("a", _hoisted_12, [
        createTextVNode("keda.sh"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("：")
    ]),
    _hoisted_13,
    createBaseVNode("p", null, [
      createTextVNode("（详细描述可参考"),
      createBaseVNode("a", _hoisted_19, [
        createTextVNode("链接"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("）")
    ]),
    _hoisted_20
  ]);
}
const liyong_KEDAshixianjiyushijianqudongdezidongsuofangqi_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "liyong KEDAshixianjiyushijianqudongdezidongsuofangqi.html.vue"]]);
export {
  liyong_KEDAshixianjiyushijianqudongdezidongsuofangqi_html as default
};
