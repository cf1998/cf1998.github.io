import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, b as createBaseVNode, d as createTextVNode, e as createVNode, a as createStaticVNode } from "./app-9ba53931.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="什么是准入控制器" tabindex="-1"><a class="header-anchor" href="#什么是准入控制器" aria-hidden="true">#</a> 什么是准入控制器</h2><p>准入控制器（Admission Controllers）是一种插件，它会拦截在API Server层面的请求，执行对应的检查和处理。这些处理可能包含验证、默认设置以及请求的条件限制等。 准入控制器<strong>不会</strong> （也不能）阻止读取（<strong>get</strong>、<strong>watch</strong> 或 <strong>list</strong>）对象的请求。 有两种类型的准入控制：</p><ol><li>Mutating admission controllers：该类型的控制器用于更改对象。例如，它可以添加注解，或者修改对象的配置。在这个步骤中的准入控制器按照顺序执行，每一个都看到前一个可能已经对对象做出的更改。</li><li>Validating admission controllers：此类型的控制器用于验证对象。如果任何验证控制器拒绝请求，则整个请求将被拒绝，并向用户返回一个错误。</li></ol><p>以下是一些常见的准入控制器：</p>', 4);
const _hoisted_5 = /* @__PURE__ */ createBaseVNode(
  "li",
  null,
  "NamespaceExists ：此准入控制器检查针对名字空间作用域的资源（除 Namespace 自身）的所有请求。 如果请求引用的名字空间不存在，则拒绝该请求。",
  -1
  /* HOISTED */
);
const _hoisted_6 = /* @__PURE__ */ createBaseVNode(
  "li",
  null,
  "NamespaceLifecycle：该准入控制器禁止在一个正在被终止的 Namespace 中创建新对象，并确保针对不存在的 Namespace 的请求被拒绝。该准入控制器还会禁止删除三个系统保留的名字空间，即 default、 kube-system 和 kube-public。Namespace 的删除操作会触发一系列删除该名字空间中所有对象（Pod、Service 等）的操作。 为了确保这个过程的完整性，我们强烈建议启用这个准入控制器。",
  -1
  /* HOISTED */
);
const _hoisted_7 = /* @__PURE__ */ createBaseVNode(
  "li",
  null,
  "LimitRanger：此准入控制器会监测传入的请求，并确保请求不会违反 Namespace 中 LimitRange 对象所设置的任何约束。 如果你在 Kubernetes 部署中使用了 LimitRange 对象，则必须使用此准入控制器来执行这些约束。 LimitRanger 还可以用于将默认资源请求应用到没有设定资源约束的 Pod； 当前，默认的 LimitRanger 对 default 名字空间中的所有 Pod 都设置 0.1 CPU 的需求。",
  -1
  /* HOISTED */
);
const _hoisted_8 = {
  href: "https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-service-account/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_9 = /* @__PURE__ */ createBaseVNode(
  "li",
  null,
  "DefaultStorageClass：此准入控制器监测没有请求任何特定存储类的 PersistentVolumeClaim 对象的创建请求， 并自动向其添加默认存储类。 这样，没有任何特殊存储类需求的用户根本不需要关心它们，它们将被设置为使用默认存储类。当未配置默认存储类时，此准入控制器不执行任何操作。如果将多个存储类标记为默认存储类， 此控制器将拒绝所有创建 PersistentVolumeClaim 的请求，并返回错误信息。 要修复此错误，管理员必须重新检查其 StorageClass 对象，并仅将其中一个标记为默认。 此准入控制器会忽略所有 PersistentVolumeClaim 更新操作，仅处理创建操作。",
  -1
  /* HOISTED */
);
const _hoisted_10 = {
  href: "https://kubernetes.io/zh/docs/concepts/security/pod-security-standards/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_11 = {
  href: "https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/admission-controllers/#alwaysadmit",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_12 = /* @__PURE__ */ createStaticVNode('<p>你可以通过以下命令查看 Kubernetes 集群已经启用哪些准入控制器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kube-apiserver <span class="token parameter variable">-h</span> <span class="token operator">|</span> <span class="token function">grep</span> enable-admission-plugins\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 Kubernetes 1.27 中，默认启用的插件有</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>CertificateApproval, CertificateSigning, CertificateSubjectRestriction, DefaultIngressClass, DefaultStorageClass, DefaultTolerationSeconds, LimitRanger, MutatingAdmissionWebhook, NamespaceLifecycle, PersistentVolumeClaimResize, PodSecurity, Priority, ResourceQuota, RuntimeClass, ServiceAccount, StorageObjectInUseProtection, TaintNodesByCondition, ValidatingAdmissionPolicy, ValidatingAdmissionWebhook\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>', 4);
const _hoisted_16 = {
  href: "https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/admission-controllers/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_17 = /* @__PURE__ */ createStaticVNode('<h2 id="为什么需要准入控制器" tabindex="-1"><a class="header-anchor" href="#为什么需要准入控制器" aria-hidden="true">#</a> 为什么需要准入控制器</h2><p>准入控制器 (Admission Controllers) 在 Kubernetes 中起着至关重要的作用。它们提供了一种拦截并对 API 请求进行修改、验证和拒绝的机制，从而增强了 Kubernetes 的安全性和灵活性。以下是使用准入控制器的主要原因：</p><ol><li>安全性：准入控制器可以帮助实施与安全相关的策略，例如 Pod Security Policies（Pod 安全策略）和 Security Contexts（安全上下文）。这些控制器可以阻止不符合特定安全要求的资源部署到集群中。例如，它可用于禁止容器以 root 身份运行或确保容器的根文件系统始终以只读方式安装。可以通过自定义、基于 Webhook 的准入控制器实现的其他用例包括： <ol><li>仅允许从企业已知的特定镜像仓库中提取映像，同时拒绝未知的镜像仓库。</li><li>拒绝不符合安全标准的部署。例如，使用该privileged标志的容器可以绕过许多安全检查。这种风险可以通过基于 Webhook 的准入控制器来缓解，该控制器要么拒绝此类部署（验证），要么覆盖该privileged标志，将其设置为false。</li></ol></li><li>默认值设置：有些准入控制器用于为没有指定必需字段的 API 请求设置默认值。例如 DefaultStorageClass 控制器会为没有明确指定存储类的 PersistentVolumeClaims 添加默认的 StorageClass。</li><li>资源管理：某些准入控制器能够限制资源的使用，以保持集群稳定性。例如 LimitRanger 控制器可以实施与资源使用相关的限制，如 Pod 的 CPU 或内存的限制。 <ol><li>对不同对象强制执行标签验证，以确保为各种对象使用正确的标签，例如分配给团队或项目的每个对象，或指定应用程序标签的每个部署。</li><li>对不同对象强制执行标签验证，以确保为各种对象使用正确的标签，例如分配给团队或项目的每个对象，或指定应用程序标签的每个部署。</li><li>自动向对象添加注释，例如为“开发”部署资源分配正确的成本中心</li></ol></li><li>命名空间生命周期管理：NamespaceLifecycle 控制器确保在创建对象时，对应的命名空间存在，并且在删除命名空间时，没有其下的对象。</li><li>引用完整性：一些控制器可以避免创建引用不存在的对象的资源。例如 PodNodeSelector 控制器会在 Pod 创建时检查其 Node 选择器是否匹配任何现有的节点。</li></ol><p>总的来说，准入控制器使得管理员可以对 Kubernetes 集群进行细粒度的控制，以符合组织的运营和安全需求。</p><h2 id="什么是kubernetes-admission-webhooks" tabindex="-1"><a class="header-anchor" href="#什么是kubernetes-admission-webhooks" aria-hidden="true">#</a> 什么是Kubernetes Admission Webhooks</h2>', 5);
const _hoisted_22 = {
  href: "https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/extensible-admission-controllers/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_23 = {
  href: "https://kubernetes.io/blog/2019/03/21/a-guide-to-kubernetes-admission-controllers/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_24 = /* @__PURE__ */ createStaticVNode('<p><img src="https://img.kubesre.com/kubernetes/2.png" alt="image.png"></p><h3 id="mutating-admission-webhook" tabindex="-1"><a class="header-anchor" href="#mutating-admission-webhook" aria-hidden="true">#</a> Mutating Admission Webhook</h3><p>Mutating Admission Webhook用于修改对象资源，该Webhook在验证阶段之前调用，可以改变用户提交的API server的对象。例如，你可能希望所有创建的Pod具有某些标签，或者你想修改特定资源的规格以满足某种需求。这可以通过Mutating Admission Webhook实现。</p><h3 id="validating-admission-webhook" tabindex="-1"><a class="header-anchor" href="#validating-admission-webhook" aria-hidden="true">#</a> Validating Admission Webhook</h3><p>Validating Admission Webhook用于验证对象资源。与mutating webhook不同，validating webhook不会修改对象。它仅是在对象持久化之前对其进行验证检查，并接收或拒绝该对象。例如，你可能希望确保所有的Pod所有的image来自受信任的镜像仓库，或者你想确认Pod的某些字段满足特定的格式。这可以通过Validating Admission Webhook实现。</p><h2 id="webhook请求和响应" tabindex="-1"><a class="header-anchor" href="#webhook请求和响应" aria-hidden="true">#</a> Webhook请求和响应</h2>', 6);
const _hoisted_30 = {
  href: "https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/extensible-admission-controllers/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_31 = /* @__PURE__ */ createStaticVNode('<h3 id="请求" tabindex="-1"><a class="header-anchor" href="#请求" aria-hidden="true">#</a> 请求</h3><p>Webhook 发送 POST 请求时，请设置 Content-Type: application/json 并对 admission.k8s.io API 组中的 AdmissionReview 对象进行序列化，将所得到的 JSON 作为请求的主体。 Webhook 可以在配置中的 admissionReviewVersions 字段指定可接受的 AdmissionReview 对象版本：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> admissionregistration.k8s.io/v1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> ValidatingWebhookConfiguration\n<span class="token key atrule">webhooks</span><span class="token punctuation">:</span>\n<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>webhook.example.com\n  <span class="token key atrule">admissionReviewVersions</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v1beta1&quot;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 3);
const _hoisted_34 = {
  href: "https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/extensible-admission-controllers/#failure-policy",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_35 = /* @__PURE__ */ createStaticVNode('<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> admission.k8s.io/v1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> AdmissionReview\n<span class="token key atrule">request</span><span class="token punctuation">:</span>\n  <span class="token comment"># 唯一标识此准入回调的随机 uid</span>\n  <span class="token key atrule">uid</span><span class="token punctuation">:</span> 705ab4f5<span class="token punctuation">-</span>6393<span class="token punctuation">-</span>11e8<span class="token punctuation">-</span>b7cc<span class="token punctuation">-</span>42010a800002\n\n  <span class="token comment"># 传入完全正确的 group/version/kind 对象</span>\n  <span class="token key atrule">kind</span><span class="token punctuation">:</span>\n    <span class="token key atrule">group</span><span class="token punctuation">:</span> autoscaling\n    <span class="token key atrule">version</span><span class="token punctuation">:</span> v1\n    <span class="token key atrule">kind</span><span class="token punctuation">:</span> Scale\n\n  <span class="token comment"># 修改 resource 的完全正确的的 group/version/kind</span>\n  <span class="token key atrule">resource</span><span class="token punctuation">:</span>\n    <span class="token key atrule">group</span><span class="token punctuation">:</span> apps\n    <span class="token key atrule">version</span><span class="token punctuation">:</span> v1\n    <span class="token key atrule">resource</span><span class="token punctuation">:</span> deployments\n\n  <span class="token comment"># subResource（如果请求是针对 subResource 的）</span>\n  <span class="token key atrule">subResource</span><span class="token punctuation">:</span> scale\n\n  <span class="token comment"># 在对 API 服务器的原始请求中，传入对象的标准 group/version/kind</span>\n  <span class="token comment"># 仅当 Webhook 指定 `matchPolicy: Equivalent` 且将对 API 服务器的原始请求</span>\n  <span class="token comment"># 转换为 Webhook 注册的版本时，这才与 `kind` 不同。</span>\n  <span class="token key atrule">requestKind</span><span class="token punctuation">:</span>\n    <span class="token key atrule">group</span><span class="token punctuation">:</span> autoscaling\n    <span class="token key atrule">version</span><span class="token punctuation">:</span> v1\n    <span class="token key atrule">kind</span><span class="token punctuation">:</span> Scale\n\n  <span class="token comment"># 在对 API 服务器的原始请求中正在修改的资源的标准 group/version/kind</span>\n  <span class="token comment"># 仅当 Webhook 指定了 `matchPolicy：Equivalent` 并且将对 API 服务器的原始请求转换为</span>\n  <span class="token comment"># Webhook 注册的版本时，这才与 `resource` 不同。</span>\n  <span class="token key atrule">requestResource</span><span class="token punctuation">:</span>\n    <span class="token key atrule">group</span><span class="token punctuation">:</span> apps\n    <span class="token key atrule">version</span><span class="token punctuation">:</span> v1\n    <span class="token key atrule">resource</span><span class="token punctuation">:</span> deployments\n\n  <span class="token comment"># subResource（如果请求是针对 subResource 的）</span>\n  <span class="token comment"># 仅当 Webhook 指定了 `matchPolicy：Equivalent` 并且将对</span>\n  <span class="token comment"># API 服务器的原始请求转换为该 Webhook 注册的版本时，这才与 `subResource` 不同。</span>\n  <span class="token key atrule">requestSubResource</span><span class="token punctuation">:</span> scale\n\n  <span class="token comment"># 被修改资源的名称</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>deployment\n\n  <span class="token comment"># 如果资源是属于名字空间（或者是名字空间对象），则这是被修改的资源的名字空间</span>\n  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>namespace\n\n  <span class="token comment"># 操作可以是 CREATE、UPDATE、DELETE 或 CONNECT</span>\n  <span class="token key atrule">operation</span><span class="token punctuation">:</span> UPDATE\n\n  <span class="token key atrule">userInfo</span><span class="token punctuation">:</span>\n    <span class="token comment"># 向 API 服务器发出请求的经过身份验证的用户的用户名</span>\n    <span class="token key atrule">username</span><span class="token punctuation">:</span> admin\n\n    <span class="token comment"># 向 API 服务器发出请求的经过身份验证的用户的 UID</span>\n    <span class="token key atrule">uid</span><span class="token punctuation">:</span> 014fbff9a07c\n\n    <span class="token comment"># 向 API 服务器发出请求的经过身份验证的用户的组成员身份</span>\n    <span class="token key atrule">groups</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> system<span class="token punctuation">:</span>authenticated\n      <span class="token punctuation">-</span> my<span class="token punctuation">-</span>admin<span class="token punctuation">-</span>group\n    <span class="token comment"># 向 API 服务器发出请求的用户相关的任意附加信息</span>\n    <span class="token comment"># 该字段由 API 服务器身份验证层填充，并且如果 webhook 执行了任何</span>\n    <span class="token comment"># SubjectAccessReview 检查，则应将其包括在内。</span>\n    <span class="token key atrule">extra</span><span class="token punctuation">:</span>\n      <span class="token key atrule">some-key</span><span class="token punctuation">:</span>\n        <span class="token punctuation">-</span> some<span class="token punctuation">-</span>value1\n        <span class="token punctuation">-</span> some<span class="token punctuation">-</span>value2\n\n  <span class="token comment"># object 是被接纳的新对象。</span>\n  <span class="token comment"># 对于 DELETE 操作，它为 null。</span>\n  <span class="token key atrule">object</span><span class="token punctuation">:</span>\n    <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> autoscaling/v1\n    <span class="token key atrule">kind</span><span class="token punctuation">:</span> Scale\n\n  <span class="token comment"># oldObject 是现有对象。</span>\n  <span class="token comment"># 对于 CREATE 和 CONNECT 操作，它为 null。</span>\n  <span class="token key atrule">oldObject</span><span class="token punctuation">:</span>\n    <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> autoscaling/v1\n    <span class="token key atrule">kind</span><span class="token punctuation">:</span> Scale\n\n  <span class="token comment"># options 包含要接受的操作的选项，例如 meta.k8s.io/v CreateOptions、UpdateOptions 或 DeleteOptions。</span>\n  <span class="token comment"># 对于 CONNECT 操作，它为 null。</span>\n  <span class="token key atrule">options</span><span class="token punctuation">:</span>\n    <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> meta.k8s.io/v1\n    <span class="token key atrule">kind</span><span class="token punctuation">:</span> UpdateOptions\n\n  <span class="token comment"># dryRun 表示 API 请求正在以 `dryrun` 模式运行，并且将不会保留。</span>\n  <span class="token comment"># 带有副作用的 Webhook 应该避免在 dryRun 为 true 时激活这些副作用。</span>\n  <span class="token comment"># 有关更多详细信息，请参见 http://k8s.io/docs/reference/using-api/api-concepts/#make-a-dry-run-request</span>\n  <span class="token key atrule">dryRun</span><span class="token punctuation">:</span> <span class="token boolean important">False</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="响应" tabindex="-1"><a class="header-anchor" href="#响应" aria-hidden="true">#</a> 响应</h3><p>Webhook 使用 HTTP 200 状态码、Content-Type: application/json 和一个包含 AdmissionReview 对象的 JSON 序列化格式来发送响应。该 AdmissionReview 对象与发送的版本相同，且其中包含的 response 字段已被有效填充。 response 至少必须包含以下字段：</p><ul><li>uid，从发送到 Webhook 的 request.uid 中复制而来</li><li>allowed，设置为 true 或 false</li></ul><p>Webhook 允许请求的最简单响应示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">{</span>\n  <span class="token key atrule">&quot;apiVersion&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;admission.k8s.io/v1&quot;</span><span class="token punctuation">,</span>\n  <span class="token key atrule">&quot;kind&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;AdmissionReview&quot;</span><span class="token punctuation">,</span>\n  <span class="token key atrule">&quot;response&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token key atrule">&quot;uid&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;value from request.uid&gt;&quot;</span><span class="token punctuation">,</span>\n    <span class="token key atrule">&quot;allowed&quot;</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Webhook 禁止请求的最简单响应示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">{</span>\n  <span class="token key atrule">&quot;apiVersion&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;admission.k8s.io/v1&quot;</span><span class="token punctuation">,</span>\n  <span class="token key atrule">&quot;kind&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;AdmissionReview&quot;</span><span class="token punctuation">,</span>\n  <span class="token key atrule">&quot;response&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token key atrule">&quot;uid&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;value from request.uid&gt;&quot;</span><span class="token punctuation">,</span>\n    <span class="token key atrule">&quot;allowed&quot;</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 8);
const _hoisted_43 = {
  href: "https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#status-v1-meta",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_44 = {
  href: "https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#status-v1-meta",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_45 = /* @__PURE__ */ createStaticVNode('<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">{</span>\n  <span class="token key atrule">&quot;apiVersion&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;admission.k8s.io/v1&quot;</span><span class="token punctuation">,</span>\n  <span class="token key atrule">&quot;kind&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;AdmissionReview&quot;</span><span class="token punctuation">,</span>\n  <span class="token key atrule">&quot;response&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token key atrule">&quot;uid&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;value from request.uid&gt;&quot;</span><span class="token punctuation">,</span>\n    <span class="token key atrule">&quot;allowed&quot;</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span>\n    <span class="token key atrule">&quot;status&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token key atrule">&quot;code&quot;</span><span class="token punctuation">:</span> <span class="token number">403</span><span class="token punctuation">,</span>\n      <span class="token key atrule">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;You cannot do this because it is Tuesday and your name starts with A&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 1);
const _hoisted_46 = {
  href: "https://jsonpatch.com/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_47 = /* @__PURE__ */ createStaticVNode('<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">{</span>\n  <span class="token key atrule">&quot;apiVersion&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;admission.k8s.io/v1&quot;</span><span class="token punctuation">,</span>\n  <span class="token key atrule">&quot;kind&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;AdmissionReview&quot;</span><span class="token punctuation">,</span>\n  <span class="token key atrule">&quot;response&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token key atrule">&quot;uid&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;value from request.uid&gt;&quot;</span><span class="token punctuation">,</span>\n    <span class="token key atrule">&quot;allowed&quot;</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span>\n    <span class="token key atrule">&quot;patchType&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;JSONPatch&quot;</span><span class="token punctuation">,</span>\n    <span class="token key atrule">&quot;patch&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;W3sib3AiOiAiYWRkIiwgInBhdGgiOiAiL3NwZWMvcmVwbGljYXMiLCAidmFsdWUiOiAzfV0=&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准入 Webhook 可以选择性地返回在 HTTP Warning 头中返回给请求客户端的警告消息，警告代码为 299。 警告可以与允许或拒绝的准入响应一起发送。 如果你正在实现返回一条警告的 webhook，则：</p><ul><li>不要在消息中包括 &quot;Warning:&quot; 前缀</li><li>使用警告消息描述该客户端进行 API 请求时会遇到或应意识到的问题</li><li>如果可能，将警告限制为 120 个字符</li></ul><blockquote><p><strong>注意：</strong> 超过 256 个字符的单条警告消息在返回给客户之前可能会被 API 服务器截断。 如果超过 4096 个字符的警告消息（来自所有来源），则额外的警告消息会被忽略。</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">{</span>\n  <span class="token key atrule">&quot;apiVersion&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;admission.k8s.io/v1&quot;</span><span class="token punctuation">,</span>\n  <span class="token key atrule">&quot;kind&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;AdmissionReview&quot;</span><span class="token punctuation">,</span>\n  <span class="token key atrule">&quot;response&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token key atrule">&quot;uid&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;value from request.uid&gt;&quot;</span><span class="token punctuation">,</span>\n    <span class="token key atrule">&quot;allowed&quot;</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span>\n    <span class="token key atrule">&quot;warnings&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&quot;duplicate envvar entries specified with name MY_ENV&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;memory request less than 4MB specified for container mycontainer, which will not start successfully&quot;</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编写和部署准入webhook" tabindex="-1"><a class="header-anchor" href="#编写和部署准入webhook" aria-hidden="true">#</a> 编写和部署准入Webhook</h2>', 6);
const _hoisted_53 = {
  href: "https://github.com/kubernetes/kubernetes/blob/release-1.21/test/images/agnhost/webhook/main.go",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_54 = {
  href: "https://gitee.com/KubeSec/admission-controller-webhook-demo",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_55 = /* @__PURE__ */ createStaticVNode('<h3 id="validatingwebhook" tabindex="-1"><a class="header-anchor" href="#validatingwebhook" aria-hidden="true">#</a> ValidatingWebhook</h3><p>检查 Kubernetes Pod 中的镜像是否来自 registry.ap-northeast-1.aliyuncs.com/kubesec/</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n	<span class="token string">&quot;fmt&quot;</span>\n	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>\n	admissionv1 <span class="token string">&quot;k8s.io/api/admission/v1&quot;</span>\n	corev1 <span class="token string">&quot;k8s.io/api/core/v1&quot;</span>\n	metav1 <span class="token string">&quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;</span>\n	<span class="token string">&quot;k8s.io/apimachinery/pkg/runtime&quot;</span>\n	<span class="token string">&quot;k8s.io/apimachinery/pkg/runtime/serializer&quot;</span>\n	<span class="token string">&quot;k8s.io/klog/v2&quot;</span>\n	<span class="token string">&quot;net/http&quot;</span>\n	<span class="token string">&quot;strings&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// 定义常量，表示允许的镜像前缀</span>\n<span class="token keyword">const</span> allowedImagePrefix <span class="token operator">=</span> <span class="token string">&quot;registry.ap-northeast-1.aliyuncs.com/kubesec/&quot;</span>\n\n<span class="token keyword">var</span> codecFactory <span class="token operator">=</span> serializer<span class="token punctuation">.</span><span class="token function">NewCodecFactory</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">NewScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">toV1AdmissionResponse</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token operator">*</span>admissionv1<span class="token punctuation">.</span>AdmissionResponse <span class="token punctuation">{</span>\n	<span class="token keyword">return</span> <span class="token operator">&amp;</span>admissionv1<span class="token punctuation">.</span>AdmissionResponse<span class="token punctuation">{</span>\n		Result<span class="token punctuation">:</span> <span class="token operator">&amp;</span>metav1<span class="token punctuation">.</span>Status<span class="token punctuation">{</span>\n			Message<span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n		<span class="token punctuation">}</span><span class="token punctuation">,</span>\n	<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">admitPods</span><span class="token punctuation">(</span>ar admissionv1<span class="token punctuation">.</span>AdmissionReview<span class="token punctuation">)</span> <span class="token operator">*</span>admissionv1<span class="token punctuation">.</span>AdmissionResponse <span class="token punctuation">{</span>\n	podResource <span class="token operator">:=</span> metav1<span class="token punctuation">.</span>GroupVersionResource<span class="token punctuation">{</span>Group<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> Version<span class="token punctuation">:</span> <span class="token string">&quot;v1&quot;</span><span class="token punctuation">,</span> Resource<span class="token punctuation">:</span> <span class="token string">&quot;pods&quot;</span><span class="token punctuation">}</span>\n	<span class="token keyword">if</span> ar<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Resource <span class="token operator">!=</span> podResource <span class="token punctuation">{</span>\n		<span class="token keyword">return</span> <span class="token function">toV1AdmissionResponse</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;expect resource to be %s&quot;</span><span class="token punctuation">,</span> podResource<span class="token punctuation">)</span><span class="token punctuation">)</span>\n	<span class="token punctuation">}</span>\n	raw <span class="token operator">:=</span> ar<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Object<span class="token punctuation">.</span>Raw\n	pod <span class="token operator">:=</span> corev1<span class="token punctuation">.</span>Pod<span class="token punctuation">{</span><span class="token punctuation">}</span>\n	deserializer <span class="token operator">:=</span> codecFactory<span class="token punctuation">.</span><span class="token function">UniversalDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> deserializer<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pod<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n		<span class="token keyword">return</span> <span class="token function">toV1AdmissionResponse</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n	<span class="token punctuation">}</span>\n	admissionResponse <span class="token operator">:=</span> admissionv1<span class="token punctuation">.</span>AdmissionResponse<span class="token punctuation">{</span>\n		Allowed<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n	<span class="token punctuation">}</span>\n	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> container <span class="token operator">:=</span> <span class="token keyword">range</span> pod<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>Containers <span class="token punctuation">{</span>\n		<span class="token keyword">if</span> <span class="token operator">!</span>strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>Image<span class="token punctuation">,</span> allowedImagePrefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n			<span class="token comment">// 如果容器的镜像不符合预期前缀，则不允许请求，并返回错误消息</span>\n			admissionResponse<span class="token punctuation">.</span>Allowed <span class="token operator">=</span> <span class="token boolean">false</span>\n			admissionResponse<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token operator">&amp;</span>metav1<span class="token punctuation">.</span>Status<span class="token punctuation">{</span>\n				Code<span class="token punctuation">:</span>    http<span class="token punctuation">.</span>StatusUnauthorized<span class="token punctuation">,</span>\n				Message<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;image is not from %s&quot;</span><span class="token punctuation">,</span> allowedImagePrefix<span class="token punctuation">)</span><span class="token punctuation">,</span>\n			<span class="token punctuation">}</span>\n			<span class="token keyword">break</span>\n		<span class="token punctuation">}</span>\n	<span class="token punctuation">}</span>\n\n	<span class="token keyword">return</span> <span class="token operator">&amp;</span>admissionResponse\n<span class="token punctuation">}</span>\n\n<span class="token comment">// handlerAdmission 处理准入控制请求</span>\n<span class="token keyword">func</span> <span class="token function">handlerAdmission</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	<span class="token comment">// 初始化 admissionReview 对象</span>\n	admissionReviewRequest <span class="token operator">:=</span> admissionv1<span class="token punctuation">.</span>AdmissionReview<span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n	<span class="token comment">// 初始化响应对象结构</span>\n	admissionReviewResponse <span class="token operator">:=</span> admissionv1<span class="token punctuation">.</span>AdmissionReview<span class="token punctuation">{</span>\n		TypeMeta<span class="token punctuation">:</span> metav1<span class="token punctuation">.</span>TypeMeta<span class="token punctuation">{</span>\n			Kind<span class="token punctuation">:</span>       <span class="token string">&quot;AdmissionReview&quot;</span><span class="token punctuation">,</span>\n			APIVersion<span class="token punctuation">:</span> <span class="token string">&quot;admission.k8s.io/v1&quot;</span><span class="token punctuation">,</span>\n		<span class="token punctuation">}</span><span class="token punctuation">,</span>\n	<span class="token punctuation">}</span>\n\n	body<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">GetRawData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n		admissionReviewResponse<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token operator">&amp;</span>metav1<span class="token punctuation">.</span>Status<span class="token punctuation">{</span>\n			Message<span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n			Code<span class="token punctuation">:</span>    http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">,</span>\n		<span class="token punctuation">}</span>\n		ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> admissionReviewResponse<span class="token punctuation">)</span>\n		<span class="token keyword">return</span>\n	<span class="token punctuation">}</span>\n	deserializer <span class="token operator">:=</span> codecFactory<span class="token punctuation">.</span><span class="token function">UniversalDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> deserializer<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>admissionReviewRequest<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n		klog<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n		admissionReviewResponse<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token operator">&amp;</span>metav1<span class="token punctuation">.</span>Status<span class="token punctuation">{</span>\n			Message<span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n			Code<span class="token punctuation">:</span>    http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">,</span>\n		<span class="token punctuation">}</span>\n	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n		admissionReviewResponse<span class="token punctuation">.</span>Response <span class="token operator">=</span> <span class="token function">admitPods</span><span class="token punctuation">(</span>admissionReviewRequest<span class="token punctuation">)</span>\n	<span class="token punctuation">}</span>\n	<span class="token comment">// 更新响应中的 UID 值以匹配请求的 UID</span>\n	admissionReviewResponse<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>UID <span class="token operator">=</span> admissionReviewRequest<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>UID\n\n	ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> admissionReviewResponse<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n	r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;/pods&quot;</span><span class="token punctuation">,</span> handlerAdmission<span class="token punctuation">)</span>\n	<span class="token keyword">if</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">RunTLS</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/etc/admission-webhook/certs/tls.crt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/etc/admission-webhook/certs/tls.key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n	<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="validatingwebhook-1" tabindex="-1"><a class="header-anchor" href="#validatingwebhook-1" aria-hidden="true">#</a> ValidatingWebhook</h3><p>为对象添加标签 {&quot;added-label&quot;: &quot;yes&quot;} 在main.go中添加如下代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>\n	addFirstLabelPatch <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">`[\n         { &quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/metadata/labels&quot;, &quot;value&quot;: {&quot;added-label&quot;: &quot;yes&quot;}}\n     ]`</span>\n	addAdditionalLabelPatch <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">`[\n         { &quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/metadata/labels/added-label&quot;, &quot;value&quot;: &quot;yes&quot; }\n     ]`</span>\n	updateLabelPatch <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">`[\n         { &quot;op&quot;: &quot;replace&quot;, &quot;path&quot;: &quot;/metadata/labels/added-label&quot;, &quot;value&quot;: &quot;yes&quot; }\n     ]`</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">addLabel</span><span class="token punctuation">(</span>ar admissionv1<span class="token punctuation">.</span>AdmissionReview<span class="token punctuation">)</span> <span class="token operator">*</span>admissionv1<span class="token punctuation">.</span>AdmissionResponse <span class="token punctuation">{</span>\n	klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;calling add-label&quot;</span><span class="token punctuation">)</span>\n	obj <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n		metav1<span class="token punctuation">.</span>ObjectMeta <span class="token string">`json:&quot;metadata,omitempty&quot;`</span>\n	<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n	admissionResponse <span class="token operator">:=</span> admissionv1<span class="token punctuation">.</span>AdmissionResponse<span class="token punctuation">{</span><span class="token punctuation">}</span>\n	admissionResponse<span class="token punctuation">.</span>Allowed <span class="token operator">=</span> <span class="token boolean">true</span>\n	raw <span class="token operator">:=</span> ar<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Object<span class="token punctuation">.</span>Raw\n	err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span>\n	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n		klog<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n		<span class="token keyword">return</span> <span class="token function">toV1AdmissionResponse</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n	<span class="token punctuation">}</span>\n	pt <span class="token operator">:=</span> admissionv1<span class="token punctuation">.</span>PatchTypeJSONPatch\n	labelValue<span class="token punctuation">,</span> hasLabel <span class="token operator">:=</span> obj<span class="token punctuation">.</span>ObjectMeta<span class="token punctuation">.</span>Labels<span class="token punctuation">[</span><span class="token string">&quot;added-label&quot;</span><span class="token punctuation">]</span>\n	<span class="token keyword">switch</span> <span class="token punctuation">{</span>\n	<span class="token keyword">case</span> <span class="token function">len</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>ObjectMeta<span class="token punctuation">.</span>Labels<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>\n		admissionResponse<span class="token punctuation">.</span>Patch <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>addFirstLabelPatch<span class="token punctuation">)</span>\n		admissionResponse<span class="token punctuation">.</span>PatchType <span class="token operator">=</span> <span class="token operator">&amp;</span>pt\n	<span class="token keyword">case</span> <span class="token operator">!</span>hasLabel<span class="token punctuation">:</span>\n		admissionResponse<span class="token punctuation">.</span>Patch <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>addAdditionalLabelPatch<span class="token punctuation">)</span>\n		admissionResponse<span class="token punctuation">.</span>PatchType <span class="token operator">=</span> <span class="token operator">&amp;</span>pt\n	<span class="token keyword">case</span> labelValue <span class="token operator">!=</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">:</span>\n		admissionResponse<span class="token punctuation">.</span>Patch <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>updateLabelPatch<span class="token punctuation">)</span>\n		admissionResponse<span class="token punctuation">.</span>PatchType <span class="token operator">=</span> <span class="token operator">&amp;</span>pt\n	<span class="token keyword">default</span><span class="token punctuation">:</span>\n		<span class="token comment">// already set</span>\n	<span class="token punctuation">}</span>\n	<span class="token keyword">return</span> <span class="token operator">&amp;</span>admissionResponse\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改handlerAdmission,根据URL处理请求</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">switch</span> ctx<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path <span class="token punctuation">{</span>\n		<span class="token keyword">case</span> <span class="token string">&quot;/pods&quot;</span><span class="token punctuation">:</span>\n			admissionReviewResponse<span class="token punctuation">.</span>Response <span class="token operator">=</span> <span class="token function">admitPods</span><span class="token punctuation">(</span>admissionReviewRequest<span class="token punctuation">)</span>\n		<span class="token keyword">case</span> <span class="token string">&quot;/add-label&quot;</span><span class="token punctuation">:</span>\n			admissionReviewResponse<span class="token punctuation">.</span>Response <span class="token operator">=</span> <span class="token function">addLabel</span><span class="token punctuation">(</span>admissionReviewRequest<span class="token punctuation">)</span>\n		<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加/add-label路由</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;/add-label&quot;</span><span class="token punctuation">,</span> handlerAdmission<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="部署admission-webhook" tabindex="-1"><a class="header-anchor" href="#部署admission-webhook" aria-hidden="true">#</a> 部署Admission Webhook</h3><h4 id="使用cert-manager提供tls" tabindex="-1"><a class="header-anchor" href="#使用cert-manager提供tls" aria-hidden="true">#</a> 使用cert-manager提供TLS</h4><ul><li>部署cert-manager</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl apply <span class="token parameter variable">-f</span> https://github.com/cert-manager/cert-manager/releases/download/v1.12.0/cert-manager.yaml\nkubectl <span class="token parameter variable">-n</span> cert-manager get pods\nNAME                                       READY   STATUS    RESTARTS   AGE\ncert-manager-7c869867bf-tk77v              <span class="token number">1</span>/1     Running   <span class="token number">0</span>          59s\ncert-manager-cainjector-54c9d9b775-248x5   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          59s\ncert-manager-webhook-7f7469bdb7-6dqqt      <span class="token number">1</span>/1     Running   <span class="token number">0</span>          59s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自签名Issuer</li></ul><p>创建一个名为 selfsigned-issuer 的yaml文件如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> cert<span class="token punctuation">-</span>manager.io/v1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterIssuer\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> selfsigned<span class="token punctuation">-</span>issuer\n<span class="token key atrule">spec</span><span class="token punctuation">:</span>\n  <span class="token key atrule">selfSigned</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n\n<span class="token punctuation">[</span>root@k8s admission<span class="token punctuation">-</span>controller<span class="token punctuation">-</span>webhook<span class="token punctuation">-</span>demo<span class="token punctuation">]</span><span class="token comment"># kubectl create -f manifests/selfsigned-issuer.yaml</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建Certificate</li></ul><p>创建一个名为 certificate 的yaml文件，与你的Webhook服务名称和命名空间相对应，如下所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> cert<span class="token punctuation">-</span>manager.io/v1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> Certificate\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> admission<span class="token punctuation">-</span>certs\n  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default\n<span class="token key atrule">spec</span><span class="token punctuation">:</span>\n  <span class="token key atrule">secretName</span><span class="token punctuation">:</span> admission<span class="token punctuation">-</span>certs\n  <span class="token key atrule">duration</span><span class="token punctuation">:</span> 8760h <span class="token comment"># equals to one year</span>\n  <span class="token key atrule">renewBefore</span><span class="token punctuation">:</span> 360h <span class="token comment"># equals to two weeks</span>\n  <span class="token key atrule">issuerRef</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> selfsigned<span class="token punctuation">-</span>issuer \n    <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterIssuer\n  <span class="token key atrule">commonName</span><span class="token punctuation">:</span> admission<span class="token punctuation">-</span>webhook.default.svc\n  <span class="token key atrule">dnsNames</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> admission<span class="token punctuation">-</span>webhook.default.svc\n  <span class="token punctuation">-</span> admission<span class="token punctuation">-</span>webhook.default.svc.cluster.local\n\n\n<span class="token punctuation">[</span>root@k8s admission<span class="token punctuation">-</span>controller<span class="token punctuation">-</span>webhook<span class="token punctuation">-</span>demo<span class="token punctuation">]</span><span class="token comment"># kubectl create -f manifests/certificate.yaml</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="构建镜像并上传至镜像仓库" tabindex="-1"><a class="header-anchor" href="#构建镜像并上传至镜像仓库" aria-hidden="true">#</a> 构建镜像并上传至镜像仓库</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">[</span>root@k8s admission<span class="token punctuation">-</span>controller<span class="token punctuation">-</span>webhook<span class="token punctuation">-</span>demo<span class="token punctuation">]</span><span class="token comment"># make docker-build docker-push IMG=registry.ap-northeast-1.aliyuncs.com/kubesec/admission-controller-webhook-demo:v0.0.1</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="部署admission-webhook-1" tabindex="-1"><a class="header-anchor" href="#部署admission-webhook-1" aria-hidden="true">#</a> 部署Admission Webhook</h4><p>在Kubernetes中部署上面提到的Gin Webhook应用。需要注意的是，我们要将在第3步中创建的secret用作TLS证书，并且服务名称应该与我们在证书中定义的dnsName相匹配。 创建一个名为 admission-webhook-deployment 的yaml文件，如下所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> admission<span class="token punctuation">-</span>webhook\n  <span class="token key atrule">labels</span><span class="token punctuation">:</span>\n    <span class="token key atrule">app</span><span class="token punctuation">:</span> admission<span class="token punctuation">-</span>webhook\n<span class="token key atrule">spec</span><span class="token punctuation">:</span>\n  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>\n  <span class="token key atrule">selector</span><span class="token punctuation">:</span>\n    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>\n      <span class="token key atrule">app</span><span class="token punctuation">:</span> admission<span class="token punctuation">-</span>webhook\n  <span class="token key atrule">template</span><span class="token punctuation">:</span>\n    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n      <span class="token key atrule">labels</span><span class="token punctuation">:</span>\n        <span class="token key atrule">app</span><span class="token punctuation">:</span> admission<span class="token punctuation">-</span>webhook\n    <span class="token key atrule">spec</span><span class="token punctuation">:</span>\n      <span class="token key atrule">containers</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> admission<span class="token punctuation">-</span>webhook\n        <span class="token key atrule">image</span><span class="token punctuation">:</span> &lt;your<span class="token punctuation">-</span>image<span class="token punctuation">&gt;</span> <span class="token comment"># replace with your docker image</span>\n        <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">443</span>\n        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>\n        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> webhook<span class="token punctuation">-</span>cert\n          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/admission<span class="token punctuation">-</span>webhook/certs\n          <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> webhook<span class="token punctuation">-</span>cert\n        <span class="token key atrule">secret</span><span class="token punctuation">:</span>\n          <span class="token key atrule">secretName</span><span class="token punctuation">:</span> admission<span class="token punctuation">-</span>certs\n<span class="token punctuation">---</span>\n<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> admission<span class="token punctuation">-</span>webhook\n  <span class="token key atrule">labels</span><span class="token punctuation">:</span>\n    <span class="token key atrule">app</span><span class="token punctuation">:</span> admission<span class="token punctuation">-</span>webhook\n<span class="token key atrule">spec</span><span class="token punctuation">:</span>\n  <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">443</span>\n    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>\n  <span class="token key atrule">selector</span><span class="token punctuation">:</span>\n    <span class="token key atrule">app</span><span class="token punctuation">:</span> admission<span class="token punctuation">-</span>webhook\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;your-image&gt;替换为实际的webhook 镜像地址， tls证书和密钥会从admission-certs这个secret被挂载到/etc/admission-webhook/certs目录下。这样，你的webhook就可以使用这个证书和密钥去提供HTTPS服务了。</code></p><h4 id="创建mutatingwebhookconfiguration并测试" tabindex="-1"><a class="header-anchor" href="#创建mutatingwebhookconfiguration并测试" aria-hidden="true">#</a> 创建MutatingWebhookConfiguration并测试</h4><p>创建一个名为mutating-webhook-config的yaml文件</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> admissionregistration.k8s.io/v1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> MutatingWebhookConfiguration\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;webhook-name&gt;&quot;</span> <span class="token comment"># replace with your webhook name</span>\n<span class="token key atrule">webhooks</span><span class="token punctuation">:</span>\n<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;webhook-name&gt;.default.svc&quot;</span> <span class="token comment"># replace with your webhook name</span>\n  <span class="token key atrule">sideEffects</span><span class="token punctuation">:</span> None\n  <span class="token key atrule">admissionReviewVersions</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v1beta1&quot;</span><span class="token punctuation">]</span>\n  <span class="token key atrule">clientConfig</span><span class="token punctuation">:</span>\n    <span class="token key atrule">service</span><span class="token punctuation">:</span>\n      <span class="token key atrule">name</span><span class="token punctuation">:</span> admission<span class="token punctuation">-</span>webhook\n      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default\n      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">&quot;/add-label&quot;</span>\n    <span class="token key atrule">caBundle</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>CA_PEM_B64<span class="token punctuation">}</span> <span class="token comment"># 使用你的真实 CA 文件内容，base64 编码</span>\n  <span class="token key atrule">rules</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> <span class="token key atrule">operations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;CREATE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;UPDATE&quot;</span><span class="token punctuation">]</span>\n    <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">]</span>\n    <span class="token key atrule">apiVersions</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">]</span>\n    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;pods&quot;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，${CA_PEM_B64} 应被替换为第二步中创建的 Secret (admission-certs) 中 CA 的 base64 编码值。你可以使用以下命令获取该值：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get secret admission-certs <span class="token parameter variable">-o</span><span class="token operator">=</span>jsonpath<span class="token operator">=</span><span class="token string">&#39;{.data.ca\\.crt}&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>测试MutatingWebhook</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@k8s admission-controller-webhook-demo<span class="token punctuation">]</span><span class="token comment"># kubectl create -f manifests/mutating-webhook-config.yaml</span>\n<span class="token punctuation">[</span>root@k8s admission-controller-webhook-demo<span class="token punctuation">]</span><span class="token comment"># kubectl create -f manifests/test-pod.yaml</span>\n<span class="token punctuation">[</span>root@k8s admission-controller-webhook-demo<span class="token punctuation">]</span><span class="token comment"># kubectl get -f manifests/test-pod.yaml --show-labels</span>\nNAME    READY   STATUS    RESTARTS   AGE   LABELS\nnginx   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          13m   added-label<span class="token operator">=</span>yes\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建validtingwebhookconfiguration" tabindex="-1"><a class="header-anchor" href="#创建validtingwebhookconfiguration" aria-hidden="true">#</a> 创建ValidtingWebhookConfiguration</h4><p>最后，您需要创建一个ValidatingWebhookConfiguration来告诉Kubernetes您的webhook服务地址和它需要验证的资源。 创建一个名为 validating-webhook-config 的yaml文件，如下所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> admissionregistration.k8s.io/v1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> ValidatingWebhookConfiguration\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;webhook-name&gt;&quot;</span> <span class="token comment"># replace with your webhook name</span>\n<span class="token key atrule">webhooks</span><span class="token punctuation">:</span>\n<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;webhook-name&gt;.default.svc&quot;</span> <span class="token comment"># replace with your webhook name</span>\n  <span class="token key atrule">sideEffects</span><span class="token punctuation">:</span> None\n  <span class="token key atrule">admissionReviewVersions</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v1beta1&quot;</span><span class="token punctuation">]</span>\n  <span class="token key atrule">clientConfig</span><span class="token punctuation">:</span>\n    <span class="token key atrule">service</span><span class="token punctuation">:</span>\n      <span class="token key atrule">name</span><span class="token punctuation">:</span> admission<span class="token punctuation">-</span>webhook\n      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default\n      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">&quot;/validate&quot;</span>\n    <span class="token key atrule">caBundle</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>CA_PEM_B64<span class="token punctuation">}</span> <span class="token comment"># 使用你的真实 CA 文件内容，base64 编码</span>\n  <span class="token key atrule">rules</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> <span class="token key atrule">operations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;CREATE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;UPDATE&quot;</span><span class="token punctuation">]</span>\n    <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">]</span>\n    <span class="token key atrule">apiVersions</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">]</span>\n    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;pods&quot;</span><span class="token punctuation">]</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，${CA_PEM_B64} 应被替换为第二步中创建的 Secret (admission-certs) 中 CA 的 base64 编码值。你可以使用以下命令获取该值：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get secret admission-certs <span class="token parameter variable">-o</span><span class="token operator">=</span>jsonpath<span class="token operator">=</span><span class="token string">&#39;{.data.ca\\.crt}&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>', 38);
const _hoisted_93 = {
  href: "https://gitee.com/KubeSec/admission-controller-webhook-demo/commit/f498aec315cce7cc51eb640f933b5663c59091d1",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_94 = /* @__PURE__ */ createStaticVNode('<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>\napiVersion<span class="token punctuation">:</span> v1\nkind<span class="token punctuation">:</span> Pod\nmetadata<span class="token punctuation">:</span>\n  name<span class="token punctuation">:</span> nginx\nspec<span class="token punctuation">:</span>\n  containers<span class="token punctuation">:</span>\n    <span class="token operator">-</span> name<span class="token punctuation">:</span> nginx\n      image<span class="token punctuation">:</span> nginx<span class="token punctuation">:</span><span class="token number">1.14</span><span class="token number">.2</span>\n      ports<span class="token punctuation">:</span>\n        <span class="token operator">-</span> containerPort<span class="token punctuation">:</span> <span class="token number">80</span>\n\n<span class="token punctuation">[</span>root@k8s admission<span class="token operator">-</span>controller<span class="token operator">-</span>webhook<span class="token operator">-</span>demo<span class="token punctuation">]</span># kubectl create <span class="token operator">-</span>f manifests<span class="token operator">/</span>test<span class="token operator">-</span>pod<span class="token punctuation">.</span>yaml \nError from server<span class="token punctuation">:</span> <span class="token builtin">error</span> when creating <span class="token string">&quot;manifests/test-pod.yaml&quot;</span><span class="token punctuation">:</span> admission webhook <span class="token string">&quot;admission-webhook.default.svc&quot;</span> denied the request<span class="token punctuation">:</span> image is not from registry<span class="token punctuation">.</span>ap<span class="token operator">-</span>northeast<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com<span class="token operator">/</span>kubesec<span class="token operator">/</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="webhook配置" tabindex="-1"><a class="header-anchor" href="#webhook配置" aria-hidden="true">#</a> WebHook配置</h2>', 2);
const _hoisted_96 = {
  href: "https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/extensible-admission-controllers/#webhook-configuration",
  target: "_blank",
  rel: "noopener noreferrer"
};
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("ul", null, [
      _hoisted_5,
      _hoisted_6,
      _hoisted_7,
      createBaseVNode("li", null, [
        createTextVNode("ServiceAccount：此准入控制器实现了 "),
        createBaseVNode("a", _hoisted_8, [
          createTextVNode("ServiceAccount"),
          createVNode(_component_ExternalLinkIcon)
        ]),
        createTextVNode(" 的自动化。强烈推荐为 Kubernetes 项目启用此准入控制器。 如果你打算使用 Kubernetes 的 ServiceAccount 对象，你应启用这个准入控制器。")
      ]),
      _hoisted_9,
      createBaseVNode("li", null, [
        createTextVNode("PodSecurity：PodSecurity 准入控制器在新 Pod 被准入之前对其进行检查， 根据请求的安全上下文和 Pod 所在名字空间允许的 "),
        createBaseVNode("a", _hoisted_10, [
          createTextVNode("Pod 安全性标准"),
          createVNode(_component_ExternalLinkIcon)
        ]),
        createTextVNode("的限制来确定新 Pod 是否应该被准入。")
      ])
    ]),
    createBaseVNode("p", null, [
      createTextVNode("更多准入控制器，请查看："),
      createBaseVNode("a", _hoisted_11, [
        createTextVNode("https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/admission-controllers/#alwaysadmit"),
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_12,
    createBaseVNode("p", null, [
      createTextVNode("更多信息请查看官方文档："),
      createBaseVNode("a", _hoisted_16, [
        createTextVNode("https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/admission-controllers/"),
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_17,
    createBaseVNode("p", null, [
      createTextVNode("准入Webhook是一种用于接收准入请求并对其进行处理的HTTP回调机制。可以定义两种类型的准入webhook，即**Mutating Admission Webhook（修改性质的准入Webhook）和Validating Admission Webhook（验证性质的准入Webhook）。**修改性质的准入Webhook会被先调用。它们可以更改发送到API服务器的对象以执行自定义的设置默认值操作。 在完成了所有对象修改并且API服务器也验证了所传入的对象之后，验证性质的Webhook会被调用，并通过拒绝请求的方式来轻质实时自定义的策略。 "),
      createBaseVNode("a", _hoisted_22, [
        createTextVNode("https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/extensible-admission-controllers/"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createBaseVNode("a", _hoisted_23, [
        createTextVNode("https://kubernetes.io/blog/2019/03/21/a-guide-to-kubernetes-admission-controllers/"),
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_24,
    createBaseVNode("p", null, [
      createTextVNode("有关更多信息，请查看官方文档"),
      createBaseVNode("a", _hoisted_30, [
        createTextVNode("https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/extensible-admission-controllers/"),
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_31,
    createBaseVNode("p", null, [
      createTextVNode("创建 Webhook 配置时，admissionReviewVersions 是必填字段。 Webhook 必须支持至少一个当前和以前的 API 服务器都可以解析的 AdmissionReview 版本。 API 服务器将发送的是 admissionReviewVersions 列表中所支持的第一个 AdmissionReview 版本。如果 API 服务器不支持列表中的任何版本，则不允许创建配置。 如果 API 服务器遇到以前创建的 Webhook 配置，并且不支持该 API 服务器知道如何发送的任何 AdmissionReview 版本，则调用 Webhook 的尝试将失败，并依据"),
      createBaseVNode("a", _hoisted_34, [
        createTextVNode("失败策略"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("进行处理。 此示例显示了 AdmissionReview 对象中包含的数据，该数据用于请求更新 apps/v1 Deployment 的 scale 子资源：")
    ]),
    _hoisted_35,
    createBaseVNode("p", null, [
      createTextVNode("当拒绝请求时，Webhook 可以使用 status 字段自定义 http 响应码和返回给用户的消息。 有关状态类型的详细信息，请参见 "),
      createBaseVNode("a", _hoisted_43, [
        createTextVNode("API 文档"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(" ("),
      createBaseVNode("a", _hoisted_44, [
        createTextVNode("https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#status-v1-meta"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(")。 禁止请求的响应示例，它定制了向用户显示的 HTTP 状态码和消息：")
    ]),
    _hoisted_45,
    createBaseVNode("p", null, [
      createTextVNode("当允许请求时，mutating准入 Webhook 也可以选择修改传入的对象。 这是通过在响应中使用 patch 和 patchType 字段来完成的。 当前唯一支持的 patchType 是 JSONPatch。 有关更多详细信息，请参见 "),
      createBaseVNode("a", _hoisted_46, [
        createTextVNode("JSON patch"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode('。 对于 patchType: JSONPatch，patch 字段包含一个以 base64 编码的 JSON patch 操作数组。 例如，设置 spec.replicas 的单个补丁操作将是 [{"op": "add", "path": "/spec/replicas", "value": 3}]。 如果以 Base64 形式编码，结果将是 W3sib3AiOiAiYWRkIiwgInBhdGgiOiAiL3NwZWMvcmVwbGljYXMiLCAidmFsdWUiOiAzfV0= 因此，添加该标签的 Webhook 响应为：')
    ]),
    _hoisted_47,
    createBaseVNode("p", null, [
      createTextVNode("官方webhook示例, 更多Webhook应用场景请查看 "),
      createBaseVNode("a", _hoisted_53, [
        createTextVNode("https://github.com/kubernetes/kubernetes/blob/release-1.21/test/images/agnhost/webhook/main.go"),
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    createBaseVNode("p", null, [
      createTextVNode("项目地址："),
      createBaseVNode("a", _hoisted_54, [
        createTextVNode("https://gitee.com/KubeSec/admission-controller-webhook-demo"),
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_55,
    createBaseVNode("ul", null, [
      createBaseVNode("li", null, [
        createTextVNode("测试 "),
        createBaseVNode("a", _hoisted_93, [
          createTextVNode("ValidatingWebhook"),
          createVNode(_component_ExternalLinkIcon)
        ])
      ])
    ]),
    _hoisted_94,
    createBaseVNode("p", null, [
      createTextVNode("Api身份认证、Webhook配置（匹配请求规则、ojbectSelctor、namespaceSelector等）、Mutating Webhook审计等更多信息请查看官方文档 "),
      createBaseVNode("a", _hoisted_96, [
        createTextVNode("https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/extensible-admission-controllers/#webhook-configuration"),
        createVNode(_component_ExternalLinkIcon)
      ])
    ])
  ]);
}
const Operatorkaifasan_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Operatorkaifasan.html.vue"]]);
export {
  Operatorkaifasan_html as default
};
