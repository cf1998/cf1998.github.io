import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, b as createBaseVNode, d as createTextVNode, e as createVNode, a as createStaticVNode } from "./app-53847742.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createBaseVNode(
  "h2",
  {
    id: "简介",
    tabindex: "-1"
  },
  [
    /* @__PURE__ */ createBaseVNode("a", {
      class: "header-anchor",
      href: "#简介",
      "aria-hidden": "true"
    }, "#"),
    /* @__PURE__ */ createTextVNode(" 简介")
  ],
  -1
  /* HOISTED */
);
const _hoisted_2 = {
  href: "https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/#kind-ingressroute",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_3 = {
  href: "https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/#kind-ingressroutetcp",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_4 = {
  href: "https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/#kind-ingressrouteudp",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_5 = {
  href: "https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/#kind-traefikservice",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_6 = /* @__PURE__ */ createStaticVNode('<h2 id="创建demo应用" tabindex="-1"><a class="header-anchor" href="#创建demo应用" aria-hidden="true">#</a> 创建Demo应用</h2><p>app-v1.yaml：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-v1\nspec:\n  replicas: <span class="token number">1</span>\n  selector:\n    matchLabels:\n      app: app-v1\n  template:\n    metadata:\n      labels:\n        app: app-v1\n    spec:\n      containers:\n        - name: app-v1\n          image: nginx:latest\n          lifecycle:\n            postStart:\n              exec:\n                command:  <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span>, <span class="token string">&quot;-c&quot;</span>, <span class="token string">&quot;echo Hello app-v1 &gt; /usr/share/nginx/html/index.html&quot;</span><span class="token punctuation">]</span>\n          ports:\n            - containerPort: <span class="token number">80</span>\n          resources:\n            requests:\n              cpu: 100m\n              memory: 128Mi\n            limits:\n              cpu: 200m\n              memory: 256Mi\n    \n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: app-v1\nspec:\n  selector:\n    app: app-v1\n  ports:\n    - name: http\n      port: <span class="token number">80</span>\n      targetPort: <span class="token number">80</span>\n  type: ClusterIP\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>app-v2.yaml：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-v2\nspec:\n  replicas: <span class="token number">1</span>\n  selector:\n    matchLabels:\n      app: app-v2\n  template:\n    metadata:\n      labels:\n        app: app-v2\n    spec:\n      containers:\n        - name: app-v2\n          image: nginx:latest\n          lifecycle:\n            postStart:\n              exec:\n                command:  <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span>, <span class="token string">&quot;-c&quot;</span>, <span class="token string">&quot;echo Hello app-v2 &gt; /usr/share/nginx/html/index.html&quot;</span><span class="token punctuation">]</span>\n          ports:\n            - containerPort: <span class="token number">80</span>\n          resources:\n            requests:\n              cpu: 100m\n              memory: 128Mi\n            limits:\n              cpu: 200m\n              memory: 256Mi\n    \n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: app-v2\nspec:\n  selector:\n    app: app-v2\n  ports:\n    - name: http\n      port: <span class="token number">80</span>\n      targetPort: <span class="token number">80</span>\n  type: ClusterIP\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>部署</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f app-v1.yaml</span>\ndeployment.apps/app-v1 created\nservice/app-v1 created\n<span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f app-v2.yaml </span>\ndeployment.apps/app-v2 created\nservice/app-v2 created\n \n \n \n \n<span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># kubectl get pod,svc                      </span>\nNAME                          READY   STATUS    RESTARTS   AGE\npod/app-v1-579dbbb754-nwtzw   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2m23s\npod/app-v2-7f7844f7b9-grsdk   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2m19s\n \nNAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>   AGE\nservice/app-v1       ClusterIP   <span class="token number">10.100</span>.10.94     <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>        <span class="token number">80</span>/TCP    2m23s\nservice/app-v2       ClusterIP   <span class="token number">10.104</span>.145.150   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>        <span class="token number">80</span>/TCP    2m18s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="灰度发布-加权轮询" tabindex="-1"><a class="header-anchor" href="#灰度发布-加权轮询" aria-hidden="true">#</a> 灰度发布(加权轮询)</h2><p>灰度发布也称为金丝雀发布，让一部分即将上线的服务发布到线上，观察是否达到上线要求，主要通过加权轮询的方式实现。 创建 traefikService 和 inressRoute 资源，实现 wrr 加权轮询 app-traefikService-ingressroute-wrr.yaml：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: app-ingressroute-wrr\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>traefikservice-wrr.kubesre.lc<span class="token variable">`</span></span><span class="token punctuation">)</span>\n    kind: Rule\n    services:\n    - name: wrr\n      namespace: default\n      kind: TraefikService\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: wrr\n  namespace: default\nspec:\n  weighted:\n    services:\n      - name: app-v1 \n        port: <span class="token number">80</span>\n        weight: <span class="token number">1</span>          <span class="token comment"># 定义权重</span>\n        kind: Service      <span class="token comment"># 可选，默认就是 Service</span>\n      - name: app-v2\n        port: <span class="token number">80</span>    \n        weight: <span class="token number">2</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>部署</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f app-traefikService-ingressroute-wrr.yaml</span>\ningressroute.traefik.containo.us/app-ingressroute-wrr created\ntraefikservice.traefik.containo.us/wrr created  \n \n<span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># kubectl get ingressroute</span>\nNAME                   AGE\napp-ingressroute-wrr   6s\n <span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># kubectl get TraefikService</span>\nNAME   AGE\nwrr    3m42s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加本地hosts解析</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">192.168</span>.36.139 traefikservice-wrr.kubesre.lcc\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># for i in {1..9}; do curl http://traefikservice-wrr.kubesre.lc &amp;&amp; sleep 1; done             </span>\nHello app-v1\nHello app-v2\nHello app-v2\nHello app-v1\nHello app-v2\nHello app-v2\nHello app-v1\nHello app-v2\nHello app-v2\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="会话保持-粘性会话" tabindex="-1"><a class="header-anchor" href="#会话保持-粘性会话" aria-hidden="true">#</a> 会话保持(粘性会话)</h2><p>当我们使用 traefik 的负载均衡时，默认情况下轮循多个 k8s 的 service 服务，如果用户对同一内容的多次请求，可能被转发到了不同的后端服务器。假设用户发出请求被分配至服务器 A，保存了一些信息在 session 中，该用户再次发送请求被分配到服务器 B，要用之前保存的信息，若服务器 A 和 B 之间没有 session 粘滞，那么服务器 B 就拿不到之前的信息，这样会导致一些问题。traefik 同样也支持粘性会话，可以让用户在一次会话周期内的所有请求始终转发到一台特定的后端服务器上。 创建 traefikervie 和 ingressRoute，实现基于 cookie 的会话保持 app-traefikService-ingressroute-cokie.yaml：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: app-ingressroute-cokie\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>traefikservice-cokie.kubesre.lc<span class="token variable">`</span></span><span class="token punctuation">)</span>\n    kind: Rule\n    services:\n    - name: cokie\n      namespace: default\n      kind: TraefikService\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: cokie\n  namespace: default\nspec:\n  weighted:\n    services:\n      - name: app-v1\n        port: <span class="token number">80</span>\n        weight: <span class="token number">1</span>          <span class="token comment"># 定义权重</span>\n      - name: app-v2\n        port: <span class="token number">80</span>\n        weight: <span class="token number">2</span>\n    sticky:                 <span class="token comment"># 开启粘性会话</span>\n      cookie:               <span class="token comment"># 基于cookie区分客户端     </span>\n        name: cookie   <span class="token comment"># 指定客户端请求时，包含的cookie名称</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>部署</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f  app-traefikService-ingressroute-cokie.yaml   </span>\ningressroute.traefik.containo.us/app-ingressroute-cokie created\ntraefikservice.traefik.containo.us/cokie created\n \n<span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># kubectl get ingressroute</span>\nNAME                     AGE\napp-ingressroute-cokie   5s\n<span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># kubectl get TraefikService</span>\nNAME    AGE\ncokie   8s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加本地hosts解析</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">192.168</span>.36.139 traefikservice-cokie.kubesre.lcc\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>客户端访问测试，携带 cookie</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># for i in {1..5}; do curl -b &quot;cookie=default-app-v1-80&quot; http://traefikservice-cokie.kubesre.lc/; done</span>\nHello app-v1\nHello app-v1\nHello app-v1\nHello app-v1\nHello app-v1\n<span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># for i in {1..5}; do curl -b &quot;cookie=default-app-v2-80&quot; http://traefikservice-cokie.kubesre.lc/; done</span>\nHello app-v2\nHello app-v2\nHello app-v2\nHello app-v2\nHello app-v2\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="流量复制" tabindex="-1"><a class="header-anchor" href="#流量复制" aria-hidden="true">#</a> 流量复制</h2><p>所谓的流量复制，也称为镜像服务是指将请求的流量按规则复制一份发送给其它服务，并且会忽略这部分请求的响应，这个功能在做一些压测或者问题复现的时候很有用。 创建 traefikService 和 ingressRoute app-traefikService-ingressroute-copy.yaml：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: app-ingressroute-copy\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>traefikservice-copy.kubesre.lc<span class="token variable">`</span></span><span class="token punctuation">)</span>\n    kind: Rule\n    services:\n    - name: copy\n      namespace: default\n      kind: TraefikService\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: copy\n  namespace: default\nspec:\n  mirroring:\n    name: app-v1       <span class="token comment"># 发送 100% 的请求到 app-v1</span>\n    port: <span class="token number">80</span>\n    mirrors:\n      - name: app-v2   <span class="token comment"># 然后复制 10% 的请求到 app-v2</span>\n        port: <span class="token number">80</span>\n        percent: <span class="token number">10</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>部署</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f app-traefikService-ingressroute-copy.yaml</span>\ningressroute.traefik.containo.us/app-ingressroute-copy created\ntraefikservice.traefik.containo.us/copy created\n \n<span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># kubectl get ingressroute</span>\nNAME                     AGE\napp-ingressroute-copy    7s\n<span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># kubectl get TraefikService</span>\nNAME    AGE\ncopy    13s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加本地hosts解析</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">192.168</span>.36.139 traefikservice-copy.kubesre.lc\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试结果如下： 只能看到 app-v1的返回信息，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment">#  for i in {1..9}; do curl http://traefikservice-copy.kubesre.lc &amp;&amp; sleep 1; done   </span>\nHello app-v1\nHello app-v1\nHello app-v1\nHello app-v1\nHello app-v1\nHello app-v1\nHello app-v1\nHello app-v1\nHello app-v1\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看app-v2的pod日志，发现会有10%的流量请求进来</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># kubectl logs -f app-v2-7f7844f7b9-grsdk</span>\n<span class="token punctuation">..</span>.\n<span class="token number">10.244</span>.0.5 - - <span class="token punctuation">[</span><span class="token number">23</span>/Aug/2023:02:54:36 +0000<span class="token punctuation">]</span> <span class="token string">&quot;GET / HTTP/1.1&quot;</span> <span class="token number">200</span> <span class="token number">13</span> <span class="token string">&quot;-&quot;</span> <span class="token string">&quot;curl/7.29.0&quot;</span> <span class="token string">&quot;10.244.0.1&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 36);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createTextVNode("traefik 的路由规则就可以实现 4 层和 7 层的基本负载均衡操作，使用 "),
      createBaseVNode("a", _hoisted_2, [
        createTextVNode("IngressRoute"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(),
      createBaseVNode("a", _hoisted_3, [
        createTextVNode("IngressRouteTCP"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(),
      createBaseVNode("a", _hoisted_4, [
        createTextVNode("IngressRouteUDP"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(" 资源即可。但是如果想要实现 加权轮询、流量复制 等高级操作，traefik抽象出了一个 "),
      createBaseVNode("a", _hoisted_5, [
        createTextVNode("TraefikService"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(" 资源。 此时整体流量走向为：外部流量先通过 entryPoints 端口进入 traefik，然后由 IngressRoute/IngressRouteTCP/IngressRouteUDP 匹配后进入 TraefikService，在 TraefikService 这一层实现加权轮循和流量复制，最后将请求转发至kubernetes的service。")
    ]),
    _hoisted_6
  ]);
}
const TraefikServicepian_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "TraefikServicepian.html.vue"]]);
export {
  TraefikServicepian_html as default
};
