import { _ as _export_sfc, o as openBlock, c as createElementBlock, a as createStaticVNode } from "./app-d515af8b.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="什么是微服务api-gateway" tabindex="-1"><a class="header-anchor" href="#什么是微服务api-gateway" aria-hidden="true">#</a> 什么是微服务Api Gateway</h2><p>微服务网关（Microservices Gateway）是微服务架构中的一种关键组件，它作为一个入口点，接收客户端的请求并将其路由到相应的微服务上。它起到了前端与后端微服务之间的“门户”的作用，协调整个微服务系统的请求流量和服务访问。 具备的功能如下：</p><ol><li>路由：微服务网关根据请求的路径和其他条件将请求路由到对应的微服务实例上。它能够根据不同的URL模式和规则将请求转发到相应的微服务，从而隐藏了后端微服务的实际地址和结构。</li><li>负载均衡：微服务网关可以将请求均匀地分发到多个后端微服务实例上，以保证各个实例的负载平衡，提高系统的可用性和性能。</li><li>鉴权与认证：微服务网关可以处理用户认证和鉴权的任务，确保只有经过授权的用户可以访问特定的微服务。这有助于保护后端服务免受未经授权的访问。</li><li>安全性：微服务网关可以实现一些安全措施，如防火墙、攻击防范等，保护后端微服务免受恶意攻击。</li><li>缓存：网关可以缓存一些频繁请求的数据，从而减轻后端微服务的压力，提高系统响应速度。</li><li>日志与监控：微服务网关可以记录请求和响应的日志，并提供监控指标，帮助开发团队诊断和解决问题。</li></ol><p>微服务网关简化了客户端与后端微服务之间的交互过程，减少了客户端需要处理的逻辑，并且提供了一层中间件，可以更好地管理和维护整个微服务系统。常见的微服务网关有Nginx、Spring Cloud Gateway、Kong、INgress 、Istio等。</p><h2 id="为什么要新造轮子" tabindex="-1"><a class="header-anchor" href="#为什么要新造轮子" aria-hidden="true">#</a> 为什么要新造轮子？</h2><p>正因为微服务API网关地位位如此重要，所以它一直处于兵家必争之地，传统的 IT 巨头在这个领域很早就都有布局。根据 2018 年 Gartner 发布的 API 全生命周期报告，谷歌、CA、IBM、红帽、Salesforce 都是处于领导地位的厂商，开发者更熟悉的 Kong 则处于远见者的区间内。</p><p>那么，问题就来了，为什么我们还要新造一个轮子呢？ 简单来说，这是因为当前的微服务 API 网关都不足以满足我们的需求。我们首先来看闭源的商业产品，它们的功能都很完善，覆盖了 API 的设计、多语言 SDK、文档、测试和发布等全生命周期管理，并且提供 SaaS 服务，有些还与公有云做了集成，使用起来非常方便。但同时，它们也带来了两个痛点。</p><ul><li>平台锁定问题。API 网关是业务流量的入口，它不像图片、视频等 CDN 加速的这种非业务流量可以随意迁移，API 网关上会绑定不少业务相关的逻辑。你一旦使用了闭源的方案，就很难平滑和低成本地迁移到其他平台。</li><li>无法二次开发的问题。一般的大中型企业都会有自己独特的需求，需要定制开发，但这时候你只能依靠厂商，而不能自己动手去做二次开发。</li></ul><p>这也是为什么开源的 API 网关方案开始流行的一个原因。不过，现有的开源产品也不是万能的，自身也有很多不足。</p><ul><li>赖 PostgreSQL、MySQL 等关系型数据库。这样，在配置发生变化的时候，网关节点只能轮询数据库。这不仅造成配置生效慢，也给代码增加了复杂度，让人难以理解；同时，数据库也会成为系统的单点和性能瓶颈，无法保证整体的高可用。如果你把 API 网关用于 Kubernetes 环境下，关系型数据库会显得更加笨重，不利于快速伸缩。</li><li>插件不能热加载。当你新增一个插件或者修改现有插件的代码后，必须要重载服务才能生效，这和修改 Nginx 配置后需要重载是一样的，显然会影响用户的请求。</li><li>代码结构复杂， 难以掌握。有些开源项目做了多层面向对象的封装，一些简单的逻辑也变得雾里看花。但其实，对于 API 网关这种场景，直来直去的表达会更加清晰和高效，也更有利于二次开发。</li><li>所以，我们需要一个更轻巧、对云原生和开发友好的 API 网关</li></ul><h2 id="什么是openresty" tabindex="-1"><a class="header-anchor" href="#什么是openresty" aria-hidden="true">#</a> 什么是Openresty</h2><p>OpenResty（开放式网络架构）是一个基于Nginx和LuaJIT的开源Web应用服务器，它将Nginx与Lua脚本语言的强大功能相结合，为开发者提供了一种高性能、可扩展、灵活的方式来构建Web应用和微服务。 OpenResty利用Nginx作为服务器和代理，通过嵌入Lua脚本引擎（LuaJIT）来扩展Nginx的功能。Lua是一种轻量级的脚本语言，具有简洁的语法和强大的扩展性，使得OpenResty能够实现更复杂的逻辑和定制化的功能，而不需要修改Nginx的源代码。 主要特点和优势：</p><ol><li>高性能：OpenResty利用Nginx的异步、非阻塞事件驱动架构，加上LuaJIT的高性能，能够处理大量并发请求，适用于高流量和性能要求较高的场景。</li><li>可扩展性：通过Lua脚本，开发者可以方便地扩展和定制OpenResty的功能，满足特定需求，而无需修改Nginx核心代码。</li><li>轻量级：OpenResty本身占用资源较少，安装和部署相对简单。</li><li>灵活性：OpenResty可以充当Web服务器、反向代理、负载均衡器、API网关等多种角色，适用于不同类型的应用场景。</li><li>社区支持：OpenResty拥有活跃的社区，提供丰富的插件和模块，方便开发者使用和扩展。</li></ol><p>OpenResty常用于构建高性能的Web应用、API服务和微服务网关。它可以代替传统的Web服务器，同时提供更多的灵活性和自定义功能。在大规模应用和高并发环境下，OpenResty展现出其强大的优势，被广泛应用于互联网公司、在线游戏、视频流媒体等领域。</p><h2 id="最佳实践介绍" tabindex="-1"><a class="header-anchor" href="#最佳实践介绍" aria-hidden="true">#</a> 最佳实践介绍</h2><p>言归正传，现在我们采用基于Openresty+Lua自己实现一个具备token解析认证功能的微服务Api Gateway（在Openresty中实现token解析认证，如果token无效直接拒绝）。带大家熟悉一下Openresty+Lua开发过程，流程图如下： <img src="https://img.kubesre.com/kubernetes/openresty-lua.png" alt="未命名文件.png"> 流程说明：</p><ul><li>用户输入账号密码提交请求，openresty接收到请求后，判断是login接口，则不需要校验认证，直接把请求转发授权服务</li><li>授权服务拿到用户账号密码并进行验证，认证成功后则返回token给用户</li><li>用户拿到token后，携带token访问其他请求，openresty接收到请求后，判断该接口如果需要校验认证</li><li>openresty进行对token进行校验解析，如果校验失败，则返回401给用户，如果校验成功，则把响应的请求转发给微服务</li></ul><h2 id="部署示例服务" tabindex="-1"><a class="header-anchor" href="#部署示例服务" aria-hidden="true">#</a> 部署示例服务</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n	<span class="token string">&quot;fmt&quot;</span>\n	jwt <span class="token string">&quot;github.com/dgrijalva/jwt-go&quot;</span>\n	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>\n	<span class="token string">&quot;net/http&quot;</span>\n	<span class="token string">&quot;time&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> secretKey <span class="token operator">=</span> <span class="token string">&quot;Dav7kfq3iA8S!JUj8&amp;CUkdnQe72E@Cw6&quot;</span> <span class="token comment">// Replace this with a strong secret key</span>\n\n<span class="token comment">// User struct represents a user.</span>\n<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n	ID       <span class="token builtin">int</span>    <span class="token string">`json:&quot;id&quot;`</span>\n	Username <span class="token builtin">string</span> <span class="token string">`json:&quot;username&quot;`</span>\n	Password <span class="token builtin">string</span> <span class="token string">`json:&quot;password&quot;`</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">{</span>\n	<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;kubesre&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">GenerateToken</span><span class="token punctuation">(</span>user User<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodHS256<span class="token punctuation">,</span> jwt<span class="token punctuation">.</span>MapClaims<span class="token punctuation">{</span>\n		<span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span>       user<span class="token punctuation">.</span>ID<span class="token punctuation">,</span>\n		<span class="token string">&quot;username&quot;</span><span class="token punctuation">:</span> user<span class="token punctuation">.</span>Username<span class="token punctuation">,</span>\n		<span class="token string">&quot;exp&quot;</span><span class="token punctuation">:</span>      time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Hour <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Token expires in 2 hours</span>\n	<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n	<span class="token keyword">return</span> token<span class="token punctuation">.</span><span class="token function">SignedString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">LoginHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	<span class="token keyword">var</span> input <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n		Username <span class="token builtin">string</span> <span class="token string">`json:&quot;username&quot;`</span>\n		Password <span class="token builtin">string</span> <span class="token string">`json:&quot;password&quot;`</span>\n	<span class="token punctuation">}</span>\n	<span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBindJSON</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Invalid request&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n		<span class="token keyword">return</span>\n	<span class="token punctuation">}</span>\n\n	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> user <span class="token operator">:=</span> <span class="token keyword">range</span> users <span class="token punctuation">{</span>\n		<span class="token keyword">if</span> user<span class="token punctuation">.</span>Username <span class="token operator">==</span> input<span class="token punctuation">.</span>Username <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>Password <span class="token operator">==</span> input<span class="token punctuation">.</span>Password <span class="token punctuation">{</span>\n			token<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">GenerateToken</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>\n			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n				c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Failed to generate token&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n				<span class="token keyword">return</span>\n			<span class="token punctuation">}</span>\n\n			c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">:</span> token<span class="token punctuation">}</span><span class="token punctuation">)</span>\n			<span class="token keyword">return</span>\n		<span class="token punctuation">}</span>\n	<span class="token punctuation">}</span>\n\n	c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusUnauthorized<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;登陆失败，请确认账号密码&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">UserInfo</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;云原生运维圈！&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n	<span class="token comment">// Route to handle user login</span>\n	r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> LoginHandler<span class="token punctuation">)</span>\n\n	<span class="token comment">// Routes protected by JWT authentication middleware</span>\n	<span class="token comment">// You need to include the JWT token in the &quot;Authorization&quot; header for these routes</span>\n	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/user/info&quot;</span><span class="token punctuation">,</span> UserInfo<span class="token punctuation">)</span>\n\n	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Server started at http://localhost:8080&quot;</span><span class="token punctuation">)</span>\n	r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go mod tidy\n$ go run main.go\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="部署openresty" tabindex="-1"><a class="header-anchor" href="#部署openresty" aria-hidden="true">#</a> 部署Openresty</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装仓库管理工具包：</span>\n$ yum <span class="token function">install</span> yum-utils\n\n<span class="token comment"># 添加仓库地址：</span>\n$ yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo\n\n<span class="token comment"># 安装resty:</span>\n$ yum <span class="token function">install</span> openresty-resty\n\n<span class="token comment"># 安装opm：</span>\n$ yum <span class="token function">install</span> openresty-opm\n\n<span class="token comment"># 安装Jwt组件：</span>\n<span class="token variable">$opm</span> get SkyLothar/lua-resty-jwt\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时lua-resty-jwt安装好了，可以直接使用了。</p><h2 id="配置openresty" tabindex="-1"><a class="header-anchor" href="#配置openresty" aria-hidden="true">#</a> 配置Openresty</h2><p>Auth-JWT插件：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>$ cat <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>openresty<span class="token operator">/</span>lualib<span class="token operator">/</span>resty<span class="token operator">/</span>jwt<span class="token punctuation">.</span>lua<span class="token punctuation">;</span>\n<span class="token keyword">local</span> auth_token <span class="token operator">=</span> ngx<span class="token punctuation">.</span>var<span class="token punctuation">.</span>http_token\n<span class="token comment">--引入json库</span>\n<span class="token keyword">local</span> secret<span class="token operator">=</span> <span class="token string">&quot;Dav7kfq3iA8S!JUj8&amp;CUkdnQe72E@Cw6&quot;</span>\n<span class="token keyword">local</span> cjson <span class="token operator">=</span> require <span class="token string">&quot;cjson&quot;</span>\n<span class="token keyword">local</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;resty.jwt&quot;</span><span class="token punctuation">)</span>\n\n<span class="token comment">--ngx.say(auth_token)</span>\n<span class="token keyword">if</span> auth_token <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>\n   <span class="token keyword">local</span> response <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n   response<span class="token punctuation">[</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">401</span>\n   response<span class="token punctuation">[</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;口令不存在&quot;</span>\n   ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>cjson<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>\n   ngx<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>code<span class="token punctuation">)</span>\n<span class="token keyword">else</span>\n  <span class="token keyword">local</span> jwt_obj <span class="token operator">=</span> jwt<span class="token punctuation">:</span><span class="token function">verify</span><span class="token punctuation">(</span>secret<span class="token punctuation">,</span> auth_token<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> jwt_obj<span class="token punctuation">.</span>verified <span class="token operator">==</span> <span class="token keyword">false</span> <span class="token keyword">then</span>\n        <span class="token keyword">local</span> response <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n        response<span class="token punctuation">[</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">401</span>\n        response<span class="token punctuation">[</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;令牌无效&quot;</span>\n        ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>cjson<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        ngx<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>code<span class="token punctuation">)</span>\n   <span class="token keyword">else</span>\n     ngx<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;@user&#39;</span><span class="token punctuation">)</span>\n   <span class="token keyword">end</span>\n<span class="token keyword">end</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置Openresty：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> /usr/local/openresty/nginx/conf/nginx.conf\n<span class="token punctuation">..</span>.\n<span class="token comment"># 需要认证</span>\nlocation /user/info <span class="token punctuation">{</span>\n              <span class="token comment"># 引入jwt.lua扩展</span>\n              content_by_lua_file /usr/local/openresty/lualib/resty/jwt.lua<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n<span class="token comment"># 不需要认证</span>\nlocation /login <span class="token punctuation">{</span>\n   proxy_pass http://192.168.40.125:8080<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nlocation @user <span class="token punctuation">{</span>\n  proxy_pass http://192.168.40.125:8080<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新加载Openresty生效：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ /usr/local/openresty/bin/openresty <span class="token parameter variable">-t</span>\nnginx: the configuration <span class="token function">file</span> /usr/local/openresty/nginx/conf/nginx.conf syntax is ok\nnginx: configuration <span class="token function">file</span> /usr/local/openresty/nginx/conf/nginx.conf <span class="token builtin class-name">test</span> is successful\n$  /usr/local/openresty/bin/openresty <span class="token parameter variable">-s</span> reload\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="验证" tabindex="-1"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h2><p>用户登陆成功，返回token（输出账户密码登陆并返回Token）： <img src="https://img.kubesre.com/kubernetes/openresty/1.png" alt="image.png"></p><p>如果不传入token，请求192.168.1.102/user/info（会返回口令不存在）： <img src="https://img.kubesre.com/kubernetes/openresty/2.png" alt="image.png"> 如果传入错误token，请求192.168.1.102/user/info（会返回口令无效）： <img src="https://img.kubesre.com/kubernetes/openresty/3.png" alt="image.png"> 传入正确的token，请求192.168.1.102/user/info（正常返回内容） <img src="https://img.kubesre.com/kubernetes/openresty/4.png" alt="image.png"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文介绍了微服务Gateway Api以及我们为什么要造轮子等问题，并通过openresty+lua实现了JWT解析认证功能的小案例，并对openresty扩展功能有了一定了解，接下来文章内容中会分享更多企业级实战案例，请敬请期待！</p>', 36);
const _hoisted_37 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_37);
}
const jiyuopenrestyLuashixianweifuwuApiGateway_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "jiyuopenrestyLuashixianweifuwuApiGateway.html.vue"]]);
export {
  jiyuopenrestyLuashixianweifuwuApiGateway_html as default
};
