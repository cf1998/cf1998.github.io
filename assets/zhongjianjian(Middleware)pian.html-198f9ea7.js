import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, b as createBaseVNode, d as createTextVNode, e as createVNode, a as createStaticVNode } from "./app-45f9d385.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>Traefik Middlewares 是一个处于路由和后端服务之前的中间件，在外部流量进入 Traefik，且路由规则匹配成功后，将流量发送到对应的后端服务前，先将其发给中间件进行一系列处理（类似于过滤器链 Filter，进行一系列处理），例如，添加 Header 头信息、鉴权、流量转发、处理访问路径前缀、IP 白名单等等，经过一个或者多个中间件处理完成后，再发送给后端服务，这个就是中间件的作用。 Traefik内置了很多不同功能的Middleware，主要是针对HTTP和TCP，这里挑选几个比较常用的进行演示。</p><h2 id="重定向-redirectscheme" tabindex="-1"><a class="header-anchor" href="#重定向-redirectscheme" aria-hidden="true">#</a> 重定向-redirectScheme</h2><p>定义ingressroute，包含一个自动将 http 跳转到 https 的中间件 接上篇环境，存在于两个ingressroute，一个http，一个https</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl get ingressroute</span>\nNAME                     AGE\ningressroute-app         73m\ningressroute-app-https   64m\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来创建重定向的Middleware ingressroute-redirect-https-middleware.yaml：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>apiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: redirect-https-middleware\nspec:\n  redirectScheme:\n    scheme: https   <span class="token comment"># 自动跳转到 https</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看部署情况</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f  ingressroute-redirect-https-middleware.yaml</span>\nmiddleware.traefik.containo.us/redirect-https-middleware created\n \n<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl get middleware</span>\nNAME                        AGE\nredirect-https-middleware   23s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用中间件，修改ingressroute-app.yaml</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: ingressroute-app\nspec:\n  entryPoints:\n  - web\n  routes:\n  - match: Host<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>ingressroute.kubesre.lc<span class="token variable">`</span></span><span class="token punctuation">)</span>  <span class="token comment"># 域名</span>\n    kind: Rule\n    services:\n      - name: ingressroute-app  <span class="token comment"># 与svc的name一致</span>\n        port: <span class="token number">80</span>                <span class="token comment"># 与svc的port name一致</span>\n    middlewares:\n      - name: redirect-https-middleware   <span class="token comment"># 指定使用中间件，完成http强制跳转至https</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>部署</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f  ingressroute-app.yaml    </span>\ndeployment.apps/ingressroute-app unchanged\nservice/ingressroute-app unchanged\ningressroute.traefik.containo.us/ingressroute-app configured\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 13);
const _hoisted_14 = {
  href: "https://ingressroute.kubesre.lc/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_15 = /* @__PURE__ */ createBaseVNode(
  "img",
  {
    src: "https://img.kubesre.com/kubesre/20230830/1.png",
    alt: "image.png"
  },
  null,
  -1
  /* HOISTED */
);
const _hoisted_16 = /* @__PURE__ */ createStaticVNode('<h2 id="白名单-ipwhitelist" tabindex="-1"><a class="header-anchor" href="#白名单-ipwhitelist" aria-hidden="true">#</a> 白名单-IPWhiteList</h2><p>为提高安全性，通常情况下一些管理员界面会设置 ip 访问白名单，只希望个别用户可以访问。 创建Middleware ingressroute-ip-white-list-middleware.yaml：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>apiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: ip-white-list-middleware\nspec:\n  ipWhiteList:\n    sourceRange:\n      - <span class="token number">127.0</span>.0.1/32\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看部署情况</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f  ingressroute-ip-white-list-middleware.yaml</span>\nmiddleware.traefik.containo.us/ip-white-list-middleware created\n \n<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl get middleware</span>\nNAME                        AGE\nip-white-list-middleware    12s\nredirect-https-middleware   7m27s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改ingressroute-app.yaml 使用白名单的中间件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: ingressroute-app\nspec:\n  entryPoints:\n  - web\n  routes:\n  - match: Host<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>ingressroute.kubesre.lc<span class="token variable">`</span></span><span class="token punctuation">)</span>  <span class="token comment"># 域名</span>\n    kind: Rule\n    services:\n      - name: ingressroute-app  <span class="token comment"># 与svc的name一致</span>\n        port: <span class="token number">80</span>                <span class="token comment"># 与svc的port name一致</span>\n    middlewares:\n      - name: ip-white-list-middleware   <span class="token comment"># 指定使用白名单的中间件</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>部署</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f  ingressroute-app.yaml   </span>\ndeployment.apps/ingressroute-app unchanged\nservice/ingressroute-app unchanged\ningressroute.traefik.containo.us/ingressroute-app configured\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># curl -I  http://ingressroute.kubesre.lc</span>\nHTTP/1.1 <span class="token number">403</span> Forbidden\nDate: Wed, <span class="token number">23</span> Aug <span class="token number">2023</span> 00:35:25 GMT\nContent-Length: <span class="token number">9</span>\nContent-Type: text/plain<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改白名单内IP地址：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>apiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: ip-white-list-middleware\nspec:\n  ipWhiteList:\n    sourceRange:\n    - <span class="token number">172.16</span>.0.0/16\n    - <span class="token number">192.168</span>.0.0/16\n    - <span class="token number">172.168</span>.0.0/16\n    - <span class="token number">10.0</span>.0.0/8\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>部署后再次测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># curl http://ingressroute.kubesre.lc/ -i          </span>\nHTTP/1.1 <span class="token number">200</span> OK\nAccept-Ranges: bytes\nContent-Length: <span class="token number">23</span>\nContent-Type: text/html\nDate: Wed, <span class="token number">23</span> Aug <span class="token number">2023</span> 01:34:08 GMT\nEtag: <span class="token string">&quot;64e46cbf-17&quot;</span>\nLast-Modified: Tue, <span class="token number">22</span> Aug <span class="token number">2023</span> 08:07:27 GMT\nServer: nginx/1.25.2\n \nHello ingressroute app\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="用户认证-basicauth" tabindex="-1"><a class="header-anchor" href="#用户认证-basicauth" aria-hidden="true">#</a> 用户认证-basicAuth</h2><p>通常企业安全要求规范除了要对管理员页面限制访问ip外，还需要添加账号密码认证，而 traefik 默认没有提供账号密码认证功能，此时就可以通过BasicAuth 中间件完成用户认证，只有认证通过的授权用户才可以访问页面。 安装 htpasswd 工具生成密码文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># yum install -y httpd</span>\n<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># htpasswd -bc basic-auth-secret admin admin</span>\nAdding password <span class="token keyword">for</span> user admin\n<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl create secret generic basic-auth-secret --from-file=basic-auth-secret</span>\nsecret/basic-auth-secret created\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建Middleware ingressroute-basic-auth-middleware.yaml：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>apiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: basic-auth-middleware\nspec:\n  basicAuth:\n    secret: basic-auth-secret\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看部署情况</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f  ingressroute-basic-auth-middleware.yaml</span>\nmiddleware.traefik.containo.us/basic-auth-middleware created\n \n<span class="token punctuation">[</span>root@localhost traefik<span class="token punctuation">]</span><span class="token comment"># kubectl get middleware</span>\nNAME                        AGE\nbasic-auth-middleware       20s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改ingressroute-app.yaml 使用白名单的中间件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: ingressroute-app\nspec:\n  entryPoints:\n  - web\n  routes:\n  - match: Host<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>ingressroute.kubesre.lc<span class="token variable">`</span></span><span class="token punctuation">)</span>  <span class="token comment"># 域名</span>\n    kind: Rule\n    services:\n      - name: ingressroute-app  <span class="token comment"># 与svc的name一致</span>\n        port: <span class="token number">80</span>                <span class="token comment"># 与svc的port name一致</span>\n    middlewares:\n      - name: basic-auth-middleware   <span class="token comment"># 指定使用认证的中间件</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>部署</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f  ingressroute-app.yaml   </span>\ndeployment.apps/ingressroute-app unchanged\nservice/ingressroute-app unchanged\ningressroute.traefik.containo.us/ingressroute-app configured\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试</p><p><img src="https://img.kubesre.com/kubesre/20230830/2.png" alt="image.png"></p><p>输入admin/admin后访问成功</p><p><img src="https://img.kubesre.com/kubesre/20230830/3.png" alt="image.png"></p><h2 id="更多中间件" tabindex="-1"><a class="header-anchor" href="#更多中间件" aria-hidden="true">#</a> 更多中间件</h2>', 31);
const _hoisted_47 = {
  href: "https://doc.traefik.io/traefik/middlewares/overview/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_48 = /* @__PURE__ */ createBaseVNode(
  "ul",
  null,
  [
    /* @__PURE__ */ createBaseVNode("li", null, "去除请求路径前缀"),
    /* @__PURE__ */ createBaseVNode("li", null, "修改请求/响应头信息"),
    /* @__PURE__ */ createBaseVNode("li", null, "限流"),
    /* @__PURE__ */ createBaseVNode("li", null, "熔断"),
    /* @__PURE__ */ createBaseVNode("li", null, "自定义错误页"),
    /* @__PURE__ */ createBaseVNode("li", null, "数据压缩"),
    /* @__PURE__ */ createBaseVNode("li", null, "...")
  ],
  -1
  /* HOISTED */
);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createTextVNode("访问测试 "),
      createBaseVNode("a", _hoisted_14, [
        createTextVNode("http://ingressroute.kubesre.lc/"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(" ，可以看到，当访问http协议站点的时候，自动302跳转到了https "),
      _hoisted_15
    ]),
    _hoisted_16,
    createBaseVNode("p", null, [
      createTextVNode("更多中间件请参考官网："),
      createBaseVNode("a", _hoisted_47, [
        createTextVNode("https://doc.traefik.io/traefik/middlewares/overview/"),
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_48
  ]);
}
const zhongjianjian_Middleware_pian_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "zhongjianjian(Middleware)pian.html.vue"]]);
export {
  zhongjianjian_Middleware_pian_html as default
};
