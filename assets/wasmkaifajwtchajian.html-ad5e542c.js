import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, b as createBaseVNode, d as createTextVNode, e as createVNode, a as createStaticVNode } from "./app-ac7ac36b.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="什么是higress" tabindex="-1"><a class="header-anchor" href="#什么是higress" aria-hidden="true">#</a> 什么是Higress</h2><p>Higress是基于阿里内部的Envoy Gateway实践沉淀、以开源Istio + Envoy为核心构建的下一代云原生网关，实现了流量网关 + 微服务网关 + 安全网关三合一的高集成能力，深度集成Dubbo、Nacos、Sentinel等微服务技术栈，能够帮助用户极大的降低网关的部署及运维成本且能力不打折；在标准上全面支持Ingress与Gateway API，积极拥抱云原生下的标准API规范；同时，Higress Controller也支持Nginx Ingress平滑迁移，帮助用户零成本快速迁移到Higress。 <img src="https://img.kubesre.com/kubesre/20230811/1.png" alt="image.png"></p><h2 id="什么是wasm" tabindex="-1"><a class="header-anchor" href="#什么是wasm" aria-hidden="true">#</a> 什么是WASM</h2><p>WASM代表&quot;WebAssembly&quot;，它是一种可移植、低级别的二进制指令格式，旨在作为Web浏览器中的一种新型执行环境而推出。它的设计目标是为Web上的高性能应用提供一种通用的编译目标，使开发人员能够在不同平台和架构上运行高效的代码。 WASM的主要特点包括：</p><ol><li>性能： WASM是一种二进制格式，可以高效地编码和解码，从而在浏览器中实现比传统JavaScript更快的执行速度。这使得WASM特别适用于需要高性能的Web应用，如游戏、图像处理和模拟器。</li><li>安全性： 由于WASM是低级别的虚拟机，它提供了一种隔离和受控的执行环境。这意味着它可以在浏览器中安全地运行，防止恶意代码对用户计算机的损害。</li><li>跨平台： WASM可以在不同的体系结构和操作系统上运行，使开发人员能够编写一次代码，然后在多个平台上运行，而无需进行大量的修改和调整。</li><li>语言无关性： 尽管WASM可以从多种编程语言中生成，但它与特定的编程语言无关。这使得开发人员能够选择他们熟悉的语言，并将其编译成WASM以在Web上运行。</li><li>适用范围： 虽然WASM主要针对Web浏览器中的Web应用程序，但它不仅限于此。它还可以在其他领域，如服务器端、嵌入式系统等中发挥作用。</li></ol><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2><p>言归正传，现在我们基于Wasm为Higress开发一个JWT认证插件，实现在Higress中进行token解析认证，如果Token无效或不存在直接拒绝返回401，Token有效继续访问后端微服务。利用最佳实践的方式带大家熟悉一下基于Wsam开发Higress插件的整个过程，流程图如下： <img src="https://img.kubesre.com/kubesre/20230811/2.png" alt="openresty+lua解析Token.png"> 这样做的好处：</p><ul><li>下游微服务无需重复进行认证，减少了重复的工作，也提高了系统的安全性</li><li>避免了下游服务重复解析token来获取用户信息的需求。减少了不必要的开销</li></ul><h2 id="higress-部署" tabindex="-1"><a class="header-anchor" href="#higress-部署" aria-hidden="true">#</a> Higress 部署</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 环境为Kubernetes v1.27.3</span>\n$ kubectl get nodes\nNAME                 STATUS   ROLES           AGE   VERSION\nkind-control-plane   Ready    control-plane   9h    v1.27.3\n\n<span class="token comment"># 通过Helm安装</span>\n$ helm repo <span class="token function">add</span> higress.io https://higress.io/helm-charts\n\n<span class="token string">&quot;higress.io&quot;</span> already exists with the same configuration, skipping\n$ helm <span class="token function">install</span> higress <span class="token parameter variable">-n</span> higress-system higress.io/higress --create-namespace --render-subchart-notes <span class="token parameter variable">--set</span> <span class="token assign-left variable">global.local</span><span class="token operator">=</span>true <span class="token parameter variable">--set</span> higress-console.o11y.enabled<span class="token operator">=</span>false  <span class="token parameter variable">--set</span> higress-console.domain<span class="token operator">=</span>console.higress.io <span class="token parameter variable">--set</span> higress-console.admin.password.value<span class="token operator">=</span>admin\n\nNAME: higress\nLAST DEPLOYED: Thu Aug <span class="token number">10</span> <span class="token number">20</span>:37:40 <span class="token number">2023</span>\nNAMESPACE: higress-system\nSTATUS: deployed\nREVISION: <span class="token number">1</span>\nTEST SUITE: None\nNOTES:\nHigress successfully installed<span class="token operator">!</span>\n\nTo learn <span class="token function">more</span> about the release, try:\n  $ helm status higress <span class="token parameter variable">-n</span> higress-system\n  $ helm get all higress <span class="token parameter variable">-n</span> higress-system\n\n<span class="token number">1</span>. Use the following URL to access the console:\n  http://console.higress.io/\n  Since Higress Console is running <span class="token keyword">in</span> <span class="token builtin class-name">local</span> mode, you may need to <span class="token function">add</span> the following line into your hosts <span class="token function">file</span> before accessing the console:\n  <span class="token number">127.0</span>.0.1 console.higress.io\n<span class="token number">2</span>. Use following commands to get the credential and login:\n  <span class="token builtin class-name">export</span> <span class="token assign-left variable">ADMIN_USERNAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>kubectl get secret <span class="token parameter variable">--namespace</span> higress-system higress-console <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&quot;{.data.adminUsername}&quot;</span> <span class="token operator">|</span> base64 <span class="token parameter variable">-d</span><span class="token variable">)</span></span>\n  <span class="token builtin class-name">export</span> <span class="token assign-left variable">ADMIN_PASSWORD</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>kubectl get secret <span class="token parameter variable">--namespace</span> higress-system higress-console <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&quot;{.data.adminPassword}&quot;</span> <span class="token operator">|</span> base64 <span class="token parameter variable">-d</span><span class="token variable">)</span></span>\n  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;Username: <span class="token variable">${ADMIN_USERNAME}</span><span class="token entity" title="\\n">\\n</span>Password: <span class="token variable">${ADMIN_PASSWORD}</span>&quot;</span>\n  NOTE: If this is an upgrade release, your current password won<span class="token string">&#39;t be changed.\n3. If you&#39;</span>d like to change the credential, you can edit this secret with new values: higress-system/higress-console\n\n<span class="token comment"># 查看密码</span>\n$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">ADMIN_USERNAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>kubectl get secret <span class="token parameter variable">--namespace</span> higress-system higress-console <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&quot;{.data.adminUsername}&quot;</span> <span class="token operator">|</span> base64 <span class="token parameter variable">-d</span><span class="token variable">)</span></span>\n$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">ADMIN_PASSWORD</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>kubectl get secret <span class="token parameter variable">--namespace</span> higress-system higress-console <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&quot;{.data.adminPassword}&quot;</span> <span class="token operator">|</span> base64 <span class="token parameter variable">-d</span><span class="token variable">)</span></span>\n$ <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;Username: <span class="token variable">${ADMIN_USERNAME}</span><span class="token entity" title="\\n">\\n</span>Password: <span class="token variable">${ADMIN_PASSWORD}</span>&quot;</span>\nUsername: admin\nPassword: admin\n\n<span class="token comment"># 配置Hosts</span>\n $ <span class="token function">cat</span> /etc/hosts\n <span class="token number">127.0</span>.0.1 demo.kubesre.com console.higress.io\n\n<span class="token comment"># 转发一下端口本地可以访问</span>\n$ kubectl  port-forward service/higress-gateway <span class="token parameter variable">-n</span> higress-system <span class="token number">80</span>:80\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 10);
const _hoisted_11 = {
  href: "http://console.higress.io/plugin",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_12 = /* @__PURE__ */ createBaseVNode(
  "p",
  null,
  [
    /* @__PURE__ */ createBaseVNode("img", {
      src: "https://img.kubesre.com/kubesre/20230811/3.png",
      alt: "image.png"
    }),
    /* @__PURE__ */ createTextVNode(" 出现如上界面说明安装成功！")
  ],
  -1
  /* HOISTED */
);
const _hoisted_13 = /* @__PURE__ */ createBaseVNode(
  "h2",
  {
    id: "开发环境搭建",
    tabindex: "-1"
  },
  [
    /* @__PURE__ */ createBaseVNode("a", {
      class: "header-anchor",
      href: "#开发环境搭建",
      "aria-hidden": "true"
    }, "#"),
    /* @__PURE__ */ createTextVNode(" 开发环境搭建")
  ],
  -1
  /* HOISTED */
);
const _hoisted_14 = {
  href: "https://go.dev/doc/install",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_15 = {
  href: "https://tinygo.org/getting-started/install/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_16 = {
  href: "https://github.com/WebAssembly/binaryen.git",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_17 = /* @__PURE__ */ createStaticVNode('<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装golang</span>\n$ brew <span class="token function">install</span> go\n$ go version\ngo version go1.19.9 darwin/arm64\n\n<span class="token comment"># TinyGo</span>\n$ <span class="token function">wget</span> https://github.com/tinygo-org/tinygo/releases/download/v0.25.0/tinygo0.25.0.darwin-amd64.tar.gz\n$ <span class="token function">tar</span> <span class="token parameter variable">-zxf</span> tinygo0.25.0.darwin-amd64.tar.gz\n$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/tmp/tinygo/bin:<span class="token environment constant">$PATH</span>\n$ tinygo version\ntinygo version <span class="token number">0.28</span>.0-dev-5c2753e darwin/amd64 <span class="token punctuation">(</span>using go version go1.19.9 and LLVM version <span class="token number">15.0</span>.0<span class="token punctuation">)</span>\n\n<span class="token comment"># Wasm-opt</span>\n$ <span class="token function">wget</span> https://github.com/WebAssembly/binaryen/releases/download/version_114/binaryen-version_114-arm64-macos.tar.gz\n$ <span class="token function">tar</span> binaryen-version_114-arm64-macos.tar.gz\n$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/tmp/binaryen/bin:<span class="token environment constant">$PATH</span>\n$ wasm-opt <span class="token parameter variable">--version</span>\nwasm-opt version <span class="token number">114</span> <span class="token punctuation">(</span>version_114<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此为止，开发环境搭建完毕：</p><h2 id="jwt认证插件开发" tabindex="-1"><a class="header-anchor" href="#jwt认证插件开发" aria-hidden="true">#</a> JWT认证插件开发</h2><p>初始化工程：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 初始化工程</span>\n$  <span class="token function">mkdir</span> jwt-plugin\n$  <span class="token builtin class-name">cd</span> jwt-plugin \n$  go mod init jwt-plugin \ngo: creating new go.mod: module jwt-plugin\n<span class="token comment"># 设置代理</span>\n$ go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://proxy.golang.com.cn,direct\n<span class="token comment"># 下载依赖性</span>\n$ go get github.com/tetratelabs/proxy-wasm-go-sdk\n$ go get github.com/alibaba/higress/plugins/wasm-go@main\n$ go get github.com/tidwall/gjson\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插件代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n	<span class="token string">&quot;encoding/json&quot;</span>\n	<span class="token string">&quot;github.com/alibaba/higress/plugins/wasm-go/pkg/wrapper&quot;</span>\n	jwt <span class="token string">&quot;github.com/dgrijalva/jwt-go&quot;</span>\n	<span class="token string">&quot;github.com/tetratelabs/proxy-wasm-go-sdk/proxywasm&quot;</span>\n	<span class="token string">&quot;github.com/tetratelabs/proxy-wasm-go-sdk/proxywasm/types&quot;</span>\n	<span class="token string">&quot;github.com/tidwall/gjson&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// 自定义插件配置</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	wrapper<span class="token punctuation">.</span><span class="token function">SetCtx</span><span class="token punctuation">(</span>\n		<span class="token string">&quot;jwt-plugin&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 配置插件名称</span>\n		wrapper<span class="token punctuation">.</span><span class="token function">ParseConfigBy</span><span class="token punctuation">(</span>parseConfig<span class="token punctuation">)</span><span class="token punctuation">,</span>\n		wrapper<span class="token punctuation">.</span><span class="token function">ProcessRequestHeadersBy</span><span class="token punctuation">(</span>onHttpRequestHeaders<span class="token punctuation">)</span><span class="token punctuation">,</span>\n	<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> Config <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n	TokenSecretKey <span class="token builtin">string</span> <span class="token comment">// 解析Token SecretKey</span>\n	TokenHeaders   <span class="token builtin">string</span> <span class="token comment">// 定义获取Token请求头名称</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> Res <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n	Code <span class="token builtin">int</span>    <span class="token string">`json:&quot;code&quot;`</span>  <span class="token comment">// 返回状态码</span>\n	Msg  <span class="token builtin">string</span> <span class="token string">`json:&quot;msg&quot;`</span>  <span class="token comment">// 返回信息</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">parseConfig</span><span class="token punctuation">(</span>json gjson<span class="token punctuation">.</span>Result<span class="token punctuation">,</span> config <span class="token operator">*</span>Config<span class="token punctuation">,</span> log wrapper<span class="token punctuation">.</span>Log<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n	<span class="token comment">// 解析出配置，更新到config中</span>\n	config<span class="token punctuation">.</span>TokenSecretKey <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;token_secret_key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n	config<span class="token punctuation">.</span>TokenHeaders <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;token_headers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n	<span class="token keyword">return</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">onHttpRequestHeaders</span><span class="token punctuation">(</span>ctx wrapper<span class="token punctuation">.</span>HttpContext<span class="token punctuation">,</span> config Config<span class="token punctuation">,</span> log wrapper<span class="token punctuation">.</span>Log<span class="token punctuation">)</span> types<span class="token punctuation">.</span>Action <span class="token punctuation">{</span>\n	<span class="token keyword">var</span> res Res\n	<span class="token keyword">if</span> config<span class="token punctuation">.</span>TokenHeaders <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token operator">||</span> config<span class="token punctuation">.</span>TokenSecretKey <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>\n		res<span class="token punctuation">.</span>Code <span class="token operator">=</span> <span class="token number">401</span>\n		res<span class="token punctuation">.</span>Msg <span class="token operator">=</span> <span class="token string">&quot;参数不足&quot;</span>\n		data<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n		<span class="token boolean">_</span> <span class="token operator">=</span> proxywasm<span class="token punctuation">.</span><span class="token function">SendHttpResponse</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n		<span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue\n	<span class="token punctuation">}</span>\n\n	token<span class="token punctuation">,</span> err <span class="token operator">:=</span> proxywasm<span class="token punctuation">.</span><span class="token function">GetHttpRequestHeader</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>TokenHeaders<span class="token punctuation">)</span>  <span class="token comment">// 获取Token</span>\n	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n		res<span class="token punctuation">.</span>Code <span class="token operator">=</span> <span class="token number">401</span>\n		res<span class="token punctuation">.</span>Msg <span class="token operator">=</span> <span class="token string">&quot;认证失败&quot;</span>\n		data<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n		<span class="token boolean">_</span> <span class="token operator">=</span> proxywasm<span class="token punctuation">.</span><span class="token function">SendHttpResponse</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n		<span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue\n	<span class="token punctuation">}</span>\n	valid <span class="token operator">:=</span> <span class="token function">ParseTokenValid</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> config<span class="token punctuation">.</span>TokenSecretKey<span class="token punctuation">)</span>\n	<span class="token keyword">if</span> valid <span class="token punctuation">{</span>\n		<span class="token boolean">_</span> <span class="token operator">=</span> proxywasm<span class="token punctuation">.</span><span class="token function">ResumeHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n		<span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionPause\n	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n		res<span class="token punctuation">.</span>Code <span class="token operator">=</span> <span class="token number">401</span>\n		res<span class="token punctuation">.</span>Msg <span class="token operator">=</span> <span class="token string">&quot;认证失败&quot;</span>\n		data<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n		<span class="token boolean">_</span> <span class="token operator">=</span> proxywasm<span class="token punctuation">.</span><span class="token function">SendHttpResponse</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n		<span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue\n	<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 认证解析Token</span>\n<span class="token keyword">func</span> <span class="token function">ParseTokenValid</span><span class="token punctuation">(</span>tokenString<span class="token punctuation">,</span> TokenSecretKey <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>\n	token<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>tokenString<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>token <span class="token operator">*</span>jwt<span class="token punctuation">.</span>Token<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n		<span class="token comment">// 在这里提供用于验证签名的密钥</span>\n		<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>TokenSecretKey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>\n	<span class="token punctuation">}</span><span class="token punctuation">)</span>\n	<span class="token keyword">return</span> token<span class="token punctuation">.</span>Valid\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>HTTP 处理挂载点：</strong> 代码中通过 wrapper.ProcessRequestHeadersBy将自定义函数 onHttpRequestHeaders用于HTTP 请求头处理阶段处理请求。除此之外，还可以通过下面方式，设置其他阶段的自定义处理函数</p><table><thead><tr><th>HTTP 处理阶段</th><th>触发时机</th><th>挂载方法</th></tr></thead><tbody><tr><td>HTTP 请求头处理阶段</td><td>网关接收到客户端发送来的请求头数据时</td><td>wrapper.ProcessRequestHeadersBy</td></tr><tr><td>HTTP 请求 Body 处理阶段</td><td>网关接收到客户端发送来的请求 Body 数据时</td><td>wrapper.ProcessRequestBodyBy</td></tr><tr><td>HTTP 应答头处理阶段</td><td>网关接收到后端服务响应的应答头数据时</td><td>wrapper.ProcessResponseHeadersBy</td></tr><tr><td>HTTP 应答 Body 处理阶段</td><td>网关接收到后端服务响应的应答 Body 数据时</td><td>wrapper.ProcessResponseBodyBy</td></tr></tbody></table><p><strong>工具方法：</strong> 代码中的 proxywasm.SendHttpResponse是插件 SDK 提供的两个工具方法</p><table><thead><tr><th>分类</th><th>方法名称</th><th>用途</th><th>可以生效的HTTP 处理阶段</th></tr></thead><tbody><tr><td>请求头处理</td><td>GetHttpRequestHeaders</td><td>获取客户端请求的全部请求头</td><td>HTTP 请求头处理阶段</td></tr><tr><td></td><td>ReplaceHttpRequestHeaders</td><td>替换客户端请求的全部请求头</td><td>HTTP 请求头处理阶段</td></tr><tr><td></td><td>GetHttpRequestHeader</td><td>获取客户端请求的指定请求头</td><td>HTTP 请求头处理阶段</td></tr><tr><td></td><td>RemoveHttpRequestHeader</td><td>移除客户端请求的指定请求头</td><td>HTTP 请求头处理阶段</td></tr><tr><td></td><td>ReplaceHttpRequestHeader</td><td>替换客户端请求的指定请求头</td><td>HTTP 请求头处理阶段</td></tr><tr><td></td><td>AddHttpRequestHeader</td><td>新增一个客户端请求头</td><td>HTTP 请求头处理阶段</td></tr><tr><td>请求 Body 处理</td><td>GetHttpRequestBody</td><td>获取客户端请求 Body</td><td>HTTP 请求 Bod下一代云原生网关Higress：基于Wasm开发JWT认证插件y 处理阶段</td></tr><tr><td></td><td>AppendHttpRequestBody</td><td>将指定的字节串附加到客户端请求 Body 末尾</td><td>HTTP 请求 Body 处理阶段</td></tr><tr><td></td><td>PrependHttpRequestBody</td><td>将指定的字节串附加到客户端请求 Body 的开头</td><td>HTTP 请求 Body 处理阶段</td></tr><tr><td></td><td>ReplaceHttpRequestBody</td><td>替换客户端请求 Body</td><td>HTTP 请求 Body 处理阶段</td></tr><tr><td>应答头处理</td><td>GetHttpResponseHeaders</td><td>获取后端响应的全部应答头</td><td>HTTP 应答头处理阶段</td></tr><tr><td></td><td>ReplaceHttpResponseHeaders</td><td>替换后端响应的全部应答头</td><td>HTTP 应答头处理阶段</td></tr><tr><td></td><td>GetHttpResponseHeader</td><td>获取后端响应的指定应答头</td><td>HTTP 应答头处理阶段</td></tr><tr><td></td><td>RemoveHttpResponseHeader</td><td>移除后端响应的指定应答头</td><td>HTTP 应答头处理阶段</td></tr><tr><td></td><td>ReplaceHttpResponseHeader</td><td>替换后端响应的指定应答头</td><td>HTTP 应答头处理阶段</td></tr><tr><td></td><td>AddHttpResponseHeader</td><td>新增一个后端响应头</td><td>HTTP 应答头处理阶段</td></tr><tr><td>应答 Body 处理</td><td>GetHttpResponseBody</td><td>获取客户端请求 Body</td><td>HTTP 应答 Body 处理阶段</td></tr><tr><td></td><td>AppendHttpResponseBody</td><td>将指定的字节串附加到后端响应 Body 末尾</td><td>HTTP 应答 Body 处理阶段</td></tr><tr><td></td><td>PrependHttpResponseBody</td><td>将指定的字节串附加到后端响应 Body 的开头</td><td>HTTP 应答 Body 处理阶段</td></tr><tr><td></td><td>ReplaceHttpResponseBody</td><td>替换后端响应 Body</td><td>HTTP 应答 Body 处理阶段</td></tr><tr><td>HTTP 调用</td><td>DispatchHttpCall</td><td>发送一个 HTTP 请求</td><td>-</td></tr><tr><td></td><td>GetHttpCallResponseHeaders</td><td>获取 DispatchHttpCall 请求响应的应答头</td><td>-</td></tr><tr><td></td><td>GetHttpCallResponseBody</td><td>获取 DispatchHttpCall 请求响应的应答 Body</td><td>-</td></tr><tr><td></td><td>GetHttpCallResponseTrailers</td><td>获取 DispatchHttpCall 请求响应的应答 Trailer</td><td>-</td></tr><tr><td>直接响应</td><td>SendHttpResponse</td><td>直接返回一个特定的 HTTP 应答</td><td>-</td></tr><tr><td>流程恢复</td><td>ResumeHttpRequest</td><td>恢复先前被暂停的请求处理流程</td><td>-</td></tr><tr><td></td><td>ResumeHttpResponse</td><td>恢复先前被暂停的应答处理流程</td><td>-</td></tr></tbody></table><h2 id="编译打包插件" tabindex="-1"><a class="header-anchor" href="#编译打包插件" aria-hidden="true">#</a> 编译打包插件</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 编译WASM</span>\n$  tinygo build <span class="token parameter variable">-o</span> main.wasm <span class="token parameter variable">-scheduler</span><span class="token operator">=</span>none <span class="token parameter variable">-target</span><span class="token operator">=</span>wasi <span class="token parameter variable">-gc</span><span class="token operator">=</span>custom <span class="token parameter variable">-tags</span><span class="token operator">=</span><span class="token string">&#39;custommalloc nottinygc_finalizer&#39;</span> main.go\n\n<span class="token comment"># 查看Dockerfile</span>\n<span class="token function">cat</span> Dockerfile \nFROM scratch\nCOPY main.wasm plugin.wasm\n\n<span class="token comment"># 编译Docker Image</span>\n$ <span class="token function">docker</span> build <span class="token parameter variable">-t</span>  registry.cn-shanghai.aliyuncs.com/kubesre01/jwt-plugin:v1 <span class="token builtin class-name">.</span>\n\n<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Building <span class="token number">0</span>.1s <span class="token punctuation">(</span><span class="token number">5</span>/5<span class="token punctuation">)</span> FINISHED                                                                                                                                                                               docker:desktop-linux\n <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>internal<span class="token punctuation">]</span> load build definition from Dockerfile                                                                                                                                                                           <span class="token number">0</span>.0s\n <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> transferring dockerfile: 113B                                                                                                                                                                                           <span class="token number">0</span>.0s\n <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>internal<span class="token punctuation">]</span> load .dockerignore                                                                                                                                                                                              <span class="token number">0</span>.0s\n <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> transferring context: 2B                                                                                                                                                                                                <span class="token number">0</span>.0s\n <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>internal<span class="token punctuation">]</span> load build context                                                                                                                                                                                              <span class="token number">0</span>.0s\n <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> transferring context: <span class="token number">1</span>.99MB                                                                                                                                                                                            <span class="token number">0</span>.0s\n <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span>/1<span class="token punctuation">]</span> COPY main.wasm plugin.wasm                                                                                                                                                                                           <span class="token number">0</span>.0s\n <span class="token operator">=</span><span class="token operator">&gt;</span> exporting to image                                                                                                                                                                                                         <span class="token number">0</span>.0s\n <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> exporting layers                                                                                                                                                                                                        <span class="token number">0</span>.0s\n <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> writing image sha256:6097b8347fc71e52eadd05753b2bd6877f4f9283a9cd4d844e62259ef714e373                                                                                                                                   <span class="token number">0</span>.0s\n <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> naming to registry.cn-shanghai.aliyuncs.com/kubesre01/jwt-plugin:v1 \n\n <span class="token comment"># 上传镜像到仓库</span>\n $ <span class="token function">docker</span> push  registry.cn-shanghai.aliyuncs.com/kubesre01/jwt-plugin:v1                            \nThe push refers to repository <span class="token punctuation">[</span>registry.cn-shanghai.aliyuncs.com/kubesre01/jwt-plugin<span class="token punctuation">]</span>\n31f0fa5f1adf: Pushed \nv1: digest: sha256:c3c629576c71d3dbd4d2bd8118c5523346c63cff7853ce995eb5879affd2c752 size: <span class="token number">526</span>\n \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="部署示例服务" tabindex="-1"><a class="header-anchor" href="#部署示例服务" aria-hidden="true">#</a> 部署示例服务</h2><ul><li>Auth服务：负责用户登陆授权返回Token</li><li>Demo服务：负责认证通过后访问的微服务</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 部署Auth服务</span>\n$ <span class="token function">cat</span> auth.yml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: auth\n  labels:\n    app: auth\nspec:\n  replicas: <span class="token number">1</span>\n  selector:\n    matchLabels:\n      app: auth\n  template:\n    metadata:\n      labels:\n        app: auth\n    spec:\n      containers:\n      - name: auth\n        imagePullPolicy: Always\n        image: registry.cn-shanghai.aliyuncs.com/kubesre01/auth:v1\n        ports:\n        - containerPort: <span class="token number">8080</span>\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: auth-svc\nspec:\n  type: ClusterIP\n  selector:\n    app: auth\n  ports:\n    - port: <span class="token number">8080</span>\n      targetPort: <span class="token number">8080</span>\n$ kubectl apply <span class="token parameter variable">-f</span> auth.yml\ndeployment.apps/auth unchanged\nservice/auth-svc unchanged\n\n\n<span class="token comment"># 部署demo服务</span>\n$  <span class="token function">cat</span> demo.yml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: demo\n  labels:\n    app: demo\nspec:\n  replicas: <span class="token number">1</span>\n  selector:\n    matchLabels:\n      app: demo\n  template:\n    metadata:\n      labels:\n        app: demo\n    spec:\n      containers:\n      - name: demo\n        imagePullPolicy: Always\n        image: registry.cn-shanghai.aliyuncs.com/kubesre01/demo:v1\n        ports:\n        - containerPort: <span class="token number">8080</span>\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: demo-svc\nspec:\n  type: ClusterIP\n  selector:\n    app: demo\n  ports:\n    - port: <span class="token number">8080</span>\n      targetPort: <span class="token number">8080</span>\n\n$ kubectl apply <span class="token parameter variable">-f</span> demo.yml\ndeployment.apps/demo unchanged\nservice/demo-svc unchanged\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="验证jwt认证插件" tabindex="-1"><a class="header-anchor" href="#验证jwt认证插件" aria-hidden="true">#</a> 验证JWT认证插件</h2><p>安装插件： <img src="https://img.kubesre.com/kubesre/20230811/4.png" alt="image.png"></p><p>配置域名： <img src="https://img.kubesre.com/kubesre/20230811/5.png" alt="image.png"> 配置路由： <img src="https://img.kubesre.com/kubesre/20230811/6.png" alt="image.png"><img src="https://img.kubesre.com/kubesre/20230811/7.png" alt="image.png"> 为demo服务配置策略： <img src="https://img.kubesre.com/kubesre/20230811/8.png" alt="image.png"> 验证： 先通过auth服务接口获取到Token <img src="https://img.kubesre.com/kubesre/20230811/9.png" alt="image.png"> 携带Token进行请求demo服务，正常返回 <img src="https://img.kubesre.com/kubesre/20230811/10.png" alt="image.png"> 不携带Token进行请求demo服务，返回401，详情如下 <img src="https://img.kubesre.com/kubesre/20230811/11.png" alt="image.png"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文带大家了解Higress云原生网关与Wasm，并通过最佳实践开发了基于Wasm的Higress JWT认证插件的整个过程，相信大家一定有所收获，接下来文章内容中会分享更多企业级实战案例，请敬请期待！</p>', 21);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createTextVNode("访问地址："),
      createBaseVNode("a", _hoisted_11, [
        createTextVNode("http://console.higress.io/plugin"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(" Username: admin Password: admin")
    ]),
    _hoisted_12,
    _hoisted_13,
    createBaseVNode("p", null, [
      createTextVNode("以MacOS为例,Windows可以去查阅官方文档进行安装环境： Golang："),
      createBaseVNode("a", _hoisted_14, [
        createTextVNode("https://go.dev/doc/install"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(" TinyGo："),
      createBaseVNode("a", _hoisted_15, [
        createTextVNode("https://tinygo.org/getting-started/install/"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(" Wasm-opt:"),
      createBaseVNode("a", _hoisted_16, [
        createTextVNode("https://github.com/WebAssembly/binaryen.git"),
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_17
  ]);
}
const wasmkaifajwtchajian_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "wasmkaifajwtchajian.html.vue"]]);
export {
  wasmkaifajwtchajian_html as default
};
