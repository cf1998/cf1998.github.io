import { _ as _export_sfc, o as openBlock, c as createElementBlock, a as createStaticVNode } from "./app-d515af8b.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="什么是grpc" tabindex="-1"><a class="header-anchor" href="#什么是grpc" aria-hidden="true">#</a> 什么是gRPC？</h2><p>gRPC（gRPC Remote Procedure Call）是一种开源的远程过程调用（RPC）框架，由Google开发并于2015年发布。它使用HTTP/2协议进行通信，旨在简化跨网络的服务通信和跨语言的服务调用。 以下是 gRPC 的一些关键特点和概念：</p><ol><li>IDL（Interface Definition Language）: gRPC 使用IDL来定义服务接口和消息格式。它使用Protocol Buffers（通常简称为ProtoBuf）作为默认的IDL工具。通过IDL，您可以明确定义服务的方法和参数，然后使用gRPC工具生成相应的客户端和服务器代码。</li><li>多语言支持: gRPC支持多种编程语言，包括但不限于C++, Java, Python, Go, Node.js, Ruby, C#,等。这意味着您可以使用不同的编程语言开发服务端和客户端，它们仍然可以相互通信。</li><li>HTTP/2: gRPC使用HTTP/2作为底层传输协议，这带来了性能上的一些好处，如多路复用、头部压缩、流控制等。这有助于提高通信效率，特别是在高延迟或低带宽网络上。</li><li>双向流: gRPC允许客户端和服务器之间建立双向流，这意味着它支持双向通信。这对于流式数据传输和实时应用程序非常有用。</li><li>中间件支持: gRPC提供了一种插件式的中间件机制，使您可以在请求和响应处理过程中添加拦截器和处理器，以实现诸如身份验证、授权、日志记录等功能。</li><li>支持多种序列化格式: 尽管gRPC默认使用Protocol Buffers作为序列化格式，但它也支持其他序列化格式，如JSON。</li><li>服务发现: gRPC还提供了服务发现功能，使服务能够注册和发现其他服务的位置和状态。这对于微服务架构非常有用。</li></ol><h2 id="申请ssl证书" tabindex="-1"><a class="header-anchor" href="#申请ssl证书" aria-hidden="true">#</a> 申请SSL证书</h2><p>生成CA证书:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 生成CA根证书私钥：为保证安全，生成一个4096位的私钥，并使用aes方式加密</span>\n$ openssl genrsa <span class="token parameter variable">-aes256</span> <span class="token parameter variable">-out</span> kubesre-ca.key <span class="token number">4096</span>\nEnter PEM pass phrase:   <span class="token comment"># 密码：12345678</span>\nVerifying - Enter PEM pass phrase:\n\n<span class="token comment"># 通过CA根私钥签发CA根证书</span>\n$ openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-x509</span> <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-extensions</span> v3_ca <span class="token parameter variable">-key</span> kubesre-ca.key <span class="token parameter variable">-out</span> kubesre-ca.cer <span class="token parameter variable">-subj</span> <span class="token string">&quot;/C=CN/ST=shanghai/L=shanghai/O=kubesre/OU=kubesre/CN=*.kubesre.com&quot;</span>\nEnter pass phrase <span class="token keyword">for</span> kubesre-ca.key: <span class="token comment"># 密码：12345678</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成服务端证书：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 生成服务端证书私钥</span>\n$ openssl genrsa <span class="token parameter variable">-out</span> kubesre-server.key <span class="token number">2048</span>\n\n<span class="token comment"># 生成签发请求csr</span>\n<span class="token variable">$openssl</span> req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> kubesre-server.key <span class="token parameter variable">-out</span> kubesre-server.csr <span class="token parameter variable">-subj</span> <span class="token string">&quot;/C=CN/ST=shanghai/L=shanghai/O=kubesre/OU=kubesre/CN=demo.kubesre.com&quot;</span>\n\n<span class="token comment"># 用CA证书签发服务端证书</span>\n$ openssl x509 <span class="token parameter variable">-req</span>  <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-CA</span> kubesre-ca.cer <span class="token parameter variable">-CAkey</span> kubesre-ca.key <span class="token parameter variable">-in</span> kubesre-server.csr <span class="token parameter variable">-out</span> kubesre-server.cer\nCertificate request self-signature ok\n<span class="token assign-left variable">subject</span><span class="token operator">=</span>C <span class="token operator">=</span> CN, ST <span class="token operator">=</span> shanghai, L <span class="token operator">=</span> shanghai, O <span class="token operator">=</span> kubesre, OU <span class="token operator">=</span> kubesre, CN <span class="token operator">=</span> demo.kubesre.com\nEnter pass phrase <span class="token keyword">for</span> kubesre-ca.key: <span class="token comment"># 密码：12345678</span>\n\n$ ll\ntotal <span class="token number">40</span>\n-rw-r--r--@ <span class="token number">1</span> chuanzhang  staff   <span class="token number">2</span>.0K  <span class="token number">8</span> <span class="token number">13</span> <span class="token number">15</span>:24 kubesre-ca.cer\n-rw-------@ <span class="token number">1</span> chuanzhang  staff   <span class="token number">3</span>.4K  <span class="token number">8</span> <span class="token number">13</span> <span class="token number">15</span>:22 kubesre-ca.key\n-rw-r--r--@ <span class="token number">1</span> chuanzhang  staff   <span class="token number">1</span>.6K  <span class="token number">8</span> <span class="token number">13</span> <span class="token number">15</span>:31 kubesre-server.cer\n-rw-r--r--@ <span class="token number">1</span> chuanzhang  staff   <span class="token number">1</span>.0K  <span class="token number">8</span> <span class="token number">13</span> <span class="token number">15</span>:28 kubesre-server.csr\n-rw-------@ <span class="token number">1</span> chuanzhang  staff   <span class="token number">1</span>.7K  <span class="token number">8</span> <span class="token number">13</span> <span class="token number">15</span>:27 kubesre-server.key\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建证书Secret（证书基于Kubernetes Secret进行存储）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ kubectl create secret tls  kubesre-tls <span class="token parameter variable">--key</span> kubesre-server.key <span class="token parameter variable">--cert</span> kubesre-server.cer\nsecret/kubesre-tls created\n$ kubectl get secret\nNAME          TYPE                DATA   AGE\nkubesre-tls   kubernetes.io/tls   <span class="token number">2</span>      18s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="grpc示例应用部署" tabindex="-1"><a class="header-anchor" href="#grpc示例应用部署" aria-hidden="true">#</a> gRPC示例应用部署</h2><p>部署示例版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> demo.yml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grpc-service\nspec:\n  replicas: <span class="token number">1</span>\n  selector:\n    matchLabels:\n      run: grpc-service\n  template:\n    metadata:\n      labels:\n        run: grpc-service\n    spec:\n      containers:\n      - image: registry.cn-shanghai.aliyuncs.com/kubesre01/grpc-server:latest\n        imagePullPolicy: Always\n        name: grpc-service\n        ports:\n        - containerPort: <span class="token number">50051</span>\n          protocol: TCP\n      restartPolicy: Always\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: grpc-service\nspec:\n  ports:\n  - port: <span class="token number">50051</span>\n    protocol: TCP\n    targetPort: <span class="token number">50051</span>\n  selector:\n    run: grpc-service\n\n<span class="token comment"># 执行创建操作</span>\n$ kubectl apply <span class="token parameter variable">-f</span> demo.yml\ndeployment.apps/grpc-service unchanged\nservice/grpc-service created\n\n<span class="token comment"># 查看创建状态</span>\nkubectl get pods,svc\nNAME                                READY   STATUS    RESTARTS   AGE\npod/grpc-service-56f784fcb5-n72hd   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          81s\n\nNAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>     AGE\nservice/grpc-service   ClusterIP   <span class="token number">10.96</span>.239.197   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>        <span class="token number">50051</span>/TCP   73s\nservice/kubernetes     ClusterIP   <span class="token number">10.96</span>.0.1       <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>        <span class="token number">443</span>/TCP     11d\n\n<span class="token comment"># 出现以上情况说明一切就绪</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建ingress-grpc路由规则" tabindex="-1"><a class="header-anchor" href="#创建ingress-grpc路由规则" aria-hidden="true">#</a> 创建Ingress gRPC路由规则</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> demo-ingress.yml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: grpc-ingress\n  annotations:\n    <span class="token comment"># 通过注解指定GRPC协议</span>\n    nginx.ingress.kubernetes.io/backend-protocol: <span class="token string">&quot;GRPC&quot;</span>\nspec:\n  ingressClassName: nginx\n  <span class="token comment"># 指定证书</span>\n  tls:\n  - hosts:\n    - demo.kubesre.com\n    secretName: kubesre-tls\n  rules:\n  <span class="token comment"># 制定域名</span>\n  - host: demo.kubesre.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: grpc-service\n            port:\n              number: <span class="token number">50051</span>\nkubectl apply <span class="token parameter variable">-f</span> demo-ingress.yml\ningress.networking.k8s.io/grpc-ingress created\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ grpcurl <span class="token parameter variable">-insecure</span> <span class="token parameter variable">-authority</span> demo.kubesre.com <span class="token number">127.0</span>.0.1:443 list\ngrpc.reflection.v1alpha.ServerReflection\nhelloworld.Greeter\n\n<span class="token comment"># 出现如下情况，说明验证成功了，流量成功路由到了后端服务了！</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是websocket" tabindex="-1"><a class="header-anchor" href="#什么是websocket" aria-hidden="true">#</a> 什么是WebSocket</h2><p>WebSocket是一种计算机通信协议，它提供了一种在客户端和服务器之间建立持久性连接的方式，允许双向实时数据传输。WebSocket的主要目的是解决HTTP协议的一些限制，如请求-响应模式和高延迟。 以下是WebSocket的一些关键特点和用途：</p><ol><li>双向通信： WebSocket允许服务器和客户端之间进行双向通信，而不像HTTP那样需要每次都发起新的请求。</li><li>持久连接： WebSocket连接是持久性的，一旦建立连接，它可以保持打开状态，以便随时发送或接收数据，而不必重新建立连接。</li><li>实时性： 由于WebSocket提供了低延迟的通信方式，它特别适合实时应用程序，如在线聊天、在线游戏和实时数据更新。</li><li>轻量级： WebSocket协议相对较轻量，因此减少了通信开销和延迟。</li><li>跨域通信： WebSocket支持跨域通信，这意味着可以在不同域名下的客户端和服务器之间建立连接。</li><li>安全性： WebSocket可以通过加密来确保通信的安全性，类似于HTTPS协议</li></ol><p>WebSocket通常用于实现各种实时Web应用程序，例如在线聊天、协作工具、在线游戏、股票市场报价、实时监控和通知系统等。它在那些需要实时数据传输和即时响应的场景中非常有用，因为它可以降低通信延迟，提供更好的用户体验。WebSocket通信建立在TCP协议之上，通常使用端口80（HTTP）或443（HTTPS）来传输数据。</p><h2 id="websocket示例应用部署" tabindex="-1"><a class="header-anchor" href="#websocket示例应用部署" aria-hidden="true">#</a> WebSocket示例应用部署</h2><p>部署示例版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> ws.yml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: demo-ws\n  labels:\n    app: demo-ws\nspec:\n  replicas: <span class="token number">1</span>\n  selector:\n    matchLabels:\n      app: demo-ws\n  template:\n    metadata:\n      labels:\n        app: demo-ws\n    spec:\n      containers:\n      - name: demo-ws\n        imagePullPolicy: Always\n        image: registry.cn-shanghai.aliyuncs.com/kubesre01/demo-ws\n        ports:\n        - containerPort: <span class="token number">8090</span>\n--- \napiVersion: v1\nkind: Service\nmetadata:\n  name: demo-ws-svc\nspec:\n  type: ClusterIP\n  selector:\n    app: demo-ws\n  ports:\n    - port: <span class="token number">8090</span>\n      targetPort: <span class="token number">8090</span>\n      \n<span class="token comment"># 执行创建操作</span>\n$ kubectl apply <span class="token parameter variable">-f</span> ws.yml\ndeployment.apps/demo-ws created\nservice/demo-ws-svc created\n\n<span class="token comment"># 查看创建状态</span>\nkubectl get pod,svc\nNAME                               READY   STATUS    RESTARTS   AGE\npod/demo-ws-79bd8fbdc7-hml6q       <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2m2s\n\nNAME                   TYPE        CLUSTER-IP     EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>     AGE\nservice/demo-ws-svc    ClusterIP   <span class="token number">10.96</span>.255.28   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>        <span class="token number">8080</span>/TCP    2m2s\nservice/kubernetes     ClusterIP   <span class="token number">10.96</span>.0.1      <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>        <span class="token number">443</span>/TCP     82m\n\n<span class="token comment"># 出现以上情况说明一切就绪</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建ingress-websocket" tabindex="-1"><a class="header-anchor" href="#创建ingress-websocket" aria-hidden="true">#</a> 创建Ingress WebSocket</h2><p>Kubernetes Ingress Controller默认已支持WebSocket无需额外配置，并可以通过如下注解做些额外优化配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nginx.ingress.kubernetes.io/proxy-http-version: <span class="token string">&quot;1.1&quot;</span>\nnginx.ingress.kubernetes.io/proxy-read-timeout: <span class="token string">&quot;3600&quot;</span>\nnginx.ingress.kubernetes.io/proxy-send-timeout: <span class="token string">&quot;3600&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ demo-ws-ingress.yml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: demo-ws-ingress\nspec:\n  ingressClassName: nginx\n  rules:\n  - host: demo.kubesre.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: demo-ws-svc\n            port:\n              number: <span class="token number">8090</span>\n\n<span class="token comment"># 创建WebSocket Ingress资源对象</span>\n$ kubectl apply <span class="token parameter variable">-f</span> demo-ws-ingress.yml\ningress.networking.k8s.io/demo-ws-ingress created\n\n<span class="token comment"># 查看状态</span>\n$ kubectl get ingress\nNAME              CLASS   HOSTS              ADDRESS   PORTS   AGE\ndemo-ws-ingress   nginx   demo.kubesre.com             <span class="token number">80</span>      2m6s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kubernetes Ingress Controller若默认不支持WebSocket可能是Ingress老版本，则可以通过如下方式进行配置（作为补充知识）：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>ws<span class="token punctuation">-</span>ingress\n  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>\n    <span class="token key atrule">kubernetes.io/ingress.class</span><span class="token punctuation">:</span> <span class="token string">&quot;nginx&quot;</span>\n    <span class="token key atrule">nginx.ingress.kubernetes.io/configuration-snippet</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n       proxy_set_header Upgrade &quot;websocket&quot;;\n       proxy_set_header Connection &quot;Upgrade&quot;;</span>\n<span class="token key atrule">spec</span><span class="token punctuation">:</span>\n  <span class="token key atrule">rules</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> demo.kubesre.com\n    <span class="token key atrule">http</span><span class="token punctuation">:</span>\n      <span class="token key atrule">paths</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> /\n        <span class="token key atrule">pathType</span><span class="token punctuation">:</span> Prefix\n        <span class="token key atrule">backend</span><span class="token punctuation">:</span>\n          <span class="token key atrule">service</span><span class="token punctuation">:</span>\n            <span class="token key atrule">name</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>ws<span class="token punctuation">-</span>svc\n            <span class="token key atrule">port</span><span class="token punctuation">:</span>\n              <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">8090</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NGINX Ingress Controller (Nginx官方),可以通过如下方式进行配置（作为补充知识）：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>ws<span class="token punctuation">-</span>ingress\n  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>\n    <span class="token key atrule">nginx.org/websocket-services</span><span class="token punctuation">:</span> <span class="token string">&quot;demo-ws-svc&quot;</span> <span class="token comment"># 具体的服务名</span>\n<span class="token key atrule">spec</span><span class="token punctuation">:</span>\n  <span class="token key atrule">ingressClassName</span><span class="token punctuation">:</span> nginx\n  <span class="token key atrule">rules</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> demo.kubesre.com\n    <span class="token key atrule">http</span><span class="token punctuation">:</span>\n      <span class="token key atrule">paths</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> /\n        <span class="token key atrule">pathType</span><span class="token punctuation">:</span> Prefix\n        <span class="token key atrule">backend</span><span class="token punctuation">:</span>\n          <span class="token key atrule">service</span><span class="token punctuation">:</span>\n            <span class="token key atrule">name</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>ws<span class="token punctuation">-</span>svc\n            <span class="token key atrule">port</span><span class="token punctuation">:</span>\n              <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">8090</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证： 通过ApiPost工具进行测试验证成功，Ws可以连接成功并可以成功收发消息！ <img src="https://img.kubesre.com/kubesre/20230904/1.png" alt="image.png"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文介绍了gPRC与WebSocket后端协议Ingress配置方法，并通过实际案例的方式讲解，下一章将讲解Ingress更多企业级实战，请敬请期待！</p>', 35);
const _hoisted_36 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_36);
}
const shixianGRPCyuWebSocketfuwufangwen_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "shixianGRPCyuWebSocketfuwufangwen.html.vue"]]);
export {
  shixianGRPCyuWebSocketfuwufangwen_html as default
};
