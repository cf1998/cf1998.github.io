import { _ as _export_sfc, o as openBlock, c as createElementBlock, a as createStaticVNode } from "./app-9ba53931.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="数字证书基本概念" tabindex="-1"><a class="header-anchor" href="#数字证书基本概念" aria-hidden="true">#</a> 数字证书基本概念</h2><p>数字证书的标准：</p><ul><li>X.509版本号：指出该证书使用了哪种版本的X.509标准，版本号会影响证书中的一些特定信息</li><li>序列号：由CA给予每一个证书分配的唯一的数字型编号，当证书被取消时，实际上是将此证书序列号放入由CA签发的CRL（Certificate Revocation List证书作废表，或证书黑名单表）中。这也是序列号唯一的原因</li><li>签名算法标识符：用来指定CA签署证书时所使用的签名算法，常见算法如RSA</li><li>签发者信息：颁发证书的实体的 X.500 名称信息。它通常为一个 CA</li><li>证书的有效期：证书起始日期和时间以及终止日期和时间；指明证书在这两个时间内有效。</li><li>主题信息：证书持有人唯一的标识，在 Internet上应该是唯一的</li><li>发布者的数字签名：这是使用发布者私钥生成的签名，以确保这个证书在发放之后没有被撰改过。</li><li>证书的公钥：包括证书的公钥、算法(指明密钥属于哪种密码系统)的标识符和其他相关的密钥参数</li></ul><p>数字证书的常见格式：</p><ul><li>CSR：证书请求文件，这个并不是证书，而是向证书颁发机构获得签名证书的申请文件</li><li>CER：存放证书文件可以是二进制编码或者BASE64编码</li><li>CRT：证书可以是DER编码，也可以是PEM编码，在linux系统中比较常见</li><li>pem：该编码格式在RFC1421中定义，但他也同样广泛运用于密钥管理，实质上是 Base64 编码的二进制内容</li><li>DER：用于二进制DER编码的证书。这些证书也可以用CER或者CRT作为扩展名</li><li>JKS：java的密钥存储文件,二进制格式,是一种 Java 特定的密钥文件格式， JKS的密钥库和私钥可以用不同的密码进行保护</li><li>p12/PFX：包含所有私钥、公钥和证书。其以二进制格式存储，也称为 PFX 文件，在windows中可以直接导入到密钥区，密钥库和私钥用相同密码进行保护</li></ul><h2 id="什么是https单向认证" tabindex="-1"><a class="header-anchor" href="#什么是https单向认证" aria-hidden="true">#</a> 什么是HTTPS单向认证</h2><p>单向认证，只有一方需要验证对方的身份。通常是客户端验证服务器的身份。这种情况下，客户端会检查服务器提供的数字证书是否有效，以确定服务器是否合法。服务器不会验证客户端的身份。这种情况下，客户端可以确认它正在与合法的服务器进行通信，但服务器不能确定其与合法客户端通信。单向认证通常用于一些对服务器身份验证要求较高，但对客户端身份验证要求相对较低的场景，如网站访问。</p><p><strong>单向认证原理：</strong><img src="https://img.kubesre.com/kubesre/20230813/单向认证.png" alt="image.png"></p><ol><li>客户端向服务端发送SSL协议版本号、加密算法种类、随机数等信息。</li><li>服务端给客户端返回SSL协议版本号、加密算法种类、随机数等信息，同时也返回服务器端的证书，即公钥证书</li><li>客户端使用服务端返回的信息验证服务器的合法性，包括： <ul><li>证书是否过期</li><li>发型服务器证书的CA是否可靠</li><li>返回的公钥是否能正确解开返回证书中的数字签名</li><li>服务器证书上的域名是否和服务器的实际域名相匹配</li></ul></li><li>验证通过后，将继续进行通信，否则，终止通信</li><li>客户端向服务端发送自己所能支持的对称加密方案，供服务器端进行选择</li><li>服务器端在客户端提供的加密方案中选择加密程度最高的加密方式。</li><li>服务器将选择好的加密方案通过明文方式返回给客户端</li><li>客户端接收到服务端返回的加密方式后，使用该加密方式生成产生随机码，用作通信过程中对称加密的密钥，使用服务端返回的公钥进行加密，将加密后的随机码发送至服务器</li><li>服务器收到客户端返回的加密信息后，使用自己的私钥进行解密，获取对称加密密钥。 在接下来的会话中，服务器和客户端将会使用该密码进行对称加密，保证通信过程中信息的安全</li></ol><h2 id="什么是https双向认证" tabindex="-1"><a class="header-anchor" href="#什么是https双向认证" aria-hidden="true">#</a> 什么是HTTPS双向认证</h2><p>双向认证要求通信双方都需要验证对方的身份。即客户端验证服务器的身份，同时服务器也验证客户端的身份。这种情况下，双方都会使用数字证书来证明自己的身份。客户端在连接到服务器时会发送自己的数字证书，服务器会验证该证书的合法性。同时，服务器也会发送数字证书给客户端，客户端会验证服务器的证书。只有在双方都通过了身份验证，通信才会继续进行。双向认证通常用于对通信双方身份验证要求较高的场景，如安全敏感的数据交换、金融交易等。</p><p><strong>双向认证原理：</strong><img src="https://img.kubesre.com/kubesre/20230813/双向认证.png" alt="image.png"></p><ol><li>客户端向服务端发送SSL协议版本号、加密算法种类、随机数等信息。</li><li>服务端给客户端返回SSL协议版本号、加密算法种类、随机数等信息，同时也返回服务器端的证书，即公钥证书</li><li>客户端使用服务端返回的信息验证服务器的合法性，包括： <ul><li>证书是否过期</li><li>发型服务器证书的CA是否可靠</li><li>返回的公钥是否能正确解开返回证书中的数字签名</li><li>服务器证书上的域名是否和服务器的实际域名相匹配</li></ul></li><li>验证通过后，将继续进行通信，否则，终止通信</li><li>服务端要求客户端发送客户端的证书，客户端会将自己的证书发送至服务端</li><li>验证客户端的证书，通过验证后，会获得客户端的公钥</li><li>客户端向服务端发送自己所能支持的对称加密方案，供服务器端进行选择</li><li>服务器端在客户端提供的加密方案中选择加密程度最高的加密方式</li><li>将加密方案通过使用之前获取到的公钥进行加密，返回给客户端</li><li>客户端收到服务端返回的加密方案密文后，使用自己的私钥进行解密，获取具体加密方式，而后，产生该加密方式的随机码，用作加密过程中的密钥，使用之前从服务端证书中获取到的公钥进行加密后，发送给服务端</li><li>服务端收到客户端发送的消息后，使用自己的私钥进行解密，获取对称加密的密钥，在接下来的会话中，服务器和客户端将会使用该密码进行对称加密，保证通信过程中信息的安全。</li></ol><h2 id="配置https单向认证" tabindex="-1"><a class="header-anchor" href="#配置https单向认证" aria-hidden="true">#</a> 配置HTTPS单向认证</h2><p>生成CA证书：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 生成CA根证书私钥：为保证安全，生成一个4096位的私钥，并使用aes方式加密</span>\n$ openssl genrsa <span class="token parameter variable">-aes256</span> <span class="token parameter variable">-out</span> kubesre-ca.key <span class="token number">4096</span>\nEnter PEM pass phrase:   <span class="token comment"># 密码：12345678</span>\nVerifying - Enter PEM pass phrase:\n\n<span class="token comment"># 通过CA根私钥签发CA根证书</span>\n$ openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-x509</span> <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-extensions</span> v3_ca <span class="token parameter variable">-key</span> kubesre-ca.key <span class="token parameter variable">-out</span> kubesre-ca.cer <span class="token parameter variable">-subj</span> <span class="token string">&quot;/C=CN/ST=shanghai/L=shanghai/O=kubesre/OU=kubesre/CN=*.kubesre.com&quot;</span>\nEnter pass phrase <span class="token keyword">for</span> kubesre-ca.key: <span class="token comment"># 密码：12345678</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成服务端证书：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 生成服务端证书私钥</span>\n$ openssl genrsa <span class="token parameter variable">-out</span> kubesre-server.key <span class="token number">2048</span>\n\n<span class="token comment"># 生成签发请求csr</span>\n<span class="token variable">$openssl</span> req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> kubesre-server.key <span class="token parameter variable">-out</span> kubesre-server.csr <span class="token parameter variable">-subj</span> <span class="token string">&quot;/C=CN/ST=shanghai/L=shanghai/O=kubesre/OU=kubesre/CN=demo.kubesre.com&quot;</span>\n\n<span class="token comment"># 用CA证书签发服务端证书</span>\n$ openssl x509 <span class="token parameter variable">-req</span>  <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-CA</span> kubesre-ca.cer <span class="token parameter variable">-CAkey</span> kubesre-ca.key <span class="token parameter variable">-in</span> kubesre-server.csr <span class="token parameter variable">-out</span> kubesre-server.cer\nCertificate request self-signature ok\n<span class="token assign-left variable">subject</span><span class="token operator">=</span>C <span class="token operator">=</span> CN, ST <span class="token operator">=</span> shanghai, L <span class="token operator">=</span> shanghai, O <span class="token operator">=</span> kubesre, OU <span class="token operator">=</span> kubesre, CN <span class="token operator">=</span> demo.kubesre.com\nEnter pass phrase <span class="token keyword">for</span> kubesre-ca.key: <span class="token comment"># 密码：12345678</span>\n\n$ ll\ntotal <span class="token number">40</span>\n-rw-r--r--@ <span class="token number">1</span> chuanzhang  staff   <span class="token number">2</span>.0K  <span class="token number">8</span> <span class="token number">13</span> <span class="token number">15</span>:24 kubesre-ca.cer\n-rw-------@ <span class="token number">1</span> chuanzhang  staff   <span class="token number">3</span>.4K  <span class="token number">8</span> <span class="token number">13</span> <span class="token number">15</span>:22 kubesre-ca.key\n-rw-r--r--@ <span class="token number">1</span> chuanzhang  staff   <span class="token number">1</span>.6K  <span class="token number">8</span> <span class="token number">13</span> <span class="token number">15</span>:31 kubesre-server.cer\n-rw-r--r--@ <span class="token number">1</span> chuanzhang  staff   <span class="token number">1</span>.0K  <span class="token number">8</span> <span class="token number">13</span> <span class="token number">15</span>:28 kubesre-server.csr\n-rw-------@ <span class="token number">1</span> chuanzhang  staff   <span class="token number">1</span>.7K  <span class="token number">8</span> <span class="token number">13</span> <span class="token number">15</span>:27 kubesre-server.key\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建证书Secret（证书基于Kubernetes Secret进行存储）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ kubectl create secret tls  kubesre-tls <span class="token parameter variable">--key</span> kubesre-server.key <span class="token parameter variable">--cert</span> kubesre-server.cer\nsecret/kubesre-tls created\n$ kubectl get secret\nNAME          TYPE                DATA   AGE\nkubesre-tls   kubernetes.io/tls   <span class="token number">2</span>      18s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建Ingress资源：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> ingress.yml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: demo\nspec:\n  tls:\n  - hosts:\n    - demo.kubesre.com\n    secretName: kubesre-tls  <span class="token comment"># 创建的证书Secret</span>\n  rules:\n  - host: demo.kubesre.com\n    http:\n      paths:\n      - path: /info\n        pathType: Prefix\n        backend:\n          service:\n            name: demo-svc\n            port:\n              number: <span class="token number">8080</span>\n  ingressClassName: nginx\n$ kubectl apply <span class="token parameter variable">-f</span> ingress.yml\ningress.networking.k8s.io/demo configured\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-k</span> https://demo.kubesre.com/info\n<span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;云原生运维圈！&quot;</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置https双向认证" tabindex="-1"><a class="header-anchor" href="#配置https双向认证" aria-hidden="true">#</a> 配置HTTPS双向认证</h2><p>上一步，已经签发了服务端证书，接下来，咱们来签发客户端证书即可！</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 生成客户端证书私钥</span>\n$ openssl genrsa <span class="token parameter variable">-out</span> kubesre-client.key <span class="token number">2048</span>\n<span class="token comment"># 生成签发请求csr</span>\n$ openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> kubesre-client.key <span class="token parameter variable">-out</span> kubesre-client.csr <span class="token parameter variable">-subj</span> <span class="token string">&quot;/C=CN/ST=shanghai/L=shanghai/O=kubesre/OU=kubesre/CN=client.kubesre.com&quot;</span>\n\n<span class="token comment"># 用CA证书签发客户端证书</span>\n$ openssl x509 <span class="token parameter variable">-req</span>  <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-CA</span> kubesre-ca.cer <span class="token parameter variable">-CAkey</span> kubesre-ca.key <span class="token parameter variable">-in</span> kubesre-client.csr <span class="token parameter variable">-out</span> kubesre-client.cer\nCertificate request self-signature ok\n<span class="token assign-left variable">subject</span><span class="token operator">=</span>C <span class="token operator">=</span> CN, ST <span class="token operator">=</span> shanghai, L <span class="token operator">=</span> shanghai, O <span class="token operator">=</span> kubesre, OU <span class="token operator">=</span> kubesre, CN <span class="token operator">=</span> client.kubesre.com\nEnter pass phrase <span class="token keyword">for</span> kubesre-ca.key: <span class="token comment"># 密码：12345678</span>\n\n$ <span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> client\n-rw-r--r--@ <span class="token number">1</span> chuanzhang  staff  <span class="token number">1590</span>  <span class="token number">8</span> <span class="token number">13</span> <span class="token number">15</span>:46 kubesre-client.cer\n-rw-r--r--@ <span class="token number">1</span> chuanzhang  staff  <span class="token number">1021</span>  <span class="token number">8</span> <span class="token number">13</span> <span class="token number">15</span>:46 kubesre-client.csr\n-rw-------@ <span class="token number">1</span> chuanzhang  staff  <span class="token number">1704</span>  <span class="token number">8</span> <span class="token number">13</span> <span class="token number">15</span>:46 kubesre-client.key\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建CA证书的Secret：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl create secret generic ca-secret  --from-file<span class="token operator">=</span>ca.crt<span class="token operator">=</span>kubesre-ca.cer\nsecret/ca-secret created\n\n$ kubectl get secret\nNAME          TYPE                DATA   AGE\nca-secret     Opaque              <span class="token number">1</span>      74s\nkubesre-tls   kubernetes.io/tls   <span class="token number">2</span>      28m\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建Ingress资源：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> ingress.yml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    nginx.ingress.kubernetes.io/auth-tls-verify-client: <span class="token string">&quot;on&quot;</span>  <span class="token comment"># 开启客户端认证 </span>\n    nginx.ingress.kubernetes.io/auth-tls-secret: <span class="token string">&quot;default/ca-secret&quot;</span>  <span class="token comment"># 配置CA证书</span>\n    nginx.ingress.kubernetes.io/auth-tls-verify-depth: <span class="token string">&quot;1&quot;</span> <span class="token comment">#  提供的客户证书和证书颁发机构链之间的验证深度</span>\n    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: <span class="token string">&quot;true&quot;</span> <span class="token comment"># 指示是否应将收到的证书传递给上游服务器。默认情况下是禁用的。</span>\n  name: demo\n  name: demo\nspec:\n  tls:\n  - hosts:\n    - demo.kubesre.com\n    secretName: kubesre-tls\n  rules:\n  - host: demo.kubesre.com\n    http:\n      paths:\n      - path: /info\n        pathType: Prefix\n        backend:\n          service:\n            name: demo-svc\n            port:\n              number: <span class="token number">8080</span>\n  ingressClassName: nginx\n\n$ kubectl apply <span class="token parameter variable">-f</span> ingress.yml\ningress.networking.k8s.io/demo configured\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 出现400错误代码，表示没有传客户端证书过去</span>\n$ <span class="token function">curl</span> <span class="token parameter variable">-k</span> https://demo.kubesre.com/info\n<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span class="token number">400</span> No required SSL certificate was sent<span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/head<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>center<span class="token operator">&gt;</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token number">400</span> Bad Request<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>/center<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>center<span class="token operator">&gt;</span>No required SSL certificate was sent<span class="token operator">&lt;</span>/center<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>hr<span class="token operator">&gt;</span><span class="token operator">&lt;</span>center<span class="token operator">&gt;</span>nginx<span class="token operator">&lt;</span>/center<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span>\n\n<span class="token comment"># 带上客户端证书继续访问，则可以访问成功</span>\n$ <span class="token function">curl</span> ./kubesre-ca.cer <span class="token parameter variable">--cert</span> ./kubesre-client.cer <span class="token parameter variable">--key</span> ./kubesre-client.key  https://demo.kubesre.com/info\n<span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;云原生运维圈！&quot;</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文介绍了单向认证与双向认证的原理，并以企业实战的方式从证书签发到部署证书以及测试验证完整流程进行讲解以及Kubernetes中证书通过Secret进行存储管理。下一章将讲解Ingress重写与正则的高级玩法，请敬请期待！</p>', 35);
const _hoisted_36 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_36);
}
const HTTPSzhengshuguanliyushuangxiangrenzhengpian_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "HTTPSzhengshuguanliyushuangxiangrenzhengpian.html.vue"]]);
export {
  HTTPSzhengshuguanliyushuangxiangrenzhengpian_html as default
};
