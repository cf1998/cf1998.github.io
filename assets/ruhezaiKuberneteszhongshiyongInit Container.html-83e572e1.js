import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, b as createBaseVNode, d as createTextVNode, e as createVNode, a as createStaticVNode } from "./app-d515af8b.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<p>Pod 可以包含多个容器，应用运行在这些容器里面，同时 Pod 也可以有一个或多个先于应用容器启动的 Init 容器。</p><h2 id="init-container-是什么" tabindex="-1"><a class="header-anchor" href="#init-container-是什么" aria-hidden="true">#</a> Init Container 是什么</h2><p>Init Container 是一种特殊容器，顾名思义是用来做初始化工作的容器，可以是一个或者多个，如果有多个的话，这些容器会按定义的顺序依次执行，只有所有的Init Container执行完后，主容器才会被启动。</p><p>我们知道一个Pod里面的所有容器是共享数据卷和网络命名空间的，所以Init Container里面产生的数据可以被主容器使用到的。 Init Container与应用容器本质上是一样的，除了以下两点：</p><ol><li>Init Container 不支持 lifecycle、livenessProbe、readinessProbe 和 startupProbe， 因为它们必须在 Pod 就绪之前运行完成，所以他们是仅运行一次就结束的任务</li><li>必须在成功执行完后，系统才能继续执行下一个容器。</li></ol><p>如果 Pod 的 Init 容器失败，Kubernetes 会不断地重启该 Pod，直到 Init 容器成功为止。如果 Pod 对应的 restartPolicy 为 Never，它不会重新启动。</p><p>Pod 的生命周期： <img src="https://img.kubesre.com/kubesre/20230913/555.png" alt="image.png"> 从上面这张图我们可以直观的看到 Init Container 是独立于主容器之外的，但他们都属于Pod的生命周期。</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><ul><li>等待其他关联服务正确运行（例如数据库或某个后台服务）</li><li>基于环境变量或配置模板生成服务所需配置文件</li><li>从远程数据库获取本地所需配置，或者将自身注册到某个中央数据库中</li><li>下载相关依赖包，或者对统进行一些预配置操作</li></ul><h2 id="简单示例" tabindex="-1"><a class="header-anchor" href="#简单示例" aria-hidden="true">#</a> 简单示例</h2><p>应用容器定义在 Pod.Spec.Containers，是必填字段，而 init 是定义在 Pod.Spec.initContainers 中，是可选字段。</p><p>下面的例子定义了一个具有 2 个 Init 容器的简单 Pod。 第一个等待 myservice 启动， 第二个等待 mydb 启动。 一旦这两个 Init 容器都启动完成，Pod 将启动 spec 节中的应用容器。</p><p>myapp.yaml：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod\n  labels:\n    app.kubernetes.io/name: MyApp\nspec:\n  containers:\n  - name: myapp-container\n    image: busybox:1.28\n    command: <span class="token punctuation">[</span><span class="token string">&#39;sh&#39;</span>, <span class="token string">&#39;-c&#39;</span>, <span class="token string">&#39;echo The app is running! &amp;&amp; sleep 3600&#39;</span><span class="token punctuation">]</span>\n  initContainers:\n  - name: init-myservice\n    image: busybox:1.28\n    command: <span class="token punctuation">[</span><span class="token string">&#39;sh&#39;</span>, <span class="token string">&#39;-c&#39;</span>, <span class="token string">&quot;until nslookup myservice.<span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /var/run/secrets/kubernetes.io/serviceaccount/namespace<span class="token variable">)</span></span>.svc.cluster.local; do echo waiting for myservice; sleep 2; done&quot;</span><span class="token punctuation">]</span>\n  - name: init-mydb\n    image: busybox:1.28\n    command: <span class="token punctuation">[</span><span class="token string">&#39;sh&#39;</span>, <span class="token string">&#39;-c&#39;</span>, <span class="token string">&quot;until nslookup mydb.<span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /var/run/secrets/kubernetes.io/serviceaccount/namespace<span class="token variable">)</span></span>.svc.cluster.local; do echo waiting for mydb; sleep 2; done&quot;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f myapp.yaml</span>\npod/myapp-pod created\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看状态：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl get -f myapp.yaml    </span>\nNAME        READY   STATUS     RESTARTS   AGE\nmyapp-pod   <span class="token number">0</span>/1     Init:0/2   <span class="token number">0</span>          8s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出详细信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl describe -f myapp.yaml  </span>\nName:         myapp-pod\nNamespace:    default\n<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>\nLabels:       app.kubernetes.io/name<span class="token operator">=</span>MyApp\nAnnotations:  <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>\nStatus:       Pending\n<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>\nInit Containers:\n  init-myservice:\n<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>\n    State:          Running\n<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>\n  init-mydb:\n<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>\n    State:          Waiting\n      Reason:       PodInitializing\n    Ready:          False\n<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>\nContainers:\n  myapp-container:\n<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>\n    State:          Waiting\n      Reason:       PodInitializing\n    Ready:          False\n<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>\nEvents:\n  Type    Reason     Age   From               Message\n  ----    ------     ----  ----               -------\n  Normal  Scheduled  20s   default-scheduler  Successfully assigned default/myapp-pod to localhost.localdomain\n  Normal  Pulling    17s   kubelet            Pulling image <span class="token string">&quot;busybox:1.28&quot;</span>\n  Normal  Pulled     8s    kubelet            Successfully pulled image <span class="token string">&quot;busybox:1.28&quot;</span> <span class="token keyword">in</span> <span class="token number">9</span>.30472043s\n  Normal  Created    7s    kubelet            Created container init-myservice\n  Normal  Started    6s    kubelet            Started container init-myservice\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看 Pod 内 Init 容器的日志：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl logs myapp-pod -c init-myservice   # 查看第一个 Init 容器</span>\nnslookup: can<span class="token string">&#39;t resolve &#39;</span>myservice.default.svc.cluster.local&#39;\nServer:    <span class="token number">10.96</span>.0.10\nAddress <span class="token number">1</span>: <span class="token number">10.96</span>.0.10 kube-dns.kube-system.svc.cluster.local\n \nwaiting <span class="token keyword">for</span> myservice\n \n \n \n<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl logs myapp-pod -c init-mydb     # 查看第二个 Init 容器</span>\nError from server <span class="token punctuation">(</span>BadRequest<span class="token punctuation">)</span>: container <span class="token string">&quot;init-mydb&quot;</span> <span class="token keyword">in</span> pod <span class="token string">&quot;myapp-pod&quot;</span> is waiting to start: PodInitializing\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，init-mydb容器会等待 init-myservice 执行完成后再执行。 如下为创建这些 Service 的配置文件： services.yaml：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myservice\nspec:\n  ports:\n  - protocol: TCP\n    port: <span class="token number">80</span>\n    targetPort: <span class="token number">9376</span>\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mydb\nspec:\n  ports:\n  - protocol: TCP\n    port: <span class="token number">80</span>\n    targetPort: <span class="token number">9377</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f services.yaml</span>\nservice/myservice created\nservice/mydb created\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次查看状态：变成 了 Running</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pod</span>\nNAME        READY   STATUS    RESTARTS   AGE\nmyapp-pod   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2m35s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时再次查看详细信息，发现两个 init-myservice 和 init-mydb 已经 Terminated 了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Init Containers:\n  init-myservice:\n<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>\n    State:          Terminated\n      Reason:       Completed\n      Exit Code:    <span class="token number">0</span>\n<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>\n  init-mydb:\n<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>\n    State:          Terminated\n      Reason:       Completed\n    Exit Code:    <span class="token number">0</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sidecar-新特性" tabindex="-1"><a class="header-anchor" href="#sidecar-新特性" aria-hidden="true">#</a> Sidecar 新特性</h2>', 31);
const _hoisted_32 = {
  href: "https://kubernetes.io/blog/2023/08/15/kubernetes-v1-28-release/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_33 = /* @__PURE__ */ createStaticVNode('<p>新版本的Sidecar是放置在initContainers中，指定restartPolicy为Always便开启Sidecar，其生命周期以及重启管理与普通容器也是一样的，此特性也可用于运行 Job 。</p><p>下面是一个带有Sidecar的Deployment示例，log Sidecar容器用来输出日志到终端，main容器模拟写入日志: sidecar.yaml：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\n  labels:\n    app: myapp\nspec:\n  replicas: <span class="token number">1</span>\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n        - name: myapp\n          image: alpine:latest\n          command: <span class="token punctuation">[</span><span class="token string">&#39;sh&#39;</span>, <span class="token string">&#39;-c&#39;</span>, <span class="token string">&#39;while true; do echo &quot;logging&quot; &gt;&gt; /opt/logs.txt; sleep 1; done&#39;</span><span class="token punctuation">]</span>\n          volumeMounts:\n            - name: data\n              mountPath: /opt\n      initContainers:\n        - name: logshipper <span class="token comment"># sidecar 容器</span>\n          image: alpine:latest\n          restartPolicy: Always <span class="token comment"># 必须指定restartPolicy为Always才能开启sidecar</span>\n          command: <span class="token punctuation">[</span><span class="token string">&#39;sh&#39;</span>, <span class="token string">&#39;-c&#39;</span>, <span class="token string">&#39;tail -f /opt/logs.txt&#39;</span><span class="token punctuation">]</span>\n          volumeMounts:\n            - name: data\n              mountPath: /opt\n      volumes:\n        - name: data\n          emptyDir: <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>部署到K8s集群中，可以看到initContainers[*].restartPolicy字段</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl create -f sidecar.yaml</span>\ndeployment.apps/myapp created\n \n<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl get po -l app=myapp -ojsonpath=&#39;{.items[0].spec.initContainers[0].restartPolicy}&#39;</span>\nAlways\n \n<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl get po  -l app=myapp </span>\nNAME                    READY   STATUS    RESTARTS   AGE\nmyapp-215h3248d-p4z6   <span class="token number">2</span>/2     Running   <span class="token number">0</span>          1m5s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>myapp Pod中两个容器都是Ready(2/2)，查看日志可以看到log Sidecar一直在输出日志。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl logs -l app=myapp -c logshipper -f</span>\nlogging\nlogging\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 7);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createTextVNode("随着Kubernetes发布了"),
      createBaseVNode("a", _hoisted_32, [
        createTextVNode("1.28"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("，支持了不少重磅特性，其中最令人感慨的莫过于新的Sidecar，目前是alpha版本。之前Sidecar的称谓只是一种多容器的设计模式，在K8s看来和普通容器没什么不一样。但由于其生命周期与业务容器并不一致，对于Sidecar的生命周期管理一直是个问题。")
    ]),
    _hoisted_33
  ]);
}
const ruhezaiKuberneteszhongshiyongInit_Container_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "ruhezaiKuberneteszhongshiyongInit Container.html.vue"]]);
export {
  ruhezaiKuberneteszhongshiyongInit_Container_html as default
};
